Executing section Default...

es6 & beyond/ch8.md
| 125| var•pr•=•request(•"http://some.url.1"•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1
|    | [NORMAL] FilenameBear:
|    | Filename does not follow snake naming-convention.
|----|    | a/scope & closures/apA.md
|    |++++| b/scope & closures/ap_a.md
|    | [NORMAL] FilenameBear:
|    | Filename does not follow snake naming-convention.
|----|    | a/types & grammar/apB.md
|    |++++| b/types & grammar/ap_b.md
|    | [NORMAL] FilenameBear:
|    | Filename does not follow snake naming-convention.
|----|    | a/up & going/apA.md
|    |++++| b/up & going/ap_a.md
|    | [NORMAL] FilenameBear:
|    | Filename does not follow snake naming-convention.
|----|    | a/this & object prototypes/apB.md
|    |++++| b/this & object prototypes/ap_b.md

es6 & beyond/ch3.md
|  22| At•the•time•of•this•writing,•ES6•section•25.1.1.2•(https://people.mozilla.org/~jorendorff/es6-draft.html#sec-iterator-interface)•details•the•`Iterator`•interface•as•having•the•following•requirement:
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to https://people.mozilla.org/~jorendorff/es6-draft.html#sec-iterator-interface

es6 & beyond/ch3.md
| 368| **Note:**•I've•expounded•on•this•particular•technique•in•this•blog•post•(http://blog.getify.com/iterating-es6-numbers/)•if•you•want•more•details.•And•this•comment•(http://blog.getify.com/iterating-es6-numbers/comment-page-1/#comment-535294)•even•suggests•a•similar•trick•but•for•making•string•character•ranges.
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://blog.getify.com/iterating-es6-numbers/
|    | [NORMAL] FilenameBear:
|    | Filename does not follow snake naming-convention.
|----|    | a/es6 & beyond/apA.md
|    |++++| b/es6 & beyond/ap_a.md

es6 & beyond/ch4.md
|  47| ajax(•"http://some.url.1",•function•handler(err,contents){
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

es6 & beyond/ch4.md
|  69| ajax(•"http://some.url.1"•)
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

es6 & beyond/ch4.md
|  89| ajax(•"http://some.url.1"•)
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

es6 & beyond/ch4.md
| 107| ajax(•"http://some.url.1"•)
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

es6 & beyond/ch4.md
| 111| »   »   »   "http://some.url.2?v="•+•contents
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2?v=

es6 & beyond/ch4.md
| 116| »   »   »   "http://backup.url.3?err="•+•reason
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://backup.url.3?err=
|    | [NORMAL] FilenameBear:
|    | Filename does not follow snake naming-convention.
|----|    | a/scope & closures/apC.md
|    |++++| b/scope & closures/ap_c.md
|    | [NORMAL] FilenameBear:
|    | Filename does not follow snake naming-convention.
|----|    | a/this & object prototypes/apA.md
|    |++++| b/this & object prototypes/ap_a.md
|    | [NORMAL] FilenameBear:
|    | Filename does not follow snake naming-convention.
|----|    | a/types & grammar/apA.md
|    |++++| b/types & grammar/ap_a.md

up & going/ch2.md
| 861| The•word•"polyfill"•is•an•invented•term•(by•Remy•Sharp)•(https://remysharp.com/2010/10/08/what-is-a-polyfill)•used•to•refer•to•taking•the•definition•of•a•newer•feature•and•producing•a•piece•of•code•that's•equivalent•to•the•behavior,•but•is•able•to•run•in•older•JS•environments.
|    | [NORMAL] InvalidLinkBear:
|    | Broken link - unable to connect to https://remysharp.com/2010/10/08/what-is-a-polyfill (HTTP Error: 404)

async & performance/ch1.md
|  30| var•data•=•ajax(•"http://some.url.1"•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch1.md
|  44| ajax(•"http://some.url.1",•function•myCallbackFunction(data){
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch1.md
| 221| ajax(•"http://some.url.1",•foo•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch1.md
| 222| ajax(•"http://some.url.2",•bar•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/ch1.md
| 306| ajax(•"http://some.url.1",•foo•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch1.md
| 307| ajax(•"http://some.url.2",•bar•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/ch1.md
| 480| ajax(•"http://some.url.1",•foo•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch1.md
| 481| ajax(•"http://some.url.2",•bar•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/ch1.md
| 502| ajax(•"http://some.url.1",•response•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch1.md
| 503| ajax(•"http://some.url.2",•response•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/ch1.md
| 508| Let's•assume•the•expected•behavior•is•that•`res[0]`•has•the•results•of•the•`"http://some.url.1"`•call,•and•`res[1]`•has•the•results•of•the•`"http://some.url.2"`•call.•Sometimes•that•will•be•the•case,•but•sometimes•they'll•be•flipped,•depending•on•which•call•finishes•first.•There's•a•pretty•good•likelihood•that•this•nondeterminism•is•a•"race•condition"•bug.
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch1.md
| 510| **Note:**•Be•extremely•wary•of•assumptions•you•might•tend•to•make•in•these•situations.•For•example,•it's•not•uncommon•for•a•developer•to•observe•that•`"http://some.url.2"`•is•"always"•much•slower•to•respond•than•`"http://some.url.1"`,•perhaps•by•virtue•of•what•tasks•they're•doing•(e.g.,•one•performing•a•database•task•and•the•other•just•fetching•a•static•file),•so•the•observed•ordering•seems•to•always•be•as•expected.•Even•if•both•requests•go•to•the•same•server,•and•*it*•intentionally•responds•in•a•certain•order,•there's•no•*real*•guarantee•of•what•order•the•responses•will•arrive•back•in•the•browser.
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/ch1.md
| 518| »   if•(data.url•==•"http://some.url.1")•{
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch1.md
| 521| »   else•if•(data.url•==•"http://some.url.2")•{
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/ch1.md
| 527| ajax(•"http://some.url.1",•response•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch1.md
| 528| ajax(•"http://some.url.2",•response•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/ch1.md
| 531| Regardless•of•which•Ajax•response•comes•back•first,•we•inspect•the•`data.url`•(assuming•one•is•returned•from•the•server,•of•course!)•to•figure•out•which•position•the•response•data•should•occupy•in•the•`res`•array.•`res[0]`•will•always•hold•the•`"http://some.url.1"`•results•and•`res[1]`•will•always•hold•the•`"http://some.url.2"`•results.•Through•simple•coordination,•we•eliminated•the•"race•condition"•nondeterminism.
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch1.md
| 555| ajax(•"http://some.url.1",•foo•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch1.md
| 556| ajax(•"http://some.url.2",•bar•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/ch1.md
| 585| ajax(•"http://some.url.1",•foo•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch1.md
| 586| ajax(•"http://some.url.2",•bar•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/ch1.md
| 613| ajax(•"http://some.url.1",•foo•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch1.md
| 614| ajax(•"http://some.url.2",•bar•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/ch1.md
| 643| ajax(•"http://some.url.1",•foo•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch1.md
| 644| ajax(•"http://some.url.2",•bar•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/ch1.md
| 672| ajax(•"http://some.url.1",•response•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch1.md
| 673| ajax(•"http://some.url.2",•response•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/ch1.md
| 676| If•`"http://some.url.1"`•gets•its•results•back•first,•the•entire•list•will•be•mapped•into•`res`•all•at•once.•If•it's•a•few•thousand•or•less•records,•this•is•not•generally•a•big•deal.•But•if•it's•say•10•million•records,•that•can•take•a•while•to•run•(several•seconds•on•a•powerful•laptop,•much•longer•on•a•mobile•device,•etc.).
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch1.md
| 710| ajax(•"http://some.url.1",•response•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch1.md
| 711| ajax(•"http://some.url.2",•response•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2
|    | [NORMAL] FilenameBear:
|    | Filename does not follow snake naming-convention.
|----|    | a/scope & closures/apD.md
|    |++++| b/scope & closures/ap_d.md

.travis.yml
|  12| ••#•Create•two•diff•files,•and•upload•to•https://clbin.com
|    | [NORMAL] InvalidLinkBear:
|    | Broken link - unable to connect to https://clbin.com (HTTP Error: 404)

.travis.yml
|  17| ••-•cat•sans-whitespace.diff•|•curl•-F•'clbin=<-'•https://clbin.com
|    | [NORMAL] InvalidLinkBear:
|    | Broken link - unable to connect to https://clbin.com (HTTP Error: 404)

.travis.yml
|  19| ••-•cat•with-whitespace.diff•|•curl•-F•'clbin=<-'•https://clbin.com
|    | [NORMAL] InvalidLinkBear:
|    | Broken link - unable to connect to https://clbin.com (HTTP Error: 404)

.travis.yml
|  20| ••#•Upload•logs•to•https://clbin.com
|    | [NORMAL] InvalidLinkBear:
|    | Broken link - unable to connect to https://clbin.com (HTTP Error: 404)

.travis.yml
|  21| ••-•cat•coala-ci.log•|•curl•-F•'clbin=<-'•https://clbin.com
|    | [NORMAL] InvalidLinkBear:
|    | Broken link - unable to connect to https://clbin.com (HTTP Error: 404)

async & performance/ch4.md
| 668| »   »   "http://some.url.1/?x="•+•x•+•"&y="•+•y,
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1/?x=

async & performance/ch4.md
| 688| »   »   "http://some.url.1/?x="•+•x•+•"&y="•+•y,
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1/?x=

async & performance/ch4.md
| 853| »   »   "http://some.url.1/?x="•+•x•+•"&y="•+•y
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1/?x=

async & performance/ch4.md
| 883| »   »   "http://some.url.1/?x="•+•x•+•"&y="•+•y
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1/?x=

async & performance/ch4.md
|1007| »   »   "http://some.url.1/?x="•+•x•+•"&y="•+•y
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1/?x=

async & performance/ch4.md
|1046| »   var•r1•=•yield•request(•"http://some.url.1"•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch4.md
|1047| »   var•r2•=•yield•request(•"http://some.url.2"•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/ch4.md
|1050| »   »   "http://some.url.3/?v="•+•r1•+•","•+•r2
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.3/?v=

async & performance/ch4.md
|1062| Because•the•`r1`•and•`r2`•requests•can•--•and•for•performance•reasons,•*should*•--•run•concurrently,•but•in•this•code•they•will•run•sequentially;•the•`"http://some.url.2"`•URL•isn't•Ajax•fetched•until•after•the•`"http://some.url.1"`•request•is•finished.•These•two•requests•are•independent,•so•the•better•performance•approach•would•likely•be•to•have•them•run•at•the•same•time.
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/ch4.md
|1073| »   var•p1•=•request(•"http://some.url.1"•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch4.md
|1074| »   var•p2•=•request(•"http://some.url.2"•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/ch4.md
|1081| »   »   "http://some.url.3/?v="•+•r1•+•","•+•r2
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.3/?v=

async & performance/ch4.md
|1104| »   »   request(•"http://some.url.1"•),
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch4.md
|1105| »   »   request(•"http://some.url.2"•)
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/ch4.md
|1112| »   »   "http://some.url.3/?v="•+•r1•+•","•+•r2
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.3/?v=

async & performance/ch4.md
|1145| »   »   "http://some.url.1",
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch4.md
|1146| »   »   "http://some.url.2"
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/ch4.md
|1153| »   »   "http://some.url.3/?v="•+•r1•+•","•+•r2
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.3/?v=

async & performance/ch4.md
|1194| »   var•r2•=•yield•request(•"http://some.url.2"•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/ch4.md
|1195| »   var•r3•=•yield•request(•"http://some.url.3/?v="•+•r2•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.3/?v=

async & performance/ch4.md
|1201| »   var•r1•=•yield•request(•"http://some.url.1"•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch4.md
|1256| »   var•r2•=•yield•request(•"http://some.url.2"•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/ch4.md
|1257| »   var•r3•=•yield•request(•"http://some.url.3/?v="•+•r2•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.3/?v=

async & performance/ch4.md
|1263| »   var•r1•=•yield•request(•"http://some.url.1"•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch4.md
|1463| »   var•r2•=•yield•request(•"http://some.url.2"•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/ch4.md
|1464| »   var•r3•=•yield•request(•"http://some.url.3/?v="•+•r2•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.3/?v=

async & performance/ch4.md
|1470| »   var•r1•=•yield•request(•"http://some.url.1"•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch4.md
|1497| »   return•yield•request(•"http://some.url/?v="•+•val•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url/?v=

async & performance/ch4.md
|1536| »   if•(data.url•==•"http://some.url.1")•{
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch4.md
|1539| »   else•if•(data.url•==•"http://some.url.2")•{
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/ch4.md
|1566| var•it1•=•reqData(•"http://some.url.1"•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch4.md
|1567| var•it2•=•reqData(•"http://some.url.2"•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/ch4.md
|1600| var•it1•=•reqData(•"http://some.url.1"•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch4.md
|1601| var•it2•=•reqData(•"http://some.url.2"•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/ch4.md
|1634| »   »   var•p1•=•request(•"http://some.url.1"•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch4.md
|1642| »   »   var•p2•=•request(•"http://some.url.2"•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/ch4.md
|1656| 1.•The•first•generator•gets•a•promise•for•the•first•Ajax•response•from•`"http://some.url.1"`,•then•`yield`s•control•back•to•the•`runAll(..)`•utility.
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch4.md
|1657| 2.•The•second•generator•runs•and•does•the•same•for•`"http://some.url.2"`,•`yield`ing•control•back•to•the•`runAll(..)`•utility.
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/ch4.md
|1675| »   »   var•url1•=•yield•"http://some.url.2";
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/ch4.md
|1677| »   »   var•p1•=•request(•url1•);•//•"http://some.url.1"
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch4.md
|1686| »   »   var•url2•=•yield•"http://some.url.1";
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch4.md
|1688| »   »   var•p2•=•request(•url2•);•//•"http://some.url.2"
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/ch4.md
|1913| »   var•val•=•yield•request(•"http://some.url.1"•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch4.md
|2002| var•it•=•foo(•"http://some.url.1"•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch4.md
|2023| var•it•=•foo(•"http://some.url.1"•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

es6 & beyond/ch2.md
|   8| **Tip:**•At•the•time•of•this•writing,•some•of•the•features•discussed•in•this•book•have•been•implemented•in•various•browsers•(Firefox,•Chrome,•etc.),•but•some•have•only•been•partially•implemented•and•many•others•have•not•been•implemented•at•all.•Your•experience•may•be•mixed•trying•these•examples•directly.•If•so,•try•them•out•with•transpilers,•as•most•of•these•features•are•covered•by•those•tools.•ES6Fiddle•(http://www.es6fiddle.net/)•is•a•great,•easy-to-use•playground•for•trying•out•ES6,•as•is•the•online•REPL•for•the•Babel•transpiler•(http://babeljs.io/repl/).
|    | [NORMAL] InvalidLinkBear:
|    | Broken link - unable to connect to http://www.es6fiddle.net/ (HTTP Error: 503)

es6 & beyond/ch2.md
| 527| ajax(•"http://some.url.1"•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch5.md
|  41| var•w1•=•new•Worker(•"http://some.url.1/mycoolworker.js"•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1/mycoolworker.js

async & performance/ch5.md
| 147| var•w1•=•new•SharedWorker(•"http://some.url.1/mycoolworker.js"•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1/mycoolworker.js
|    | [NORMAL] FilenameBear:
|    | Filename does not follow snake naming-convention.
|----|    | a/scope & closures/apB.md
|    |++++| b/scope & closures/ap_b.md

scope & closures/apB.md
| 121| [^note-traceur]:•[Google•Traceur](http://traceur-compiler.googlecode.com/git/demo/repl.html)
|    | [NORMAL] InvalidLinkBear:
|    | Broken link - unable to connect to http://traceur-compiler.googlecode.com/git/demo/repl.html (HTTP Error: 404)
|    | [NORMAL] FilenameBear:
|    | Filename does not follow snake naming-convention.
|----|    | a/async & performance/apB.md
|    |++++| b/async & performance/ap_b.md

async & performance/apB.md
|  76| ASQ(•"http://some.url.1"•)
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/apB.md
|  87| »   »   »   request(•"http://some.url.2/?v="•+•resp•),
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2/?v=

async & performance/apB.md
|  88| »   »   »   request(•"http://some.url.3/?v="•+•resp•)
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.3/?v=

async & performance/apB.md
| 110| ASQ(•"http://some.url.1"•)
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/apB.md
| 114| »   »   request(•"http://some.url.2/?v="•+•resp•),
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2/?v=

async & performance/apB.md
| 115| »   »   request(•"http://some.url.3/?v="•+•resp•)
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.3/?v=

async & performance/apB.md
| 129| »   »   request(•"http://some.url.2/?v="•+•resp•)
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2/?v=

async & performance/apB.md
| 133| »   »   request(•"http://some.url.3/?v="•+•resp•)
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.3/?v=

async & performance/apB.md
| 203| »   »   »   »   "http://some.url.4/?v="•+•text
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.4/?v=

async & performance/apB.md
| 209| »   »   request(•"http://some.url.2/?v="•+•resp•),
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2/?v=

async & performance/apB.md
| 210| »   »   request(•"http://some.url.3/?v="•+•resp•)
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.3/?v=

async & performance/apB.md
| 221| »   url:•"http://some.url.1",
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/apB.md
| 241| »   »   request(•"http://some.url.2/?v="•+•resp•),
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2/?v=

async & performance/apB.md
| 242| »   »   request(•"http://some.url.3/?v="•+•resp•)
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.3/?v=

async & performance/apB.md
| 258| »   »   »   "http://some.url.4/?v="•+•text
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.4/?v=

async & performance/apB.md
| 291| »   url:•"http://some.url.1",
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/apB.md
| 422| »   »   "http://some.url.1/?id="•+•btnID
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1/?id=

async & performance/apB.md
| 536| »   "http://some.url.2"
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/apB.md
| 543| »   »   var•url1•=•token.messages[0];•//•"http://some.url.1"
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/apB.md
| 556| »   »   var•url2•=•token.messages[0];•//•"http://some.url.2"
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/apB.md
| 559| »   »   token.messages[0]•=•"http://some.url.1";
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/apB.md
| 574| »   //•`res[0]`•comes•from•"http://some.url.1"
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/apB.md
| 575| »   //•`res[1]`•comes•from•"http://some.url.2"
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/apB.md
| 791| »   »   yield•ASQ.csp.put(•ch,•"http://some.url.2"•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/apB.md
| 794| »   »   //•"http://some.url.1"
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/apB.md
| 802| »   »   //•"http://some.url.2"
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/apB.md
| 804| »   »   yield•ASQ.csp.put(•ch,•"http://some.url.1"•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/apB.md
| 816| »   //•`res1`•comes•from•"http://some.url.1"
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/apB.md
| 817| »   //•`res2`•comes•from•"http://some.url.2"
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2

async & performance/ch2.md
| 128| »   »   ajax(•"http://some.url.1",•function•response(text){
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch2.md
| 250| »   ajax(•"http://some.url.1",•response•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch2.md
| 449| ajax(•"http://some.url.1",•success,•failure•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch2.md
| 470| ajax(•"http://some.url.1",•response•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1

async & performance/ch2.md
| 512| ajax(•"http://some.url.1",•timeoutify(•foo,•500•)•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1
|    | [NORMAL] FilenameBear:
|    | Filename does not follow snake naming-convention.
|----|    | a/async & performance/apC.md
|    |++++| b/async & performance/ap_c.md
|    | [NORMAL] FilenameBear:
|    | Filename does not follow snake naming-convention.
|----|    | a/async & performance/apA.md
|    |++++| b/async & performance/ap_a.md

async & performance/ch3.md
| 903| request(•"http://some.url.1/"•)
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1/

async & performance/ch3.md
| 905| »   return•request(•"http://some.url.2/?v="•+•response1•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2/?v=

async & performance/ch3.md
| 924| request(•"http://some.url.1/"•)
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1/

async & performance/ch3.md
| 931| »   return•request(•"http://some.url.2/?v="•+•response1•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2/?v=

async & performance/ch3.md
|1328| var•p1•=•request(•"http://some.url.1/"•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1/

async & performance/ch3.md
|1329| var•p2•=•request(•"http://some.url.2/"•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2/

async & performance/ch3.md
|1336| »   »   "http://some.url.3/?v="•+•msgs.join(",")
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.3/?v=

async & performance/ch3.md
|1372| var•p1•=•request(•"http://some.url.1/"•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1/

async & performance/ch3.md
|1373| var•p2•=•request(•"http://some.url.2/"•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.2/

async & performance/ch3.md
|1379| »   »   "http://some.url.3/?v="•+•msg
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.3/?v=

async & performance/ch3.md
|1861| »   return•request(•"http://some.url.1/?id="•+•btnID•);
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1/?id=

async & performance/ch3.md
|1876| »   request(•"http://some.url.1/?id="•+•btnID•)
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1/?id=

async & performance/ch3.md
|1902| »   »   "http://some.url.1/?x="•+•x•+•"&y="•+•y,
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1/?x=

async & performance/ch3.md
|1955| request(•"http://some.url.1/"•)
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1/

async & performance/ch3.md
|1984| »   »   "http://some.url.1/?x="•+•x•+•"&y="•+•y
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1/?x=

async & performance/ch3.md
|2019| »   »   "http://some.url.1/?x="•+•x•+•"&y="•+•y
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to http://some.url.1/?x=

es6 & beyond/ch7.md
|1009| The•"https://featuretests.io"•feature-tests-as-a-service•offers•solutions•to•these•frustrations.
|    | [MAJOR] InvalidLinkBear:
|    | Broken link - unable to connect to https://featuretests.io
Executing section markdown...
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/types & grammar/README.md
|    |++++| /app/types & grammar/README.md
|   2|   2| 
|   3|   3| <img src="cover.jpg" width="300">
|   4|   4| 
|----|    | --
|    |   5|+***
|   5|   6| 
|   6|   7| **[Purchase digital/print copy from O'Reilly](http://shop.oreilly.com/product/0636920033745.do)**
|   7|   8| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/types & grammar/README.md
|    |++++| /app/types & grammar/README.md
|   6|   6| 
|   7|   7| **[Purchase digital/print copy from O'Reilly](http://shop.oreilly.com/product/0636920033745.do)**
|   8|   8| 
|----|    | --
|    |   9|+***
|   9|  10| 
|  10|  11| [Table of Contents](toc.md)
|  11|  12| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/types & grammar/README.md
|    |++++| /app/types & grammar/README.md
|  10|  10| 
|  11|  11| [Table of Contents](toc.md)
|  12|  12| 
|  13|    |-* [Foreword](foreword.md) (by [David Walsh](http://davidwalsh.name))
|  14|    |-* [Preface](../preface.md)
|  15|    |-* [Chapter 1: Types](ch1.md)
|  16|    |-* [Chapter 2: Values](ch2.md)
|  17|    |-* [Chapter 3: Natives](ch3.md)
|  18|    |-* [Chapter 4: Coercion](ch4.md)
|  19|    |-* [Chapter 5: Grammar](ch5.md)
|  20|    |-* [Appendix A: Mixed Environment JavaScript](apA.md)
|  21|    |-* [Appendix B: Thank You's!](apB.md)
|    |  13|+- [Foreword](foreword.md) (by [David Walsh](http://davidwalsh.name))
|    |  14|+- [Preface](../preface.md)
|    |  15|+- [Chapter 1: Types](ch1.md)
|    |  16|+- [Chapter 2: Values](ch2.md)
|    |  17|+- [Chapter 3: Natives](ch3.md)
|    |  18|+- [Chapter 4: Coercion](ch4.md)
|    |  19|+- [Chapter 5: Grammar](ch5.md)
|    |  20|+- [Appendix A: Mixed Environment JavaScript](apA.md)
|    |  21|+- [Appendix B: Thank You's!](apB.md)

types & grammar/README.md
|   7| **[Purchase•digital/print•copy•from•O'Reilly](http://shop.oreilly.com/product/0636920033745.do)**
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (97 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/types & grammar/toc.md
|    |++++| /app/types & grammar/toc.md
|   2|   2| 
|   3|   3| ## Table of Contents
|   4|   4| 
|   5|    |-* Foreword
|   6|    |-* Preface
|   7|    |-* Chapter 1: Types
|   8|    |-	* A Type By Any Other Name...
|   9|    |-	* Built-in Types
|  10|    |-	* Values as Types
|  11|    |-* Chapter 2: Values
|  12|    |-	* Arrays
|  13|    |-	* Strings
|  14|    |-	* Numbers
|  15|    |-	* Special Values
|  16|    |-	* Value vs Reference
|  17|    |-* Chapter 3: Natives
|  18|    |-	* Internal `[[Class]]`
|  19|    |-	* Boxing Wrappers
|  20|    |-	* Unboxing
|  21|    |-	* Natives as Constructors
|  22|    |-* Chapter 4: Coercion
|  23|    |-	* Converting Values
|  24|    |-	* Abstract Value Operations
|  25|    |-	* Explicit Coercion
|  26|    |-	* Implicit Coercion
|  27|    |-	* Loose Equals vs Strict Equals
|  28|    |-	* Abstract Relational Comparison
|  29|    |-* Chapter 5: Grammar
|  30|    |-	* Statements & Expressions
|  31|    |-	* Operator Precedence
|  32|    |-	* Automatic Semicolons
|  33|    |-	* Errors
|  34|    |-	* Function Arguments
|  35|    |-	* `try..finally`
|  36|    |-	* `switch`
|  37|    |-* Appendix A: Mixed Environment JavaScript
|  38|    |-* Appendix B: Acknowledgments
|  39|    |-
|    |   5|+- Foreword
|    |   6|+- Preface
|    |   7|+- Chapter 1: Types
|    |   8|+  		* A Type By Any Other Name...
|    |   9|+  		* Built-in Types
|    |  10|+  		\* Values as Types
|    |  11|+- Chapter 2: Values
|    |  12|+  		* Arrays
|    |  13|+  		* Strings
|    |  14|+  		* Numbers
|    |  15|+  		* Special Values
|    |  16|+  		\* Value vs Reference
|    |  17|+- Chapter 3: Natives
|    |  18|+  		* Internal `[[Class]]`
|    |  19|+  		* Boxing Wrappers
|    |  20|+  		* Unboxing
|    |  21|+  		* Natives as Constructors
|    |  22|+- Chapter 4: Coercion
|    |  23|+  		* Converting Values
|    |  24|+  		* Abstract Value Operations
|    |  25|+  		* Explicit Coercion
|    |  26|+  		* Implicit Coercion
|    |  27|+  		* Loose Equals vs Strict Equals
|    |  28|+  		* Abstract Relational Comparison
|    |  29|+- Chapter 5: Grammar
|    |  30|+  		* Statements & Expressions
|    |  31|+  		* Operator Precedence
|    |  32|+  		* Automatic Semicolons
|    |  33|+  		* Errors
|    |  34|+  		* Function Arguments
|    |  35|+  		* `try..finally`
|    |  36|+  		\* `switch`
|    |  37|+- Appendix A: Mixed Environment JavaScript
|    |  38|+- Appendix B: Acknowledgments
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/scope & closures/ch3.md
|    |++++| /app/scope & closures/ch3.md
|   1|   1| # You Don't Know JS: Scope & Closures
|    |   2|+
|   2|   3| # Chapter 3: Function vs. Block Scope
|   3|   4| 
|   4|   5| As we explored in Chapter 2, scope consists of a series of "bubbles" that each act as a container or bucket, in which identifiers (variables, functions) are declared. These bubbles nest neatly inside each other, and this nesting is defined at author-time.
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/scope & closures/ch3.md
|    |++++| /app/scope & closures/ch3.md
| 608| 608| 
| 609| 609| Though some seem to believe so, block scope should not be taken as an outright replacement of `var` function scope. Both functionalities co-exist, and developers can and should use both function-scope and block-scope techniques where respectively appropriate to produce better, more readable/maintainable code.
| 610| 610| 
| 611|    |-[^note-leastprivilege]: [Principle of Least Privilege](http://en.wikipedia.org/wiki/Principle_of_least_privilege)
|    | 611|+[^note-leastprivilege]&#x3A; [Principle of Least Privilege](http://en.wikipedia.org/wiki/Principle_of_least_privilege)

scope & closures/ch3.md
|   4| As•we•explored•in•Chapter•2,•scope•consists•of•a•series•of•"bubbles"•that•each•act•as•a•container•or•bucket,•in•which•identifiers•(variables,•functions)•are•declared.•These•bubbles•nest•neatly•inside•each•other,•and•this•nesting•is•defined•at•author-time.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (255 > 79)

scope & closures/ch3.md
|   6| But•what•exactly•makes•a•new•bubble?•Is•it•only•the•function?•Can•other•structures•in•JavaScript•create•bubbles•of•scope?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (121 > 79)

scope & closures/ch3.md
|  10| The•most•common•answer•to•those•questions•is•that•JavaScript•has•function-based•scope.•That•is,•each•function•you•declare•creates•a•bubble•for•itself,•but•no•other•structures•create•their•own•scope•bubbles.•As•we'll•see•in•just•a•little•bit,•this•is•not•quite•true.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (265 > 79)

scope & closures/ch3.md
|  32| In•this•snippet,•the•scope•bubble•for•`foo(..)`•includes•identifiers•`a`,•`b`,•`c`•and•`bar`.•**It•doesn't•matter**•*where*•in•the•scope•a•declaration•appears,•the•variable•or•function•belongs•to•the•containing•scope•bubble,•regardless.•We'll•explore•how•exactly•*that*•works•in•the•next•chapter.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (296 > 79)

scope & closures/ch3.md
|  34| `bar(..)`•has•its•own•scope•bubble.•So•does•the•global•scope,•which•has•just•one•identifier•attached•to•it:•`foo`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (114 > 79)

scope & closures/ch3.md
|  36| Because•`a`,•`b`,•`c`,•and•`bar`•all•belong•to•the•scope•bubble•of•`foo(..)`,•they•are•not•accessible•outside•of•`foo(..)`.•That•is,•the•following•code•would•all•result•in•`ReferenceError`•errors,•as•the•identifiers•are•not•available•to•the•global•scope:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (254 > 79)

scope & closures/ch3.md
|  44| However,•all•these•identifiers•(`a`,•`b`,•`c`,•`foo`,•and•`bar`)•are•accessible•*inside*•of•`foo(..)`,•and•indeed•also•available•inside•of•`bar(..)`•(assuming•there•are•no•shadow•identifier•declarations•inside•`bar(..)`).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (221 > 79)

scope & closures/ch3.md
|  46| Function•scope•encourages•the•idea•that•all•variables•belong•to•the•function,•and•can•be•used•and•reused•throughout•the•entirety•of•the•function•(and•indeed,•accessible•even•to•nested•scopes).•This•design•approach•can•be•quite•useful,•and•certainly•can•make•full•use•of•the•"dynamic"•nature•of•JavaScript•variables•to•take•on•values•of•different•types•as•needed.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (362 > 79)

scope & closures/ch3.md
|  48| On•the•other•hand,•if•you•don't•take•careful•precautions,•variables•existing•across•the•entirety•of•a•scope•can•lead•to•some•unexpected•pitfalls.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (145 > 79)

scope & closures/ch3.md
|  52| The•traditional•way•of•thinking•about•functions•is•that•you•declare•a•function,•and•then•add•code•inside•it.•But•the•inverse•thinking•is•equally•powerful•and•useful:•take•any•arbitrary•section•of•code•you've•written,•and•wrap•a•function•declaration•around•it,•which•in•effect•"hides"•the•code.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (293 > 79)

scope & closures/ch3.md
|  54| The•practical•result•is•to•create•a•scope•bubble•around•the•code•in•question,•which•means•that•any•declarations•(variable•or•function)•in•that•code•will•now•be•tied•to•the•scope•of•the•new•wrapping•function,•rather•than•the•previously•enclosing•scope.•In•other•words,•you•can•"hide"•variables•and•functions•by•enclosing•them•in•the•scope•of•a•function.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (352 > 79)

scope & closures/ch3.md
|  58| There's•a•variety•of•reasons•motivating•this•scope-based•hiding.•They•tend•to•arise•from•the•software•design•principle•"Principle•of•Least•Privilege"•[^note-leastprivilege],•also•sometimes•called•"Least•Authority"•or•"Least•Exposure".•This•principle•states•that•in•the•design•of•software,•such•as•the•API•for•a•module/object,•you•should•expose•only•what•is•minimally•necessary,•and•"hide"•everything•else.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (405 > 79)

scope & closures/ch3.md
|  60| This•principle•extends•to•the•choice•of•which•scope•to•contain•variables•and•functions.•If•all•variables•and•functions•were•in•the•global•scope,•they•would•of•course•be•accessible•to•any•nested•scope.•But•this•would•violate•the•"Least..."•principle•in•that•you•are•(likely)•exposing•many•variables•or•functions•which•you•should•otherwise•keep•private,•as•proper•use•of•the•code•would•discourage•access•to•those•variables/functions.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (431 > 79)

scope & closures/ch3.md
|  80| In•this•snippet,•the•`b`•variable•and•the•`doSomethingElse(..)`•function•are•likely•"private"•details•of•how•`doSomething(..)`•does•its•job.•Giving•the•enclosing•scope•"access"•to•`b`•and•`doSomethingElse(..)`•is•not•only•unnecessary•but•also•possibly•"dangerous",•in•that•they•may•be•used•in•unexpected•ways,•intentionally•or•not,•and•this•may•violate•pre-condition•assumptions•of•`doSomething(..)`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (400 > 79)

scope & closures/ch3.md
|  82| A•more•"proper"•design•would•hide•these•private•details•inside•the•scope•of•`doSomething(..)`,•such•as:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (103 > 79)

scope & closures/ch3.md
| 100| Now,•`b`•and•`doSomethingElse(..)`•are•not•accessible•to•any•outside•influence,•instead•controlled•only•by•`doSomething(..)`.•The•functionality•and•end-result•has•not•been•affected,•but•the•design•keeps•private•details•private,•which•is•usually•considered•better•software.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (272 > 79)

scope & closures/ch3.md
| 104| Another•benefit•of•"hiding"•variables•and•functions•inside•a•scope•is•to•avoid•unintended•collision•between•two•different•identifiers•with•the•same•name•but•different•intended•usages.•Collision•results•often•in•unexpected•overwriting•of•values.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (244 > 79)

scope & closures/ch3.md
| 123| The•`i•=•3`•assignment•inside•of•`bar(..)`•overwrites,•unexpectedly,•the•`i`•that•was•declared•in•`foo(..)`•at•the•for-loop.•In•this•case,•it•will•result•in•an•infinite•loop,•because•`i`•is•set•to•a•fixed•value•of•`3`•and•that•will•forever•remain•`<•10`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (254 > 79)

scope & closures/ch3.md
| 125| The•assignment•inside•`bar(..)`•needs•to•declare•a•local•variable•to•use,•regardless•of•what•identifier•name•is•chosen.•`var•i•=•3;`•would•fix•the•problem•(and•would•create•the•previously•mentioned•"shadowed•variable"•declaration•for•`i`).•An•*additional*,•not•alternate,•option•is•to•pick•another•identifier•name•entirely,•such•as•`var•j•=•3;`.•But•your•software•design•may•naturally•call•for•the•same•identifier•name,•so•utilizing•scope•to•"hide"•your•inner•declaration•is•your•best/only•option•in•that•case.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (510 > 79)

scope & closures/ch3.md
| 129| A•particularly•strong•example•of•(likely)•variable•collision•occurs•in•the•global•scope.•Multiple•libraries•loaded•into•your•program•can•quite•easily•collide•with•each•other•if•they•don't•properly•hide•their•internal/private•functions•and•variables.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (249 > 79)

scope & closures/ch3.md
| 131| Such•libraries•typically•will•create•a•single•variable•declaration,•often•an•object,•with•a•sufficiently•unique•name,•in•the•global•scope.•This•object•is•then•used•as•a•"namespace"•for•that•library,•where•all•specific•exposures•of•functionality•are•made•as•properties•off•that•object•(namespace),•rather•than•as•top-level•lexically•scoped•identifiers•themselves.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (362 > 79)

scope & closures/ch3.md
| 149| Another•option•for•collision•avoidance•is•the•more•modern•"module"•approach,•using•any•of•various•dependency•managers.•Using•these•tools,•no•libraries•ever•add•any•identifiers•to•the•global•scope,•but•are•instead•required•to•have•their•identifier(s)•be•explicitly•imported•into•another•specific•scope•through•usage•of•the•dependency•manager's•various•mechanisms.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (362 > 79)

scope & closures/ch3.md
| 151| It•should•be•observed•that•these•tools•do•not•possess•"magic"•functionality•that•is•exempt•from•lexical•scoping•rules.•They•simply•use•the•rules•of•scoping•as•explained•here•to•enforce•that•no•identifiers•are•injected•into•any•shared•scope,•and•are•instead•kept•in•private,•non-collision-susceptible•scopes,•which•prevents•any•accidental•scope•collisions.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (355 > 79)

scope & closures/ch3.md
| 153| As•such,•you•can•code•defensively•and•achieve•the•same•results•as•the•dependency•managers•do•without•actually•needing•to•use•them,•if•you•so•choose.•See•the•Chapter•5•for•more•information•about•the•module•pattern.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (213 > 79)

scope & closures/ch3.md
| 157| We've•seen•that•we•can•take•any•snippet•of•code•and•wrap•a•function•around•it,•and•that•effectively•"hides"•any•enclosed•variable•or•function•declarations•from•the•outside•scope•inside•that•function's•inner•scope.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (213 > 79)

scope & closures/ch3.md
| 175| While•this•technique•"works",•it•is•not•necessarily•very•ideal.•There•are•a•few•problems•it•introduces.•The•first•is•that•we•have•to•declare•a•named-function•`foo()`,•which•means•that•the•identifier•name•`foo`•itself•"pollutes"•the•enclosing•scope•(global,•in•this•case).•We•also•have•to•explicitly•call•the•function•by•name•(`foo()`)•so•that•the•wrapped•code•actually•executes.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (378 > 79)

scope & closures/ch3.md
| 177| It•would•be•more•ideal•if•the•function•didn't•need•a•name•(or,•rather,•the•name•didn't•pollute•the•enclosing•scope),•and•if•the•function•could•automatically•be•executed.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (169 > 79)

scope & closures/ch3.md
| 196| First,•notice•that•the•wrapping•function•statement•starts•with•`(function...`•as•opposed•to•just•`function...`.•While•this•may•seem•like•a•minor•detail,•it's•actually•a•major•change.•Instead•of•treating•the•function•as•a•standard•declaration,•the•function•is•treated•as•a•function-expression.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (292 > 79)

scope & closures/ch3.md
| 198| **Note:**•The•easiest•way•to•distinguish•declaration•vs.•expression•is•the•position•of•the•word•"function"•in•the•statement•(not•just•a•line,•but•a•distinct•statement).•If•"function"•is•the•very•first•thing•in•the•statement,•then•it's•a•function•declaration.•Otherwise,•it's•a•function•expression.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (297 > 79)

scope & closures/ch3.md
| 200| The•key•difference•we•can•observe•here•between•a•function•declaration•and•a•function•expression•relates•to•where•its•name•is•bound•as•an•identifier.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (148 > 79)

scope & closures/ch3.md
| 202| Compare•the•previous•two•snippets.•In•the•first•snippet,•the•name•`foo`•is•bound•in•the•enclosing•scope,•and•we•call•it•directly•with•`foo()`.•In•the•second•snippet,•the•name•`foo`•is•not•bound•in•the•enclosing•scope,•but•instead•is•bound•only•inside•of•its•own•function.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (271 > 79)

scope & closures/ch3.md
| 204| In•other•words,•`(function•foo(){•..•})`•as•an•expression•means•the•identifier•`foo`•is•found•*only*•in•the•scope•where•the•`..`•indicates,•not•in•the•outer•scope.•Hiding•the•name•`foo`•inside•itself•means•it•does•not•pollute•the•enclosing•scope•unnecessarily.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (260 > 79)

scope & closures/ch3.md
| 208| You•are•probably•most•familiar•with•function•expressions•as•callback•parameters,•such•as:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (89 > 79)

scope & closures/ch3.md
| 216| This•is•called•an•"anonymous•function•expression",•because•`function()...`•has•no•name•identifier•on•it.•Function•expressions•can•be•anonymous,•but•function•declarations•cannot•omit•the•name•--•that•would•be•illegal•JS•grammar.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (227 > 79)

scope & closures/ch3.md
| 218| Anonymous•function•expressions•are•quick•and•easy•to•type,•and•many•libraries•and•tools•tend•to•encourage•this•idiomatic•style•of•code.•However,•they•have•several•draw-backs•to•consider:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (186 > 79)

scope & closures/ch3.md
| 220| 1.•Anonymous•functions•have•no•useful•name•to•display•in•stack•traces,•which•can•make•debugging•more•difficult.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (111 > 79)

scope & closures/ch3.md
| 222| 2.•Without•a•name,•if•the•function•needs•to•refer•to•itself,•for•recursion,•etc.,•the•**deprecated**•`arguments.callee`•reference•is•unfortunately•required.•Another•example•of•needing•to•self-reference•is•when•an•event•handler•function•wants•to•unbind•itself•after•it•fires.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (274 > 79)

scope & closures/ch3.md
| 224| 3.•Anonymous•functions•omit•a•name•that•is•often•helpful•in•providing•more•readable/understandable•code.•A•descriptive•name•helps•self-document•the•code•in•question.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (165 > 79)

scope & closures/ch3.md
| 226| **Inline•function•expressions**•are•powerful•and•useful•--•the•question•of•anonymous•vs.•named•doesn't•detract•from•that.•Providing•a•name•for•your•function•expression•quite•effectively•addresses•all•these•draw-backs,•but•has•no•tangible•downsides.•The•best•practice•is•to•always•name•your•function•expressions:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (311 > 79)

scope & closures/ch3.md
| 249| Now•that•we•have•a•function•as•an•expression•by•virtue•of•wrapping•it•in•a•`(•)`•pair,•we•can•execute•that•function•by•adding•another•`()`•on•the•end,•like•`(function•foo(){•..•})()`.•The•first•enclosing•`(•)`•pair•makes•the•function•an•expression,•and•the•second•`()`•executes•the•function.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (291 > 79)

scope & closures/ch3.md
| 251| This•pattern•is•so•common,•a•few•years•ago•the•community•agreed•on•a•term•for•it:•**IIFE**,•which•stands•for•**I**mmediately•**I**nvoked•**F**unction•**E**xpression.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (165 > 79)

scope & closures/ch3.md
| 253| Of•course,•IIFE's•don't•need•names,•necessarily•--•the•most•common•form•of•IIFE•is•to•use•an•anonymous•function•expression.•While•certainly•less•common,•naming•an•IIFE•has•all•the•aforementioned•benefits•over•anonymous•function•expressions,•so•it's•a•good•practice•to•adopt.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (274 > 79)

scope & closures/ch3.md
| 268| There's•a•slight•variation•on•the•traditional•IIFE•form,•which•some•prefer:•`(function(){•..•}())`.•Look•closely•to•see•the•difference.•In•the•first•form,•the•function•expression•is•wrapped•in•`(•)`,•and•then•the•invoking•`()`•pair•is•on•the•outside•right•after•it.•In•the•second•form,•the•invoking•`()`•pair•is•moved•to•the•inside•of•the•outer•`(•)`•wrapping•pair.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (365 > 79)

scope & closures/ch3.md
| 270| These•two•forms•are•identical•in•functionality.•**It's•purely•a•stylistic•choice•which•you•prefer.**
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (100 > 79)

scope & closures/ch3.md
| 272| Another•variation•on•IIFE's•which•is•quite•common•is•to•use•the•fact•that•they•are,•in•fact,•just•function•calls,•and•pass•in•argument(s).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (138 > 79)

scope & closures/ch3.md
| 290| We•pass•in•the•`window`•object•reference,•but•we•name•the•parameter•`global`,•so•that•we•have•a•clear•stylistic•delineation•for•global•vs.•non-global•references.•Of•course,•you•can•pass•in•anything•from•an•enclosing•scope•you•want,•and•you•can•name•the•parameter(s)•anything•that•suits•you.•This•is•mostly•just•stylistic•choice.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (328 > 79)

scope & closures/ch3.md
| 292| Another•application•of•this•pattern•addresses•the•(minor•niche)•concern•that•the•default•`undefined`•identifier•might•have•its•value•incorrectly•overwritten,•causing•unexpected•results.•By•naming•a•parameter•`undefined`,•but•not•passing•any•value•for•that•argument,•we•can•guarantee•that•the•`undefined`•identifier•is•in•fact•the•undefined•value•in•a•block•of•code:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (365 > 79)

scope & closures/ch3.md
| 307| Still•another•variation•of•the•IIFE•inverts•the•order•of•things,•where•the•function•to•execute•is•given•second,•*after*•the•invocation•and•parameters•to•pass•to•it.•This•pattern•is•used•in•the•UMD•(Universal•Module•Definition)•project.•Some•people•find•it•a•little•cleaner•to•understand,•though•it•is•slightly•more•verbose.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (323 > 79)

scope & closures/ch3.md
| 323| The•`def`•function•expression•is•defined•in•the•second-half•of•the•snippet,•and•then•passed•as•a•parameter•(also•called•`def`)•to•the•`IIFE`•function•defined•in•the•first•half•of•the•snippet.•Finally,•the•parameter•`def`•(the•function)•is•invoked,•passing•`window`•in•as•the•`global`•parameter.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (294 > 79)

scope & closures/ch3.md
| 327| While•functions•are•the•most•common•unit•of•scope,•and•certainly•the•most•wide-spread•of•the•design•approaches•in•the•majority•of•JS•in•circulation,•other•units•of•scope•are•possible,•and•the•usage•of•these•other•scope•units•can•lead•to•even•better,•cleaner•to•maintain•code.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (275 > 79)

scope & closures/ch3.md
| 329| Many•languages•other•than•JavaScript•support•Block•Scope,•and•so•developers•from•those•languages•are•accustomed•to•the•mindset,•whereas•those•who've•primarily•only•worked•in•JavaScript•may•find•the•concept•slightly•foreign.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (223 > 79)

scope & closures/ch3.md
| 331| But•even•if•you've•never•written•a•single•line•of•code•in•block-scoped•fashion,•you•are•still•probably•familiar•with•this•extremely•common•idiom•in•JavaScript:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (159 > 79)

scope & closures/ch3.md
| 339| We•declare•the•variable•`i`•directly•inside•the•for-loop•head,•most•likely•because•our•*intent*•is•to•use•`i`•only•within•the•context•of•that•for-loop,•and•essentially•ignore•the•fact•that•the•variable•actually•scopes•itself•to•the•enclosing•scope•(function•or•global).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (269 > 79)

scope & closures/ch3.md
| 341| That's•what•block-scoping•is•all•about.•Declaring•variables•as•close•as•possible,•as•local•as•possible,•to•where•they•will•be•used.•Another•example:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (148 > 79)

scope & closures/ch3.md
| 353| We•are•using•a•`bar`•variable•only•in•the•context•of•the•if-statement,•so•it•makes•a•kind•of•sense•that•we•would•declare•it•inside•the•if-block.•However,•where•we•declare•variables•is•not•relevant•when•using•`var`,•because•they•will•always•belong•to•the•enclosing•scope.•This•snippet•is•essentially•"fake"•block-scoping,•for•stylistic•reasons,•and•relying•on•self-enforcement•not•to•accidentally•use•`bar`•in•another•place•in•that•scope.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (437 > 79)

scope & closures/ch3.md
| 355| Block•scope•is•a•tool•to•extend•the•earlier•"Principle•of•Least•~~Privilege~~•Exposure"•[^note-leastprivilege]•from•hiding•information•in•functions•to•hiding•information•in•blocks•of•our•code.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (192 > 79)

scope & closures/ch3.md
| 365| Why•pollute•the•entire•scope•of•a•function•with•the•`i`•variable•that•is•only•going•to•be•(or•only•*should•be*,•at•least)•used•for•the•for-loop?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (144 > 79)

scope & closures/ch3.md
| 367| But•more•importantly,•developers•may•prefer•to•*check*•themselves•against•accidentally•(re)using•variables•outside•of•their•intended•purpose,•such•as•being•issued•an•error•about•an•unknown•variable•if•you•try•to•use•it•in•the•wrong•place.•Block-scoping•(if•it•were•possible)•for•the•`i`•variable•would•make•`i`•available•only•for•the•for-loop,•causing•an•error•if•`i`•is•accessed•elsewhere•in•the•function.•This•helps•ensure•variables•are•not•re-used•in•confusing•or•hard-to-maintain•ways.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (489 > 79)

scope & closures/ch3.md
| 369| But,•the•sad•reality•is•that,•on•the•surface,•JavaScript•has•no•facility•for•block•scope.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (89 > 79)

scope & closures/ch3.md
| 375| We•learned•about•`with`•in•Chapter•2.•While•it•is•a•frowned•upon•construct,•it•*is*•an•example•of•(a•form•of)•block•scope,•in•that•the•scope•that•is•created•from•the•object•only•exists•for•the•lifetime•of•that•`with`•statement,•and•not•in•the•enclosing•scope.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (259 > 79)

scope & closures/ch3.md
| 379| It's•a•*very*•little•known•fact•that•JavaScript•in•ES3•specified•the•variable•declaration•in•the•`catch`•clause•of•a•`try/catch`•to•be•block-scoped•to•the•`catch`•block.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (169 > 79)

scope & closures/ch3.md
| 394| As•you•can•see,•`err`•exists•only•in•the•`catch`•clause,•and•throws•an•error•when•you•try•to•reference•it•elsewhere.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (116 > 79)

scope & closures/ch3.md
| 396| **Note:**•While•this•behavior•has•been•specified•and•true•of•practically•all•standard•JS•environments•(except•perhaps•old•IE),•many•linters•seem•to•still•complain•if•you•have•two•or•more•`catch`•clauses•in•the•same•scope•which•each•declare•their•error•variable•with•the•same•identifier•name.•This•is•not•actually•a•re-definition,•since•the•variables•are•safely•block-scoped,•but•the•linters•still•seem•to,•annoyingly,•complain•about•this•fact.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (443 > 79)

scope & closures/ch3.md
| 398| To•avoid•these•unnecessary•warnings,•some•devs•will•name•their•`catch`•variables•`err1`,•`err2`,•etc.•Other•devs•will•simply•turn•off•the•linting•check•for•duplicate•variable•names.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (181 > 79)

scope & closures/ch3.md
| 400| The•block-scoping•nature•of•`catch`•may•seem•like•a•useless•academic•fact,•but•see•Appendix•B•for•more•information•on•just•how•useful•it•might•be.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (146 > 79)

scope & closures/ch3.md
| 404| Thus•far,•we've•seen•that•JavaScript•only•has•some•strange•niche•behaviors•which•expose•block•scope•functionality.•If•that•were•all•we•had,•and•*it•was*•for•many,•many•years,•then•block•scoping•would•not•be•terribly•useful•to•the•JavaScript•developer.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (251 > 79)

scope & closures/ch3.md
| 406| Fortunately,•ES6•changes•that,•and•introduces•a•new•keyword•`let`•which•sits•alongside•`var`•as•another•way•to•declare•variables.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (129 > 79)

scope & closures/ch3.md
| 408| The•`let`•keyword•attaches•the•variable•declaration•to•the•scope•of•whatever•block•(commonly•a•`{•..•}`•pair)•it's•contained•in.•In•other•words,•`let`•implicitly•hijacks•any•block's•scope•for•its•variable•declaration.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (217 > 79)

scope & closures/ch3.md
| 422| Using•`let`•to•attach•a•variable•to•an•existing•block•is•somewhat•implicit.•It•can•confuse•you•if•you're•not•paying•close•attention•to•which•blocks•have•variables•scoped•to•them,•and•are•in•the•habit•of•moving•blocks•around,•wrapping•them•in•other•blocks,•etc.,•as•you•develop•and•evolve•code.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (293 > 79)

scope & closures/ch3.md
| 424| Creating•explicit•blocks•for•block-scoping•can•address•some•of•these•concerns,•making•it•more•obvious•where•variables•are•attached•and•not.•Usually,•explicit•code•is•preferable•over•implicit•or•subtle•code.•This•explicit•block-scoping•style•is•easy•to•achieve,•and•fits•more•naturally•with•how•block-scoping•works•in•other•languages:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (333 > 79)

scope & closures/ch3.md
| 440| We•can•create•an•arbitrary•block•for•`let`•to•bind•to•by•simply•including•a•`{•..•}`•pair•anywhere•a•statement•is•valid•grammar.•In•this•case,•we've•made•an•explicit•block•*inside*•the•if-statement,•which•may•be•easier•as•a•whole•block•to•move•around•later•in•refactoring,•without•affecting•the•position•and•semantics•of•the•enclosing•if-statement.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (348 > 79)

scope & closures/ch3.md
| 444| In•Chapter•4,•we•will•address•hoisting,•which•talks•about•declarations•being•taken•as•existing•for•the•entire•scope•in•which•they•occur.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (136 > 79)

scope & closures/ch3.md
| 446| However,•declarations•made•with•`let`•will•*not*•hoist•to•the•entire•scope•of•the•block•they•appear•in.•Such•declarations•will•not•observably•"exist"•in•the•block•until•the•declaration•statement.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (195 > 79)

scope & closures/ch3.md
| 457| Another•reason•block-scoping•is•useful•relates•to•closures•and•garbage•collection•to•reclaim•memory.•We'll•briefly•illustrate•here,•but•the•closure•mechanism•is•explained•in•detail•in•Chapter•5.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (194 > 79)

scope & closures/ch3.md
| 477| The•`click`•function•click•handler•callback•doesn't•*need*•the•`someReallyBigData`•variable•at•all.•That•means,•theoretically,•after•`process(..)`•runs,•the•big•memory-heavy•data•structure•could•be•garbage•collected.•However,•it's•quite•likely•(though•implementation•dependent)•that•the•JS•engine•will•still•have•to•keep•the•structure•around,•since•the•`click`•function•has•a•closure•over•the•entire•scope.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (406 > 79)

scope & closures/ch3.md
| 479| Block-scoping•can•address•this•concern,•making•it•clearer•to•the•engine•that•it•does•not•need•to•keep•`someReallyBigData`•around:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (129 > 79)

scope & closures/ch3.md
| 500| Declaring•explicit•blocks•for•variables•to•locally•bind•to•is•a•powerful•tool•that•you•can•add•to•your•code•toolbox.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (116 > 79)

scope & closures/ch3.md
| 504| A•particular•case•where•`let`•shines•is•in•the•for-loop•case•as•we•discussed•previously.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (88 > 79)

scope & closures/ch3.md
| 514| Not•only•does•`let`•in•the•for-loop•header•bind•the•`i`•to•the•for-loop•body,•but•in•fact,•it•**re-binds•it**•to•each•*iteration*•of•the•loop,•making•sure•to•re-assign•it•the•value•from•the•end•of•the•previous•loop•iteration.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (225 > 79)

scope & closures/ch3.md
| 516| Here's•another•way•of•illustrating•the•per-iteration•binding•behavior•that•occurs:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (82 > 79)

scope & closures/ch3.md
| 528| The•reason•why•this•per-iteration•binding•is•interesting•will•become•clear•in•Chapter•5•when•we•discuss•closures.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (113 > 79)

scope & closures/ch3.md
| 530| Because•`let`•declarations•attach•to•arbitrary•blocks•rather•than•to•the•enclosing•function's•scope•(or•global),•there•can•be•gotchas•where•existing•code•has•a•hidden•reliance•on•function-scoped•`var`•declarations,•and•replacing•the•`var`•with•`let`•may•require•additional•care•when•refactoring•code.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (300 > 79)

scope & closures/ch3.md
| 578| See•Appendix•B•for•an•alternate•(more•explicit)•style•of•block-scoping•which•may•provide•easier•to•maintain/refactor•code•that's•more•robust•to•these•scenarios.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (160 > 79)

scope & closures/ch3.md
| 582| In•addition•to•`let`,•ES6•introduces•`const`,•which•also•creates•a•block-scoped•variable,•but•whose•value•is•fixed•(constant).•Any•attempt•to•change•that•value•at•a•later•time•results•in•an•error.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (196 > 79)

scope & closures/ch3.md
| 601| Functions•are•the•most•common•unit•of•scope•in•JavaScript.•Variables•and•functions•that•are•declared•inside•another•function•are•essentially•"hidden"•from•any•of•the•enclosing•"scopes",•which•is•an•intentional•design•principle•of•good•software.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (244 > 79)

scope & closures/ch3.md
| 603| But•functions•are•by•no•means•the•only•unit•of•scope.•Block-scope•refers•to•the•idea•that•variables•and•functions•can•belong•to•an•arbitrary•block•(generally,•any•`{•..•}`•pair)•of•code,•rather•than•only•to•the•enclosing•function.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (230 > 79)

scope & closures/ch3.md
| 605| Starting•with•ES3,•the•`try/catch`•structure•has•block-scope•in•the•`catch`•clause.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (83 > 79)

scope & closures/ch3.md
| 607| In•ES6,•the•`let`•keyword•(a•cousin•to•the•`var`•keyword)•is•introduced•to•allow•declarations•of•variables•in•any•arbitrary•block•of•code.•`if•(..)•{•let•a•=•2;•}`•will•declare•a•variable•`a`•that•essentially•hijacks•the•scope•of•the•`if`'s•`{•..•}`•block•and•attaches•itself•there.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (282 > 79)

scope & closures/ch3.md
| 609| Though•some•seem•to•believe•so,•block•scope•should•not•be•taken•as•an•outright•replacement•of•`var`•function•scope.•Both•functionalities•co-exist,•and•developers•can•and•should•use•both•function-scope•and•block-scope•techniques•where•respectively•appropriate•to•produce•better,•more•readable/maintainable•code.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (310 > 79)

scope & closures/ch3.md
| 611| [^note-leastprivilege]:•[Principle•of•Least•Privilege](http://en.wikipedia.org/wiki/Principle_of_least_privilege)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (113 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/async & performance/ch6.md
|    |++++| /app/async & performance/ch6.md
|   1|   1| # You Don't Know JS: Async & Performance
|    |   2|+
|   2|   3| # Chapter 6: Benchmarking & Tuning
|   3|   4| 
|   4|   5| As the first four chapters of this book were all about performance as a coding pattern (asynchrony and concurrency), and Chapter 5 was about performance at the macro program architecture level, this chapter goes after the topic of performance at the micro level, focusing on single expressions/statements.
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/async & performance/ch6.md
|    |++++| /app/async & performance/ch6.md
|  59|  59| 
|  60|  60| Any relevant and reliable benchmark should be based on statistically sound practices. I am not going to write a chapter on statistics here, so I'll hand wave around some terms: standard deviation, variance, margin of error. If you don't know what those terms really mean -- I took a stats class back in college and I'm still a little fuzzy on them -- you are not actually qualified to write your own benchmarking logic.
|  61|  61| 
|  62|    |-Luckily, smart folks like John-David Dalton and Mathias Bynens do understand these concepts, and wrote a statistically sound benchmarking tool called Benchmark.js (http://benchmarkjs.com/). So I can end the suspense by simply saying: "just use that tool."
|  63|    |-
|  64|    |-I won't repeat their whole documentation for how Benchmark.js works; they have fantastic API Docs (http://benchmarkjs.com/docs) you should read. Also there are some great (http://calendar.perfplanet.com/2010/bulletproof-javascript-benchmarks/) writeups (http://monsur.hossa.in/2012/12/11/benchmarkjs.html) on more of the details and methodology.
|    |  62|+Luckily, smart folks like John-David Dalton and Mathias Bynens do understand these concepts, and wrote a statistically sound benchmarking tool called Benchmark.js (<http://benchmarkjs.com/>). So I can end the suspense by simply saying: "just use that tool."
|    |  63|+
|    |  64|+I won't repeat their whole documentation for how Benchmark.js works; they have fantastic API Docs (<http://benchmarkjs.com/docs>) you should read. Also there are some great (<http://calendar.perfplanet.com/2010/bulletproof-javascript-benchmarks/>) writeups (<http://monsur.hossa.in/2012/12/11/benchmarkjs.html>) on more of the details and methodology.
|  65|  65| 
|  66|  66| But just for quick illustration purposes, here's how you could use Benchmark.js to run a quick performance test:
|  67|  67| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/async & performance/ch6.md
|    |++++| /app/async & performance/ch6.md
| 192| 192| 
| 193| 193| If you want to make assertions like "X is faster than Y" in any reasonable sense across more than just a single environment, you're going to need to actually test as many of those real world environments as possible. Just because Chrome executes some X operation faster than Y doesn't mean that all browsers do. And of course you also probably will want to cross-reference the results of multiple browser test runs with the demographics of your users.
| 194| 194| 
| 195|    |-There's an awesome website for this purpose called jsPerf (http://jsperf.com). It uses the Benchmark.js library we talked about earlier to run statistically accurate and reliable tests, and makes the test on an openly available URL that you can pass around to others.
|    | 195|+There's an awesome website for this purpose called jsPerf (<http://jsperf.com>). It uses the Benchmark.js library we talked about earlier to run statistically accurate and reliable tests, and makes the test on an openly available URL that you can pass around to others.
| 196| 196| 
| 197| 197| Each time a test is run, the results are collected and persisted with the test, and the cumulative test results are graphed on the page for anyone to see.
| 198| 198| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/async & performance/ch6.md
|    |++++| /app/async & performance/ch6.md
| 230| 230| 
| 231| 231| Some observations to ponder about this test scenario:
| 232| 232| 
| 233|    |-* It's extremely common for devs to put their own loops into test cases, and they forget that Benchmark.js already does all the repetition you need. There's a really strong chance that the `for` loops in these cases are totally unnecessary noise.
| 234|    |-* The declaring and initializing of `x` is included in each test case, possibly unnecessarily. Recall from earlier that if `x = []` were in the `setup` code, it wouldn't actually be run before each test iteration, but instead once at the beginning of each cycle. That means `x` would continue growing quite large, not just the size `10` implied by the `for` loops.
|    | 233|+- It's extremely common for devs to put their own loops into test cases, and they forget that Benchmark.js already does all the repetition you need. There's a really strong chance that the `for` loops in these cases are totally unnecessary noise.
|    | 234|+- The declaring and initializing of `x` is included in each test case, possibly unnecessarily. Recall from earlier that if `x = []` were in the `setup` code, it wouldn't actually be run before each test iteration, but instead once at the beginning of each cycle. That means `x` would continue growing quite large, not just the size `10` implied by the `for` loops.
| 235| 235| 
| 236| 236|    So is the intent to make sure the tests are constrained only to how the JS engine behaves with very small arrays (size `10`)? That *could* be the intent, but if it is, you have to consider if that's not focusing far too much on nuanced internal implementation details.
| 237| 237| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/async & performance/ch6.md
|    |++++| /app/async & performance/ch6.md
| 237| 237| 
| 238| 238|    On the other hand, does the intent of the test embrace the context that the arrays will actually be growing quite large? Is the JS engines' behavior with larger arrays relevant and accurate when compared with the intended real world usage?
| 239| 239| 
| 240|    |-* Is the intent to find out how much `x.length` or `x.push(..)` add to the performance of the operation to append to the `x` array? OK, that might be a valid thing to test. But then again, `push(..)` is a function call, so of course it's going to be slower than `[..]` access. Arguably, cases 1 and 2 are fairer than case 3.
| 241|    |-
|    | 240|+- Is the intent to find out how much `x.length` or `x.push(..)` add to the performance of the operation to append to the `x` array? OK, that might be a valid thing to test. But then again, `push(..)` is a function call, so of course it's going to be slower than `[..]` access. Arguably, cases 1 and 2 are fairer than case 3.
| 242| 241| 
| 243| 242| Here's another example that illustrates a common apples-to-oranges flaw:
| 244| 243| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/async & performance/ch6.md
|    |++++| /app/async & performance/ch6.md
| 444| 444| 
| 445| 445| If you run performance benchmarks around `x.length` usage compared to caching it in a `len` variable, you'll find that while the theory sounds nice, in practice any measured differences are statistically completely irrelevant.
| 446| 446| 
| 447|    |-In fact, in some engines like v8, it can be shown (http://mrale.ph/blog/2014/12/24/array-length-caching.html) that you could make things slightly worse by pre-caching the length instead of letting the engine figure it out for you. Don't try to outsmart your JavaScript engine, you'll probably lose when it comes to performance optimizations.
|    | 447|+In fact, in some engines like v8, it can be shown (<http://mrale.ph/blog/2014/12/24/array-length-caching.html>) that you could make things slightly worse by pre-caching the length instead of letting the engine figure it out for you. Don't try to outsmart your JavaScript engine, you'll probably lose when it comes to performance optimizations.
| 448| 448| 
| 449| 449| ### Not All Engines Are Alike
| 450| 450| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/async & performance/ch6.md
|    |++++| /app/async & performance/ch6.md
| 454| 454| 
| 455| 455| There's a movement among some in the JS dev community, especially those who work with Node.js, to analyze the specific internal implementation details of the v8 JavaScript engine and make decisions about writing JS code that is tailored to take best advantage of how v8 works. You can actually achieve a surprisingly high degree of performance optimization with such endeavors, so the payoff for the effort can be quite high.
| 456| 456| 
| 457|    |-Some commonly cited examples (https://github.com/petkaantonov/bluebird/wiki/Optimization-killers) for v8:
| 458|    |-
| 459|    |-* Don't pass the `arguments` variable from one function to any other function, as such "leakage" slows down the function implementation.
| 460|    |-* Isolate a `try..catch` in its own function. Browsers struggle with optimizing any function with a `try..catch` in it, so moving that construct to its own function means you contain the de-optimization harm while letting the surrounding code be optimizable.
|    | 457|+Some commonly cited examples (<https://github.com/petkaantonov/bluebird/wiki/Optimization-killers>) for v8:
|    | 458|+
|    | 459|+- Don't pass the `arguments` variable from one function to any other function, as such "leakage" slows down the function implementation.
|    | 460|+- Isolate a `try..catch` in its own function. Browsers struggle with optimizing any function with a `try..catch` in it, so moving that construct to its own function means you contain the de-optimization harm while letting the surrounding code be optimizable.
| 461| 461| 
| 462| 462| But rather than focus on those tips specifically, let's sanity check the v8-only optimization approach in a general sense.
| 463| 463| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/async & performance/ch6.md
|    |++++| /app/async & performance/ch6.md
| 505| 505| 
| 506| 506| > Programmers waste enormous amounts of time thinking about, or worrying about, the speed of **noncritical** parts of their programs, and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are considered. We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. Yet we should not pass up our opportunities in that **critical** 3%. [emphasis added]
| 507| 507| 
| 508|    |-(http://web.archive.org/web/20130731202547/http://pplab.snu.ac.kr/courses/adv_pl05/papers/p261-knuth.pdf, Computing Surveys, Vol 6, No 4, December 1974)
|    | 508|+(<http://web.archive.org/web/20130731202547/http://pplab.snu.ac.kr/courses/adv_pl05/papers/p261-knuth.pdf>, Computing Surveys, Vol 6, No 4, December 1974)
| 509| 509| 
| 510| 510| I believe it's a fair paraphrasing to say that Knuth *meant*: "non-critical path optimization is the root of all evil." So the key is to figure out if your code is on the critical path -- you should optimize it! -- or not.
| 511| 511| 

async & performance/ch6.md
|   4| As•the•first•four•chapters•of•this•book•were•all•about•performance•as•a•coding•pattern•(asynchrony•and•concurrency),•and•Chapter•5•was•about•performance•at•the•macro•program•architecture•level,•this•chapter•goes•after•the•topic•of•performance•at•the•micro•level,•focusing•on•single•expressions/statements.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (305 > 79)

async & performance/ch6.md
|   6| One•of•the•most•common•areas•of•curiosity•--•indeed,•some•developers•can•get•quite•obsessed•about•it•--•is•in•analyzing•and•testing•various•options•for•how•to•write•a•line•or•chunk•of•code,•and•which•one•is•faster.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (214 > 79)

async & performance/ch6.md
|   8| We're•going•to•look•at•some•of•these•issues,•but•it's•important•to•understand•from•the•outset•that•this•chapter•is•**not**•about•feeding•the•obsession•of•micro-performance•tuning,•like•whether•some•given•JS•engine•can•run•`++a`•faster•than•`a++`.•The•more•important•goal•of•this•chapter•is•to•figure•out•what•kinds•of•JS•performance•matter•and•which•ones•don't,•*and•how•to•tell•the•difference*.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (395 > 79)

async & performance/ch6.md
|  10| But•even•before•we•get•there,•we•need•to•explore•how•to•most•accurately•and•reliably•test•JS•performance,•because•there's•tons•of•misconceptions•and•myths•that•have•flooded•our•collective•cult•knowledge•base.•We've•got•to•sift•through•all•that•junk•to•find•some•clarity.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (270 > 79)

async & performance/ch6.md
|  14| OK,•time•to•start•dispelling•some•misconceptions.•I'd•wager•the•vast•majority•of•JS•developers,•if•asked•to•benchmark•the•speed•(execution•time)•of•a•certain•operation,•would•initially•go•about•it•something•like•this:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (217 > 79)

async & performance/ch6.md
|  26| Raise•your•hand•if•that's•roughly•what•came•to•your•mind.•Yep,•I•thought•so.•There's•a•lot•wrong•with•this•approach,•but•don't•feel•bad;•**we've•all•been•there.**
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (162 > 79)

async & performance/ch6.md
|  28| What•did•that•measurement•tell•you,•exactly?•Understanding•what•it•does•and•doesn't•say•about•the•execution•time•of•the•operation•in•question•is•key•to•learning•how•to•appropriately•benchmark•performance•in•JavaScript.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (218 > 79)

async & performance/ch6.md
|  30| If•the•duration•reported•is•`0`,•you•may•be•tempted•to•believe•that•it•took•less•than•a•millisecond.•But•that's•not•very•accurate.•Some•platforms•don't•have•single•millisecond•precision,•but•instead•only•update•the•timer•in•larger•increments.•For•example,•older•versions•of•windows•(and•thus•IE)•had•only•15ms•precision,•which•means•the•operation•has•to•take•at•least•that•long•for•anything•other•than•`0`•to•be•reported!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (421 > 79)

async & performance/ch6.md
|  32| Moreover,•whatever•duration•is•reported,•the•only•thing•you•really•know•is•that•the•operation•took•approximately•that•long•on•that•exact•single•run.•You•have•near-zero•confidence•that•it•will•always•run•at•that•speed.•You•have•no•idea•if•the•engine•or•system•had•some•sort•of•interference•at•that•exact•moment,•and•that•at•other•times•the•operation•could•run•faster.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (366 > 79)

async & performance/ch6.md
|  34| What•if•the•duration•reported•is•`4`?•Are•you•more•sure•it•took•about•four•milliseconds?•Nope.•It•might•have•taken•less•time,•and•there•may•have•been•some•other•delay•in•getting•either•`start`•or•`end`•timestamps.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (213 > 79)

async & performance/ch6.md
|  36| More•troublingly,•you•also•don't•know•that•the•circumstances•of•this•operation•test•aren't•overly•optimistic.•It's•possible•that•the•JS•engine•figured•out•a•way•to•optimize•your•isolated•test•case,•but•in•a•more•real•program•such•optimization•would•be•diluted•or•impossible,•such•that•the•operation•would•run•slower•than•your•test.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (331 > 79)

async & performance/ch6.md
|  38| So...•what•do•we•know?•Unfortunately,•with•those•realizations•stated,•**we•know•very•little.**•Something•of•such•low•confidence•isn't•even•remotely•good•enough•to•build•your•determinations•on.•Your•"benchmark"•is•basically•useless.•And•worse,•it's•dangerous•in•that•it•implies•false•confidence,•not•just•to•you•but•also•to•others•who•don't•think•critically•about•the•conditions•that•led•to•those•results.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (404 > 79)

async & performance/ch6.md
|  42| "OK,"•you•now•say,•"Just•put•a•loop•around•it•so•the•whole•test•takes•longer."•If•you•repeat•an•operation•100•times,•and•that•whole•loop•reportedly•takes•a•total•of•137ms,•then•you•can•just•divide•by•100•and•get•an•average•duration•of•1.37ms•for•each•operation,•right?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (268 > 79)

async & performance/ch6.md
|  46| A•straight•mathematical•average•by•itself•is•definitely•not•sufficient•for•making•judgments•about•performance•which•you•plan•to•extrapolate•to•the•breadth•of•your•entire•application.•With•a•hundred•iterations,•even•a•couple•of•outliers•(high•or•low)•can•skew•the•average,•and•then•when•you•apply•that•conclusion•repeatedly,•you•even•further•inflate•the•skew•beyond•credulity.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (375 > 79)

async & performance/ch6.md
|  48| Instead•of•just•running•for•a•fixed•number•of•iterations,•you•can•instead•choose•to•run•the•loop•of•tests•until•a•certain•amount•of•time•has•passed.•That•might•be•more•reliable,•but•how•do•you•decide•how•long•to•run?•You•might•guess•that•it•should•be•some•multiple•of•how•long•your•operation•should•take•to•run•once.•Wrong.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (323 > 79)

async & performance/ch6.md
|  50| Actually,•the•length•of•time•to•repeat•across•should•be•based•on•the•accuracy•of•the•timer•you're•using,•specifically•to•minimize•the•chances•of•inaccuracy.•The•less•precise•your•timer,•the•longer•you•need•to•run•to•make•sure•you've•minimized•the•error•percentage.•A•15ms•timer•is•pretty•bad•for•accurate•benchmarking;•to•minimize•its•uncertainty•(aka•"error•rate")•to•less•than•1%,•you•need•to•run•your•each•cycle•of•test•iterations•for•750ms.•A•1ms•timer•only•needs•a•cycle•to•run•for•50ms•to•get•the•same•confidence.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (519 > 79)

async & performance/ch6.md
|  52| But•then,•that's•just•a•single•sample.•To•be•sure•you're•factoring•out•the•skew,•you'll•want•lots•of•samples•to•average•across.•You'll•also•want•to•understand•something•about•just•how•slow•the•worst•sample•is,•how•fast•the•best•sample•is,•how•far•apart•those•best•and•worse•cases•were,•and•so•on.•You'll•want•to•know•not•just•a•number•that•tells•you•how•fast•something•ran,•but•also•to•have•some•quantifiable•measure•of•how•trustable•that•number•is.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (449 > 79)

async & performance/ch6.md
|  54| Also,•you•probably•want•to•combine•these•different•techniques•(as•well•as•others),•so•that•you•get•the•best•balance•of•all•the•possible•approaches.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (147 > 79)

async & performance/ch6.md
|  56| That's•all•bare•minimum•just•to•get•started.•If•you've•been•approaching•performance•benchmarking•with•anything•less•serious•than•what•I•just•glossed•over,•well...•"you•don't•know:•proper•benchmarking."
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (201 > 79)

async & performance/ch6.md
|  60| Any•relevant•and•reliable•benchmark•should•be•based•on•statistically•sound•practices.•I•am•not•going•to•write•a•chapter•on•statistics•here,•so•I'll•hand•wave•around•some•terms:•standard•deviation,•variance,•margin•of•error.•If•you•don't•know•what•those•terms•really•mean•--•I•took•a•stats•class•back•in•college•and•I'm•still•a•little•fuzzy•on•them•--•you•are•not•actually•qualified•to•write•your•own•benchmarking•logic.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (419 > 79)

async & performance/ch6.md
|  62| Luckily,•smart•folks•like•John-David•Dalton•and•Mathias•Bynens•do•understand•these•concepts,•and•wrote•a•statistically•sound•benchmarking•tool•called•Benchmark.js•(http://benchmarkjs.com/).•So•I•can•end•the•suspense•by•simply•saying:•"just•use•that•tool."
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (255 > 79)

async & performance/ch6.md
|  64| I•won't•repeat•their•whole•documentation•for•how•Benchmark.js•works;•they•have•fantastic•API•Docs•(http://benchmarkjs.com/docs)•you•should•read.•Also•there•are•some•great•(http://calendar.perfplanet.com/2010/bulletproof-javascript-benchmarks/)•writeups•(http://monsur.hossa.in/2012/12/11/benchmarkjs.html)•on•more•of•the•details•and•methodology.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (345 > 79)

async & performance/ch6.md
|  66| But•just•for•quick•illustration•purposes,•here's•how•you•could•use•Benchmark.js•to•run•a•quick•performance•test:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (112 > 79)

async & performance/ch6.md
|  87| There's•*lots*•more•to•learn•about•using•Benchmark.js•besides•this•glance•I'm•including•here.•But•the•point•is•that•it's•handling•all•of•the•complexities•of•setting•up•a•fair,•reliable,•and•valid•performance•benchmark•for•a•given•piece•of•JavaScript•code.•If•you're•going•to•try•to•test•and•benchmark•your•code,•this•library•is•the•first•place•you•should•turn.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (360 > 79)

async & performance/ch6.md
|  89| We're•showing•here•the•usage•to•test•a•single•operation•like•X,•but•it's•fairly•common•that•you•want•to•compare•X•to•Y.•This•is•easy•to•do•by•simply•setting•up•two•different•tests•in•a•"Suite"•(a•Benchmark.js•organizational•feature).•Then,•you•run•them•head-to-head,•and•compare•the•statistics•to•conclude•whether•X•or•Y•was•faster.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (332 > 79)

async & performance/ch6.md
|  91| Benchmark.js•can•of•course•be•used•to•test•JavaScript•in•a•browser•(see•the•"jsPerf.com"•section•later•in•this•chapter),•but•it•can•also•run•in•non-browser•environments•(Node.js,•etc.).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (185 > 79)

async & performance/ch6.md
|  93| One•largely•untapped•potential•use-case•for•Benchmark.js•is•to•use•it•in•your•Dev•or•QA•environments•to•run•automated•performance•regression•tests•against•critical•path•parts•of•your•application's•JavaScript.•Similar•to•how•you•might•run•unit•test•suites•before•deployment,•you•can•also•compare•the•performance•against•previous•benchmarks•to•monitor•if•you•are•improving•or•degrading•application•performance.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (408 > 79)

async & performance/ch6.md
|  97| In•the•previous•code•snippet,•we•glossed•over•the•"extra•options"•`{•..•}`•object.•But•there•are•two•options•we•should•discuss:•`setup`•and•`teardown`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (151 > 79)

async & performance/ch6.md
|  99| These•two•options•let•you•define•functions•to•be•called•before•and•after•your•test•case•runs.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (93 > 79)

async & performance/ch6.md
| 101| It's•incredibly•important•to•understand•that•your•`setup`•and•`teardown`•code•**does•not•run•for•each•test•iteration**.•The•best•way•to•think•about•it•is•that•there's•an•outer•loop•(repeating•cycles),•and•an•inner•loop•(repeating•test•iterations).•`setup`•and•`teardown`•are•run•at•the•beginning•and•end•of•each•*outer*•loop•(aka•cycle)•iteration,•but•not•inside•the•inner•loop.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (378 > 79)

async & performance/ch6.md
| 116| Your•temptation•is•probably•to•believe•that•`a`•is•starting•out•as•`"x"`•for•each•test•iteration.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (97 > 79)

async & performance/ch6.md
| 118| But•it's•not!•It's•starting•`a`•at•`"x"`•for•each•test•cycle,•and•then•your•repeated•`+•"w"`•concatenations•will•be•making•a•larger•and•larger•`a`•value,•even•though•you're•only•ever•accessing•the•character•`"w"`•at•the•`1`•position.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (233 > 79)

async & performance/ch6.md
| 120| Where•this•most•commonly•bites•you•is•when•you•make•side•effect•changes•to•something•like•the•DOM,•like•appending•a•child•element.•You•may•think•your•parent•element•is•set•as•empty•each•time,•but•it's•actually•getting•lots•of•elements•added,•and•that•can•significantly•sway•the•results•of•your•tests.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (300 > 79)

async & performance/ch6.md
| 124| Don't•forget•to•check•the•context•of•a•particular•performance•benchmark,•especially•a•comparison•between•X•and•Y•tasks.•Just•because•your•test•reveals•that•X•is•faster•than•Y•doesn't•mean•that•the•conclusion•"X•is•faster•than•Y"•is•actually•relevant.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (250 > 79)

async & performance/ch6.md
| 126| For•example,•let's•say•a•performance•test•reveals•that•X•runs•10,000,000•operations•per•second,•and•Y•runs•at•8,000,000•operations•per•second.•You•could•claim•that•Y•is•20%•slower•than•X,•and•you'd•be•mathematically•correct,•but•your•assertion•doesn't•hold•as•much•water•as•you'd•think.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (286 > 79)

async & performance/ch6.md
| 128| Let's•think•about•the•results•more•critically:•10,000,000•operations•per•second•is•10,000•operations•per•millisecond,•and•10•operations•per•microsecond.•In•other•words,•a•single•operation•takes•0.1•microseconds,•or•100•nanoseconds.•It's•hard•to•fathom•just•how•small•100ns•is,•but•for•comparison,•it's•often•cited•that•the•human•eye•isn't•generally•capable•of•distinguishing•anything•less•than•100ms,•which•is•one•million•times•slower•than•the•100ns•speed•of•the•X•operation.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (475 > 79)

async & performance/ch6.md
| 130| Even•recent•scientific•studies•showing•that•maybe•the•brain•can•process•as•quick•as•13ms•(about•8x•faster•than•previously•asserted)•would•mean•that•X•is•still•running•125,000•times•faster•than•the•human•brain•can•perceive•a•distinct•thing•happening.•**X•is•going•really,•really•fast.**
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (285 > 79)

async & performance/ch6.md
| 132| But•more•importantly,•let's•talk•about•the•difference•between•X•and•Y,•the•2,000,000•operations•per•second•difference.•If•X•takes•100ns,•and•Y•takes•80ns,•the•difference•is•20ns,•which•in•the•best•case•is•still•one•650-thousandth•of•the•interval•the•human•brain•can•perceive.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (275 > 79)

async & performance/ch6.md
| 136| But•wait,•what•if•this•operation•is•going•to•happen•a•whole•bunch•of•times•in•a•row?•Then•the•difference•could•add•up,•right?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (125 > 79)

async & performance/ch6.md
| 138| OK,•so•what•we're•asking•then•is,•how•likely•is•it•that•operation•X•is•going•to•be•run•over•and•over•again,•one•right•after•the•other,•and•that•this•has•to•happen•650,000•times•just•to•get•a•sliver•of•a•hope•the•human•brain•could•perceive•it.•More•likely,•it'd•have•to•happen•5,000,000•to•10,000,000•times•together•in•a•tight•loop•to•even•approach•relevance.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (358 > 79)

async & performance/ch6.md
| 140| While•the•computer•scientist•in•you•might•protest•that•this•is•possible,•the•louder•voice•of•realism•in•you•should•sanity•check•just•how•likely•or•unlikely•that•really•is.•Even•if•it•is•relevant•in•rare•occasions,•it's•irrelevant•in•most•situations.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (249 > 79)

async & performance/ch6.md
| 142| The•vast•majority•of•your•benchmark•results•on•tiny•operations•--•like•the•`++x`•vs•`x++`•myth•--•**are•just•totally•bogus**•for•supporting•the•conclusion•that•X•should•be•favored•over•Y•on•a•performance•basis.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (210 > 79)

async & performance/ch6.md
| 146| You•simply•cannot•reliably•extrapolate•that•if•X•was•10•microseconds•faster•than•Y•in•your•isolated•test,•that•means•X•is•always•faster•than•Y•and•should•always•be•used.•That's•not•how•performance•works.•It's•vastly•more•complicated.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (233 > 79)

async & performance/ch6.md
| 148| For•example,•let's•imagine•(purely•hypothetical)•that•you•test•some•microperformance•behavior•such•as•comparing:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (112 > 79)

async & performance/ch6.md
| 163| If•you•understand•what•`parseInt(..)`•does•compared•to•`Number(..)`,•you•might•intuit•that•`parseInt(..)`•potentially•has•"more•work"•to•do,•especially•in•the•`foo`•case.•Or•you•might•intuit•that•they•should•have•the•same•amount•of•work•to•do•in•the•`foo`•case,•as•both•should•be•able•to•stop•at•the•first•character•`"f"`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (322 > 79)

async & performance/ch6.md
| 165| Which•intuition•is•correct?•I•honestly•don't•know.•But•I'll•make•the•case•it•doesn't•matter•what•your•intuition•is.•What•might•the•results•be•when•you•test•it?•Again,•I'm•making•up•a•pure•hypothetical•here,•I•haven't•actually•tried,•nor•do•I•care.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (247 > 79)

async & performance/ch6.md
| 167| Let's•pretend•the•test•comes•back•that•`X`•and•`Y`•are•statistically•identical.•Have•you•then•confirmed•your•intuition•about•the•`"f"`•character•thing?•Nope.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (157 > 79)

async & performance/ch6.md
| 169| It's•possible•in•our•hypothetical•that•the•engine•might•recognize•that•the•variables•`twelve`•and•`foo`•are•only•being•used•in•one•place•in•each•test,•and•so•it•might•decide•to•inline•those•values.•Then•it•may•realize•that•`Number(•"12"•)`•can•just•be•replaced•by•`12`.•And•maybe•it•comes•to•the•same•conclusion•with•`parseInt(..)`,•or•maybe•not.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (346 > 79)

async & performance/ch6.md
| 171| Or•an•engine's•dead-code•removal•heuristic•could•kick•in,•and•it•could•realize•that•variables•`X`•and•`Y`•aren't•being•used,•so•declaring•them•is•irrelevant,•so•it•doesn't•end•up•doing•anything•at•all•in•either•test.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (216 > 79)

async & performance/ch6.md
| 173| And•all•that's•just•made•with•the•mindset•of•assumptions•about•a•single•test•run.•Modern•engines•are•fantastically•more•complicated•than•what•we're•intuiting•here.•They•do•all•sorts•of•tricks,•like•tracing•and•tracking•how•a•piece•of•code•behaves•over•a•short•period•of•time,•or•with•a•particularly•constrained•set•of•inputs.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (325 > 79)

async & performance/ch6.md
| 175| What•if•the•engine•optimizes•a•certain•way•because•of•the•fixed•input,•but•in•your•real•program•you•give•more•varied•input•and•the•optimization•decisions•shake•out•differently•(or•not•at•all!)?•Or•what•if•the•engine•kicks•in•optimizations•because•it•sees•the•code•being•run•tens•of•thousands•of•times•by•the•benchmarking•utility,•but•in•your•real•program•it•will•only•run•a•hundred•times•in•near•proximity,•and•under•those•conditions•the•engine•determines•the•optimizations•are•not•worth•it?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (491 > 79)

async & performance/ch6.md
| 177| And•all•those•optimizations•we•just•hypothesized•about•might•happen•in•our•constrained•test•but•maybe•the•engine•wouldn't•do•them•in•a•more•complex•program•(for•various•reasons).•Or•it•could•be•reversed•--•the•engine•might•not•optimize•such•trivial•code•but•may•be•more•inclined•to•optimize•it•more•aggressively•when•the•system•is•already•more•taxed•by•a•more•sophisticated•program.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (382 > 79)

async & performance/ch6.md
| 179| The•point•I'm•trying•to•make•is•that•you•really•don't•know•for•sure•exactly•what's•going•on•under•the•covers.•All•the•guesses•and•hypothesis•you•can•muster•don't•amount•to•hardly•anything•concrete•for•really•making•such•decisions.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (230 > 79)

async & performance/ch6.md
| 183| What•this•boils•down•to•is•that•testing•*not•real*•code•gives•you•*not•real*•results.•In•so•much•as•is•possible•and•practical,•you•should•test•actual•real,•non-trivial•snippets•of•your•code,•and•under•as•best•of•real•conditions•as•you•can•actually•hope•to.•Only•then•will•the•results•you•get•have•a•chance•to•approximate•reality.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (329 > 79)

async & performance/ch6.md
| 185| Microbenchmarks•like•`++x`•vs•`x++`•are•so•incredibly•likely•to•be•bogus,•we•might•as•well•just•flatly•assume•them•as•such.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (123 > 79)

async & performance/ch6.md
| 189| While•Benchmark.js•is•useful•for•testing•the•performance•of•your•code•in•whatever•JS•environment•you're•running,•it•cannot•be•stressed•enough•that•you•need•to•compile•test•results•from•lots•of•different•environments•(desktop•browsers,•mobile•devices,•etc.)•if•you•want•to•have•any•hope•of•reliable•test•conclusions.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (315 > 79)

async & performance/ch6.md
| 191| For•example,•Chrome•on•a•high-end•desktop•machine•is•not•likely•to•perform•anywhere•near•the•same•as•Chrome•mobile•on•a•smartphone.•And•a•smartphone•with•a•full•battery•charge•is•not•likely•to•perform•anywhere•near•the•same•as•a•smartphone•with•2%•battery•life•left,•when•the•device•is•starting•to•power•down•the•radio•and•processor.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (333 > 79)

async & performance/ch6.md
| 193| If•you•want•to•make•assertions•like•"X•is•faster•than•Y"•in•any•reasonable•sense•across•more•than•just•a•single•environment,•you're•going•to•need•to•actually•test•as•many•of•those•real•world•environments•as•possible.•Just•because•Chrome•executes•some•X•operation•faster•than•Y•doesn't•mean•that•all•browsers•do.•And•of•course•you•also•probably•will•want•to•cross-reference•the•results•of•multiple•browser•test•runs•with•the•demographics•of•your•users.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (451 > 79)

async & performance/ch6.md
| 195| There's•an•awesome•website•for•this•purpose•called•jsPerf•(http://jsperf.com).•It•uses•the•Benchmark.js•library•we•talked•about•earlier•to•run•statistically•accurate•and•reliable•tests,•and•makes•the•test•on•an•openly•available•URL•that•you•can•pass•around•to•others.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (267 > 79)

async & performance/ch6.md
| 197| Each•time•a•test•is•run,•the•results•are•collected•and•persisted•with•the•test,•and•the•cumulative•test•results•are•graphed•on•the•page•for•anyone•to•see.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (154 > 79)

async & performance/ch6.md
| 199| When•creating•a•test•on•the•site,•you•start•out•with•two•test•cases•to•fill•in,•but•you•can•add•as•many•as•you•need.•You•also•have•the•ability•to•set•up•`setup`•code•that•is•run•at•the•beginning•of•each•test•cycle•and•`teardown`•code•run•at•the•end•of•each•cycle.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (263 > 79)

async & performance/ch6.md
| 201| **Note:**•A•trick•for•doing•just•one•test•case•(if•you're•benchmarking•a•single•approach•instead•of•a•head-to-head)•is•to•fill•in•the•second•test•input•boxes•with•placeholder•text•on•first•creation,•then•edit•the•test•and•leave•the•second•test•blank,•which•will•delete•it.•You•can•always•add•more•test•cases•later.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (314 > 79)

async & performance/ch6.md
| 203| You•can•define•the•initial•page•setup•(importing•libraries,•defining•utility•helper•functions,•declaring•variables,•etc.).•There•are•also•options•for•defining•setup•and•teardown•behavior•if•needed•--•consult•the•"Setup/Teardown"•section•in•the•Benchmark.js•discussion•earlier.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (276 > 79)

async & performance/ch6.md
| 207| jsPerf•is•a•fantastic•resource,•but•there's•an•awful•lot•of•tests•published•that•when•you•analyze•them•are•quite•flawed•or•bogus,•for•any•of•a•variety•of•reasons•as•outlined•so•far•in•this•chapter.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (197 > 79)

async & performance/ch6.md
| 233| *•It's•extremely•common•for•devs•to•put•their•own•loops•into•test•cases,•and•they•forget•that•Benchmark.js•already•does•all•the•repetition•you•need.•There's•a•really•strong•chance•that•the•`for`•loops•in•these•cases•are•totally•unnecessary•noise.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (246 > 79)

async & performance/ch6.md
| 234| *•The•declaring•and•initializing•of•`x`•is•included•in•each•test•case,•possibly•unnecessarily.•Recall•from•earlier•that•if•`x•=•[]`•were•in•the•`setup`•code,•it•wouldn't•actually•be•run•before•each•test•iteration,•but•instead•once•at•the•beginning•of•each•cycle.•That•means•`x`•would•continue•growing•quite•large,•not•just•the•size•`10`•implied•by•the•`for`•loops.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (364 > 79)

async & performance/ch6.md
| 236| •••So•is•the•intent•to•make•sure•the•tests•are•constrained•only•to•how•the•JS•engine•behaves•with•very•small•arrays•(size•`10`)?•That•*could*•be•the•intent,•but•if•it•is,•you•have•to•consider•if•that's•not•focusing•far•too•much•on•nuanced•internal•implementation•details.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (271 > 79)

async & performance/ch6.md
| 238| •••On•the•other•hand,•does•the•intent•of•the•test•embrace•the•context•that•the•arrays•will•actually•be•growing•quite•large?•Is•the•JS•engines'•behavior•with•larger•arrays•relevant•and•accurate•when•compared•with•the•intended•real•world•usage?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (242 > 79)

async & performance/ch6.md
| 240| *•Is•the•intent•to•find•out•how•much•`x.length`•or•`x.push(..)`•add•to•the•performance•of•the•operation•to•append•to•the•`x`•array?•OK,•that•might•be•a•valid•thing•to•test.•But•then•again,•`push(..)`•is•a•function•call,•so•of•course•it's•going•to•be•slower•than•`[..]`•access.•Arguably,•cases•1•and•2•are•fairer•than•case•3.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (324 > 79)

async & performance/ch6.md
| 259| Here,•the•obvious•intent•is•to•find•out•how•much•slower•the•custom•`mySort(..)`•comparator•is•than•the•built-in•default•comparator.•But•by•specifying•the•function•`mySort(..)`•as•inline•function•expression,•you've•created•an•unfair/bogus•test.•Here,•the•second•case•is•not•only•testing•a•custom•user•JS•function,•**but•it's•also•testing•creating•a•new•function•expression•for•each•iteration.**
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (393 > 79)

async & performance/ch6.md
| 261| Would•it•surprise•you•to•find•out•that•if•you•run•a•similar•test•but•update•it•to•isolate•only•for•creating•an•inline•function•expression•versus•using•a•pre-declared•function,•the•inline•function•expression•creation•can•be•from•2%•to•20%•slower!?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (246 > 79)

async & performance/ch6.md
| 263| Unless•your•intent•with•this•test•*is*•to•consider•the•inline•function•expression•creation•"cost,"•a•better/fairer•test•would•put•`mySort(..)`'s•declaration•in•the•page•setup•--•don't•put•it•in•the•test•`setup`•as•that's•unnecessary•redeclaration•for•each•cycle•--•and•simply•reference•it•by•name•in•the•test•case:•`x.sort(mySort)`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (332 > 79)

async & performance/ch6.md
| 265| Building•on•the•previous•example,•another•pitfall•is•in•opaquely•avoiding•or•adding•"extra•work"•to•one•test•case•that•creates•an•apples-to-oranges•scenario:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (157 > 79)

async & performance/ch6.md
| 279| Setting•aside•the•previously•mentioned•inline•function•expression•pitfall,•the•second•case's•`mySort(..)`•works•in•this•case•because•you•have•provided•it•numbers,•but•would•have•of•course•failed•with•strings.•The•first•case•doesn't•throw•an•error,•but•it•actually•behaves•differently•and•has•a•different•outcome!•It•should•be•obvious,•but:•**a•different•outcome•between•two•test•cases•almost•certainly•invalidates•the•entire•test!**
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (432 > 79)

async & performance/ch6.md
| 281| But•beyond•the•different•outcomes,•in•this•case,•the•built•in•`sort(..)`'s•comparator•is•actually•doing•"extra•work"•that•`mySort()`•does•not,•in•that•the•built-in•one•coerces•the•compared•values•to•strings•and•does•lexicographic•comparison.•The•first•snippet•results•in•`[-14,•0,•0,•12,•18,•2.9,•3]`•while•the•second•snippet•results•(likely•more•accurately•based•on•intent)•in•`[-14,•0,•0,•2.9,•3,•12,•18]`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (408 > 79)

async & performance/ch6.md
| 283| So•that•test•is•unfair•because•it's•not•actually•doing•the•same•task•between•the•cases.•Any•results•you•get•are•bogus.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (118 > 79)

async & performance/ch6.md
| 297| Here,•the•intent•might•be•to•test•the•performance•impact•of•the•coercion•to•a•Boolean•that•the•`?•:`•operator•will•do•if•the•`x`•expression•is•not•already•a•Boolean•(see•the•*Types•&•Grammar*•title•of•this•book•series).•So,•you're•apparently•OK•with•the•fact•that•there•is•extra•work•to•do•the•coercion•in•the•second•case.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (322 > 79)

async & performance/ch6.md
| 299| The•subtle•problem?•You're•setting•`x`'s•value•in•the•first•case•and•not•setting•it•in•the•other,•so•you're•actually•doing•work•in•the•first•case•that•you're•not•doing•in•the•second.•To•eliminate•any•potential•(albeit•minor)•skew,•try:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (235 > 79)

async & performance/ch6.md
| 311| Now•there's•an•assignment•in•both•cases,•so•the•thing•you•want•to•test•--•the•coercion•of•`x`•or•not•--•has•likely•been•more•accurately•isolated•and•tested.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (156 > 79)

async & performance/ch6.md
| 317| Good•test•authoring•requires•careful•analytical•thinking•about•what•differences•exist•between•two•test•cases•and•whether•the•differences•between•them•are•*intentional*•or•*unintentional*.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (187 > 79)

async & performance/ch6.md
| 319| Intentional•differences•are•of•course•normal•and•OK,•but•it's•too•easy•to•create•unintentional•differences•that•skew•your•results.•You•have•to•be•really,•really•careful•to•avoid•that•skew.•Moreover,•you•may•intend•a•difference•but•it•may•not•be•obvious•to•other•readers•of•your•test•what•your•intent•was,•so•they•may•doubt•(or•trust!)•your•test•incorrectly.•How•do•you•fix•that?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (378 > 79)

async & performance/ch6.md
| 321| **Write•better,•clearer•tests.**•But•also,•take•the•time•to•document•(using•the•jsPerf.com•"Description"•field•and/or•code•comments)•exactly•what•the•intent•of•your•test•is,•even•to•the•nuanced•detail.•Call•out•the•intentional•differences,•which•will•help•others•and•your•future•self•to•better•identify•unintentional•differences•that•could•be•skewing•the•test•results.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (368 > 79)

async & performance/ch6.md
| 323| Isolate•things•which•aren't•relevant•to•your•test•by•pre-declaring•them•in•the•page•or•test•setup•settings•so•they're•outside•the•timed•parts•of•the•test.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (154 > 79)

async & performance/ch6.md
| 325| Instead•of•trying•to•narrow•in•on•a•tiny•snippet•of•your•real•code•and•benchmarking•just•that•piece•out•of•context,•tests•and•benchmarks•are•better•when•they•include•a•larger•(while•still•relevant)•context.•Those•tests•also•tend•to•run•slower,•which•means•any•differences•you•spot•are•more•relevant•in•context.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (310 > 79)

async & performance/ch6.md
| 329| OK,•until•now•we've•been•dancing•around•various•microperformance•issues•and•generally•looking•disfavorably•upon•obsessing•about•them.•I•want•to•take•just•a•moment•to•address•them•directly.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (188 > 79)

async & performance/ch6.md
| 331| The•first•thing•you•need•to•get•more•comfortable•with•when•thinking•about•performance•benchmarking•your•code•is•that•the•code•you•write•is•not•always•the•code•the•engine•actually•runs.•We•briefly•looked•at•that•topic•back•in•Chapter•1•when•we•discussed•statement•reordering•by•the•compiler,•but•here•we're•going•to•suggest•the•compiler•can•sometimes•decide•to•run•different•code•than•you•wrote,•not•just•in•different•orders•but•different•in•substance.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (451 > 79)

async & performance/ch6.md
| 348| You•may•think•about•the•`foo`•reference•in•the•innermost•function•as•needing•to•do•a•three-level•scope•lookup.•We•covered•in•the•*Scope•&•Closures*•title•of•this•book•series•how•lexical•scope•works,•and•the•fact•that•the•compiler•generally•caches•such•lookups•so•that•referencing•`foo`•from•different•scopes•doesn't•really•practically•"cost"•anything•extra.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (357 > 79)

async & performance/ch6.md
| 350| But•there's•something•deeper•to•consider.•What•if•the•compiler•realizes•that•`foo`•isn't•referenced•anywhere•else•but•that•one•location,•and•it•further•notices•that•the•value•never•is•anything•except•the•`41`•as•shown?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (218 > 79)

async & performance/ch6.md
| 352| Isn't•it•quite•possible•and•acceptable•that•the•JS•compiler•could•decide•to•just•remove•the•`foo`•variable•entirely,•and•*inline*•the•value,•such•as•this:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (154 > 79)

async & performance/ch6.md
| 365| **Note:**•Of•course,•the•compiler•could•probably•also•do•a•similar•analysis•and•rewrite•with•the•`baz`•variable•here,•too.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (122 > 79)

async & performance/ch6.md
| 367| When•you•begin•to•think•about•your•JS•code•as•being•a•hint•or•suggestion•to•the•engine•of•what•to•do,•rather•than•a•literal•requirement,•you•realize•that•a•lot•of•the•obsession•over•discrete•syntactic•minutia•is•most•likely•unfounded.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (234 > 79)

async & performance/ch6.md
| 380| Ah,•the•good•ol'•fashioned•"factorial"•algorithm!•You•might•assume•that•the•JS•engine•will•run•that•code•mostly•as•is.•And•to•be•honest,•it•might•--•I'm•not•really•sure.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (169 > 79)

async & performance/ch6.md
| 382| But•as•an•anecdote,•the•same•code•expressed•in•C•and•compiled•with•advanced•optimizations•would•result•in•the•compiler•realizing•that•the•call•`factorial(5)`•can•just•be•replaced•with•the•constant•value•`120`,•eliminating•the•function•and•call•entirely!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (253 > 79)

async & performance/ch6.md
| 384| Moreover,•some•engines•have•a•practice•called•"unrolling•recursion,"•where•it•can•realize•that•the•recursion•you've•expressed•can•actually•be•done•"easier"•(i.e.,•more•optimally)•with•a•loop.•It's•possible•the•preceding•code•could•be•*rewritten*•by•a•JS•engine•to•run•as:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (271 > 79)

async & performance/ch6.md
| 400| Now,•let's•imagine•that•in•the•earlier•snippet•you•had•been•worried•about•whether•`n•*•factorial(n-1)`•or•`n•*=•factorial(--n)`•runs•faster.•Maybe•you•even•did•a•performance•benchmark•to•try•to•figure•out•which•was•better.•But•you•miss•the•fact•that•in•the•bigger•context,•the•engine•may•not•run•either•line•of•code•because•it•may•unroll•the•recursion!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (352 > 79)

async & performance/ch6.md
| 402| Speaking•of•`--`,•`--n`•versus•`n--`•is•often•cited•as•one•of•those•places•where•you•can•optimize•by•choosing•the•`--n`•version,•because•theoretically•it•requires•less•effort•down•at•the•assembly•level•of•processing.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (216 > 79)

async & performance/ch6.md
| 404| That•sort•of•obsession•is•basically•nonsense•in•modern•JavaScript.•That's•the•kind•of•thing•you•should•be•letting•the•engine•take•care•of.•You•should•write•the•code•that•makes•the•most•sense.•Compare•these•three•`for`•loops:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (224 > 79)

async & performance/ch6.md
| 423| Even•if•you•have•some•theory•where•the•second•or•third•option•is•more•performant•than•the•first•option•by•a•tiny•bit,•which•is•dubious•at•best,•the•third•loop•is•more•confusing•because•you•have•to•start•with•`-1`•for•`i`•to•account•for•the•fact•that•`++i`•pre-increment•is•used.•And•the•difference•between•the•first•and•second•options•is•really•quite•irrelevant.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (362 > 79)

async & performance/ch6.md
| 425| It's•entirely•possible•that•a•JS•engine•may•see•a•place•where•`i++`•is•used•and•realize•that•it•can•safely•replace•it•with•the•`++i`•equivalent,•which•means•your•time•spent•deciding•which•one•to•pick•was•completely•wasted•and•the•outcome•moot.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (243 > 79)

async & performance/ch6.md
| 443| The•theory•here•goes•that•you•should•cache•the•length•of•the•`x`•array•in•the•variable•`len`,•because•ostensibly•it•doesn't•change,•to•avoid•paying•the•price•of•`x.length`•being•consulted•for•each•iteration•of•the•loop.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (219 > 79)

async & performance/ch6.md
| 445| If•you•run•performance•benchmarks•around•`x.length`•usage•compared•to•caching•it•in•a•`len`•variable,•you'll•find•that•while•the•theory•sounds•nice,•in•practice•any•measured•differences•are•statistically•completely•irrelevant.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (226 > 79)

async & performance/ch6.md
| 447| In•fact,•in•some•engines•like•v8,•it•can•be•shown•(http://mrale.ph/blog/2014/12/24/array-length-caching.html)•that•you•could•make•things•slightly•worse•by•pre-caching•the•length•instead•of•letting•the•engine•figure•it•out•for•you.•Don't•try•to•outsmart•your•JavaScript•engine,•you'll•probably•lose•when•it•comes•to•performance•optimizations.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (341 > 79)

async & performance/ch6.md
| 451| The•different•JS•engines•in•various•browsers•can•all•be•"spec•compliant"•while•having•radically•different•ways•of•handling•code.•The•JS•specification•doesn't•require•anything•performance•related•--•well,•except•ES6's•"Tail•Call•Optimization"•covered•later•in•this•chapter.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (272 > 79)

async & performance/ch6.md
| 453| The•engines•are•free•to•decide•that•one•operation•will•receive•its•attention•to•optimize,•perhaps•trading•off•for•lesser•performance•on•another•operation.•It•can•be•very•tenuous•to•find•an•approach•for•an•operation•that•always•runs•faster•in•all•browsers.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (255 > 79)

async & performance/ch6.md
| 455| There's•a•movement•among•some•in•the•JS•dev•community,•especially•those•who•work•with•Node.js,•to•analyze•the•specific•internal•implementation•details•of•the•v8•JavaScript•engine•and•make•decisions•about•writing•JS•code•that•is•tailored•to•take•best•advantage•of•how•v8•works.•You•can•actually•achieve•a•surprisingly•high•degree•of•performance•optimization•with•such•endeavors,•so•the•payoff•for•the•effort•can•be•quite•high.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (425 > 79)

async & performance/ch6.md
| 457| Some•commonly•cited•examples•(https://github.com/petkaantonov/bluebird/wiki/Optimization-killers)•for•v8:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (105 > 79)

async & performance/ch6.md
| 459| *•Don't•pass•the•`arguments`•variable•from•one•function•to•any•other•function,•as•such•"leakage"•slows•down•the•function•implementation.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (136 > 79)

async & performance/ch6.md
| 460| *•Isolate•a•`try..catch`•in•its•own•function.•Browsers•struggle•with•optimizing•any•function•with•a•`try..catch`•in•it,•so•moving•that•construct•to•its•own•function•means•you•contain•the•de-optimization•harm•while•letting•the•surrounding•code•be•optimizable.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (258 > 79)

async & performance/ch6.md
| 462| But•rather•than•focus•on•those•tips•specifically,•let's•sanity•check•the•v8-only•optimization•approach•in•a•general•sense.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (122 > 79)

async & performance/ch6.md
| 464| Are•you•genuinely•writing•code•that•only•needs•to•run•in•one•JS•engine?•Even•if•your•code•is•entirely•intended•for•Node.js•*right•now*,•is•the•assumption•that•v8•will•*always*•be•the•used•JS•engine•reliable?•Is•it•possible•that•someday•a•few•years•from•now,•there's•another•server-side•JS•platform•besides•Node.js•that•you•choose•to•run•your•code•on?•What•if•what•you•optimized•for•before•is•now•a•much•slower•way•of•doing•that•operation•on•the•new•engine?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (456 > 79)

async & performance/ch6.md
| 466| Or•what•if•your•code•always•stays•running•on•v8•from•here•on•out,•but•v8•decides•at•some•point•to•change•the•way•some•set•of•operations•works•such•that•what•used•to•be•fast•is•now•slow,•and•vice•versa?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (201 > 79)

async & performance/ch6.md
| 468| These•scenarios•aren't•just•theoretical,•either.•It•used•to•be•that•it•was•faster•to•put•multiple•string•values•into•an•array•and•then•call•`join("")`•on•the•array•to•concatenate•the•values•than•to•just•use•`+`•concatenation•directly•with•the•values.•The•historical•reason•for•this•is•nuanced,•but•it•has•to•do•with•internal•implementation•details•about•how•string•values•were•stored•and•managed•in•memory.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (406 > 79)

async & performance/ch6.md
| 470| As•a•result,•"best•practice"•advice•at•the•time•disseminated•across•the•industry•suggesting•developers•always•use•the•array•`join(..)`•approach.•And•many•followed.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (163 > 79)

async & performance/ch6.md
| 472| Except,•somewhere•along•the•way,•the•JS•engines•changed•approaches•for•internally•managing•strings,•and•specifically•put•in•optimizations•for•`+`•concatenation.•They•didn't•slow•down•`join(..)`•per•se,•but•they•put•more•effort•into•helping•`+`•usage,•as•it•was•still•quite•a•bit•more•widespread.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (295 > 79)

async & performance/ch6.md
| 474| **Note:**•The•practice•of•standardizing•or•optimizing•some•particular•approach•based•mostly•on•its•existing•widespread•usage•is•often•called•(metaphorically)•"paving•the•cowpath."
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (179 > 79)

async & performance/ch6.md
| 476| Once•that•new•approach•to•handling•strings•and•concatenation•took•hold,•unfortunately•all•the•code•out•in•the•wild•that•was•using•array•`join(..)`•to•concatenate•strings•was•then•sub-optimal.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (191 > 79)

async & performance/ch6.md
| 478| Another•example:•at•one•time,•the•Opera•browser•differed•from•other•browsers•in•how•it•handled•the•boxing/unboxing•of•primitive•wrapper•objects•(see•the•*Types•&•Grammar*•title•of•this•book•series).•As•such,•their•advice•to•developers•was•to•use•a•`String`•object•instead•of•the•primitive•`string`•value•if•properties•like•`length`•or•methods•like•`charAt(..)`•needed•to•be•accessed.•This•advice•may•have•been•correct•for•Opera•at•the•time,•but•it•was•literally•completely•opposite•for•other•major•contemporary•browsers,•as•they•had•optimizations•specifically•for•the•`string`•primitives•and•not•their•object•wrapper•counterparts.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (630 > 79)

async & performance/ch6.md
| 480| I•think•these•various•gotchas•are•at•least•possible,•if•not•likely,•for•code•even•today.•So•I'm•very•cautious•about•making•wide•ranging•performance•optimizations•in•my•JS•code•based•purely•on•engine•implementation•details,•**especially•if•those•details•are•only•true•of•a•single•engine**.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (288 > 79)

async & performance/ch6.md
| 482| The•reverse•is•also•something•to•be•wary•of:•you•shouldn't•necessarily•change•a•piece•of•code•to•work•around•one•engine's•difficulty•with•running•a•piece•of•code•in•an•acceptably•performant•way.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (194 > 79)

async & performance/ch6.md
| 484| Historically,•IE•has•been•the•brunt•of•many•such•frustrations,•given•that•there•have•been•plenty•of•scenarios•in•older•IE•versions•where•it•struggled•with•some•performance•aspect•that•other•major•browsers•of•the•time•seemed•not•to•have•much•trouble•with.•The•string•concatenation•discussion•we•just•had•was•actually•a•real•concern•back•in•the•IE6•and•IE7•days,•where•it•was•possible•to•get•better•performance•out•of•`join(..)`•than•`+`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (436 > 79)

async & performance/ch6.md
| 486| But•it's•troublesome•to•suggest•that•just•one•browser's•trouble•with•performance•is•justification•for•using•a•code•approach•that•quite•possibly•could•be•sub-optimal•in•all•other•browsers.•Even•if•the•browser•in•question•has•a•large•market•share•for•your•site's•audience,•it•may•be•more•practical•to•write•the•proper•code•and•rely•on•the•browser•to•update•itself•with•better•optimizations•eventually.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (399 > 79)

async & performance/ch6.md
| 488| "There•is•nothing•more•permanent•than•a•temporary•hack."•Chances•are,•the•code•you•write•now•to•work•around•some•performance•bug•will•probably•outlive•the•performance•bug•in•the•browser•itself.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (193 > 79)

async & performance/ch6.md
| 490| In•the•days•when•a•browser•only•updated•once•every•five•years,•that•was•a•tougher•call•to•make.•But•as•it•stands•now,•browsers•across•the•board•are•updating•at•a•much•more•rapid•interval•(though•obviously•the•mobile•world•still•lags),•and•they're•all•competing•to•optimize•web•features•better•and•better.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (304 > 79)

async & performance/ch6.md
| 492| If•you•run•across•a•case•where•a•browser•*does*•have•a•performance•wart•that•others•don't•suffer•from,•make•sure•to•report•it•to•them•through•whatever•means•you•have•available.•Most•browsers•have•open•public•bug•trackers•suitable•for•this•purpose.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (247 > 79)

async & performance/ch6.md
| 494| **Tip:**•I'd•only•suggest•working•around•a•performance•issue•in•a•browser•if•it•was•a•really•drastic•show-stopper,•not•just•an•annoyance•or•frustration.•And•I'd•be•very•careful•to•check•that•the•performance•hack•didn't•have•noticeable•negative•side•effects•in•another•browser.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (276 > 79)

async & performance/ch6.md
| 498| Instead•of•worrying•about•all•these•microperformance•nuances,•we•should•instead•be•looking•at•big-picture•types•of•optimizations.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (129 > 79)

async & performance/ch6.md
| 500| How•do•you•know•what's•big•picture•or•not?•You•have•to•first•understand•if•your•code•is•running•on•a•critical•path•or•not.•If•it's•not•on•the•critical•path,•chances•are•your•optimizations•are•not•worth•much.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (207 > 79)

async & performance/ch6.md
| 502| Ever•heard•the•admonition,•"that's•premature•optimization!"?•It•comes•from•a•famous•quote•from•Donald•Knuth:•"premature•optimization•is•the•root•of•all•evil.".•Many•developers•cite•this•quote•to•suggest•that•most•optimizations•are•"premature"•and•are•thus•a•waste•of•effort.•The•truth•is,•as•usual,•more•nuanced.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (312 > 79)

async & performance/ch6.md
| 506| >•Programmers•waste•enormous•amounts•of•time•thinking•about,•or•worrying•about,•the•speed•of•**noncritical**•parts•of•their•programs,•and•these•attempts•at•efficiency•actually•have•a•strong•negative•impact•when•debugging•and•maintenance•are•considered.•We•should•forget•about•small•efficiencies,•say•about•97%•of•the•time:•premature•optimization•is•the•root•of•all•evil.•Yet•we•should•not•pass•up•our•opportunities•in•that•**critical**•3%.•[emphasis•added]
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (456 > 79)

async & performance/ch6.md
| 508| (http://web.archive.org/web/20130731202547/http://pplab.snu.ac.kr/courses/adv_pl05/papers/p261-knuth.pdf,•Computing•Surveys,•Vol•6,•No•4,•December•1974)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (152 > 79)

async & performance/ch6.md
| 510| I•believe•it's•a•fair•paraphrasing•to•say•that•Knuth•*meant*:•"non-critical•path•optimization•is•the•root•of•all•evil."•So•the•key•is•to•figure•out•if•your•code•is•on•the•critical•path•--•you•should•optimize•it!•--•or•not.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (222 > 79)

async & performance/ch6.md
| 512| I'd•even•go•so•far•as•to•say•this:•no•amount•of•time•spent•optimizing•critical•paths•is•wasted,•no•matter•how•little•is•saved;•but•no•amount•of•optimization•on•noncritical•paths•is•justified,•no•matter•how•much•is•saved.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (220 > 79)

async & performance/ch6.md
| 514| If•your•code•is•on•the•critical•path,•such•as•a•"hot"•piece•of•code•that's•going•to•be•run•over•and•over•again,•or•in•UX•critical•places•where•users•will•notice,•like•an•animation•loop•or•CSS•style•updates,•then•you•should•spare•no•effort•in•trying•to•employ•relevant,•measurably•significant•optimizations.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (306 > 79)

async & performance/ch6.md
| 516| For•example,•consider•a•critical•path•animation•loop•that•needs•to•coerce•a•string•value•to•a•number.•There•are•of•course•multiple•ways•to•do•that•(see•the•*Types•&•Grammar*•title•of•this•book•series),•but•which•one•if•any•is•the•fastest?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (238 > 79)

async & performance/ch6.md
| 537| **Note:**•I•will•leave•it•as•an•exercise•to•the•reader•to•set•up•a•test•if•you're•interested•in•examining•the•minute•differences•in•performance•among•these•options.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (164 > 79)

async & performance/ch6.md
| 539| When•considering•these•different•options,•as•they•say,•"One•of•these•things•is•not•like•the•others."•`parseInt(..)`•does•the•job,•but•it•also•does•a•lot•more•--•it•parses•the•string•rather•than•just•coercing.•You•can•probably•guess,•correctly,•that•`parseInt(..)`•is•a•slower•option,•and•you•should•probably•avoid•it.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (317 > 79)

async & performance/ch6.md
| 541| Of•course,•if•`x`•can•ever•be•a•value•that•**needs•parsing**,•such•as•`"42px"`•(like•from•a•CSS•style•lookup),•then•`parseInt(..)`•really•is•the•only•suitable•option!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (166 > 79)

async & performance/ch6.md
| 543| `Number(..)`•is•also•a•function•call.•From•a•behavioral•perspective,•it's•identical•to•the•`+`•unary•operator•option,•but•it•may•in•fact•be•a•little•slower,•requiring•more•machinery•to•execute•the•function.•Of•course,•it's•also•possible•that•the•JS•engine•recognizes•this•behavioral•symmetry•and•just•handles•the•inlining•of•`Number(..)`'s•behavior•(aka•`+x`)•for•you!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (368 > 79)

async & performance/ch6.md
| 545| But•remember,•obsessing•about•`+x`•versus•`x•|•0`•is•in•most•cases•likely•a•waste•of•effort.•This•is•a•microperformance•issue,•and•one•that•you•shouldn't•let•dictate/degrade•the•readability•of•your•program.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (206 > 79)

async & performance/ch6.md
| 547| While•performance•is•very•important•in•critical•paths•of•your•program,•it's•not•the•only•factor.•Among•several•options•that•are•roughly•similar•in•performance,•readability•should•be•another•important•concern.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (208 > 79)

async & performance/ch6.md
| 551| As•we•briefly•mentioned•earlier,•ES6•includes•a•specific•requirement•that•ventures•into•the•world•of•performance.•It's•related•to•a•specific•form•of•optimization•that•can•occur•with•function•calls:•*tail•call•optimization*.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (223 > 79)

async & performance/ch6.md
| 553| Briefly,•a•"tail•call"•is•a•function•call•that•appears•at•the•"tail"•of•another•function,•such•that•after•the•call•finishes,•there's•nothing•left•to•do•(except•perhaps•return•its•result•value).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (193 > 79)

async & performance/ch6.md
| 573| `foo(y+1)`•is•a•tail•call•in•`bar(..)`•because•after•`foo(..)`•finishes,•`bar(..)`•is•also•finished•except•in•this•case•returning•the•result•of•the•`foo(..)`•call.•However,•`bar(40)`•is•*not*•a•tail•call•because•after•it•completes,•its•result•value•must•be•added•to•`1`•before•`baz()`•can•return•it.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (299 > 79)

async & performance/ch6.md
| 575| Without•getting•into•too•much•nitty-gritty•detail,•calling•a•new•function•requires•an•extra•amount•of•reserved•memory•to•manage•the•call•stack,•called•a•"stack•frame."•So•the•preceding•snippet•would•generally•require•a•stack•frame•for•each•of•`baz()`,•`bar(..)`,•and•`foo(..)`•all•at•the•same•time.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (298 > 79)

async & performance/ch6.md
| 577| However,•if•a•TCO-capable•engine•can•realize•that•the•`foo(y+1)`•call•is•in•*tail•position*•meaning•`bar(..)`•is•basically•complete,•then•when•calling•`foo(..)`,•it•doesn't•need•to•create•a•new•stack•frame,•but•can•instead•reuse•the•existing•stack•frame•from•`bar(..)`.•That's•not•only•faster,•but•it•also•uses•less•memory.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (323 > 79)

async & performance/ch6.md
| 579| That•sort•of•optimization•isn't•a•big•deal•in•a•simple•snippet,•but•it•becomes•a•*much•bigger•deal*•when•dealing•with•recursion,•especially•if•the•recursion•could•have•resulted•in•hundreds•or•thousands•of•stack•frames.•With•TCO•the•engine•can•perform•all•those•calls•with•a•single•stack•frame!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (293 > 79)

async & performance/ch6.md
| 581| Recursion•is•a•hairy•topic•in•JS•because•without•TCO,•engines•have•had•to•implement•arbitrary•(and•different!)•limits•to•how•deep•they•will•let•the•recursion•stack•get•before•they•stop•it,•to•prevent•running•out•of•memory.•With•TCO,•recursive•functions•with•*tail•position*•calls•can•essentially•run•unbounded,•because•there's•never•any•extra•usage•of•memory!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (359 > 79)

async & performance/ch6.md
| 583| Consider•that•recursive•`factorial(..)`•from•before,•but•rewritten•to•make•it•TCO•friendly:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (91 > 79)

async & performance/ch6.md
| 599| This•version•of•`factorial(..)`•is•still•recursive,•but•it's•also•optimizable•with•TCO,•because•both•inner•`fact(..)`•calls•are•in•*tail•position*.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (147 > 79)

async & performance/ch6.md
| 601| **Note:**•It's•important•to•note•that•TCO•only•applies•if•there's•actually•a•tail•call.•If•you•write•recursive•functions•without•tail•calls,•the•performance•will•still•fall•back•to•normal•stack•frame•allocation,•and•the•engines'•limits•on•such•recursive•call•stacks•will•still•apply.•Many•recursive•functions•can•be•rewritten•as•we•just•showed•with•`factorial(..)`,•but•it•takes•careful•attention•to•detail.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (407 > 79)

async & performance/ch6.md
| 603| One•reason•that•ES6•requires•engines•to•implement•TCO•rather•than•leaving•it•up•to•their•discretion•is•because•the•*lack•of•TCO*•actually•tends•to•reduce•the•chances•that•certain•algorithms•will•be•implemented•in•JS•using•recursion,•for•fear•of•the•call•stack•limits.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (267 > 79)

async & performance/ch6.md
| 605| If•the•lack•of•TCO•in•the•engine•would•just•gracefully•degrade•to•slower•performance•in•all•cases,•it•wouldn't•probably•have•been•something•that•ES6•needed•to•*require*.•But•because•the•lack•of•TCO•can•actually•make•certain•programs•impractical,•it's•more•an•important•feature•of•the•language•than•just•a•hidden•implementation•detail.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (334 > 79)

async & performance/ch6.md
| 607| ES6•guarantees•that•from•now•on,•JS•developers•will•be•able•to•rely•on•this•optimization•across•all•ES6+•compliant•browsers.•That's•a•win•for•JS•performance!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (157 > 79)

async & performance/ch6.md
| 611| Effectively•benchmarking•performance•of•a•piece•of•code,•especially•to•compare•it•to•another•option•for•that•same•code•to•see•which•approach•is•faster,•requires•careful•attention•to•detail.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (189 > 79)

async & performance/ch6.md
| 613| Rather•than•rolling•your•own•statistically•valid•benchmarking•logic,•just•use•the•Benchmark.js•library,•which•does•that•for•you.•But•be•careful•about•how•you•author•tests,•because•it's•far•too•easy•to•construct•a•test•that•seems•valid•but•that's•actually•flawed•--•even•tiny•differences•can•skew•the•results•to•be•completely•unreliable.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (336 > 79)

async & performance/ch6.md
| 615| It's•important•to•get•as•many•test•results•from•as•many•different•environments•as•possible•to•eliminate•hardware/device•bias.•jsPerf.com•is•a•fantastic•website•for•crowdsourcing•performance•benchmark•test•runs.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (210 > 79)

async & performance/ch6.md
| 617| Many•common•performance•tests•unfortunately•obsess•about•irrelevant•microperformance•details•like•`x++`•versus•`++x`.•Writing•good•tests•means•understanding•how•to•focus•on•big•picture•concerns,•like•optimizing•on•the•critical•path,•and•avoiding•falling•into•traps•like•different•JS•engines'•implementation•details.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (315 > 79)

async & performance/ch6.md
| 619| Tail•call•optimization•(TCO)•is•a•required•optimization•as•of•ES6•that•will•make•some•recursive•patterns•practical•in•JS•where•they•would•have•been•impossible•otherwise.•TCO•allows•a•function•call•in•the•*tail•position*•of•another•function•to•execute•without•needing•any•extra•resources,•which•means•the•engine•no•longer•needs•to•place•arbitrary•restrictions•on•call•stack•depth•for•recursive•algorithms.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (404 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/this & object prototypes/foreword.md
|    |++++| /app/this & object prototypes/foreword.md
|   1|   1| # You Don't Know JS: *this* & Object Prototypes
|    |   2|+
|   2|   3| # Foreword
|   3|   4| 
|   4|   5| While reading this book in preparation for writing this foreword, I was forced to reflect on how I learned JavaScript and how much it has changed over the last 15 years that I have been programming and developing with it.

this & object prototypes/foreword.md
|   4| While•reading•this•book•in•preparation•for•writing•this•foreword,•I•was•forced•to•reflect•on•how•I•learned•JavaScript•and•how•much•it•has•changed•over•the•last•15•years•that•I•have•been•programming•and•developing•with•it.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (221 > 79)

this & object prototypes/foreword.md
|   6| When•I•started•using•JavaScript•15•years•ago,•the•practice•of•using•non-HTML•technologies•such•as•CSS•and•JS•in•your•web•pages•was•called•DHTML•or•Dynamic•HTML.•Back•then,•the•usefulness•of•JavaScript•varied•greatly•and•seemed•to•be•tilted•toward•adding•animated•snowflakes•to•your•web•pages•or•dynamic•clocks•that•told•the•time•in•the•status•bar.•Suffice•it•to•say,•I•didn’t•really•pay•much•attention•to•JavaScript•in•the•early•part•of•my•career•because•of•the•novelty•of•the•implementations•that•I•often•found•on•the•Internet.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (528 > 79)

this & object prototypes/foreword.md
|   8| It•wasn’t•until•2005•that•I•first•rediscovered•JavaScript•as•a•real•programming•language•that•I•needed•to•pay•closer•attention•to.•After•digging•into•the•first•beta•release•of•Google•Maps,•I•was•hooked•on•the•potential•it•had.•At•the•time,•Google•Maps•was•a•first-of-its-kind•application•--•it•allowed•you•to•move•a•map•around•with•your•mouse,•zoom•in•and•out,•and•make•server•requests•without•reloading•the•page•--•all•with•JavaScript.•It•seemed•like•magic!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (458 > 79)

this & object prototypes/foreword.md
|  10| When•anything•seems•like•magic,•it•is•usually•a•good•indication•you•are•at•the•dawn•of•a•new•way•of•doing•things.•And•boy,•was•I•not•wrong•--•fast-forwarding•to•today,•I•would•say•that•JavaScript•is•one•of•the•primary•languages•I•use•for•both•client-•and•server-side•programming,•and•I•wouldn’t•have•it•any•other•way.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (317 > 79)

this & object prototypes/foreword.md
|  12| One•of•my•regrets•as•I•look•over•the•past•15•years•is•that•I•didn’t•give•JavaScript•more•of•a•chance•before•2005,•or•more•accurately,•that•I•lacked•the•foresight•to•see•JavaScript•as•a•true•programming•language•that•is•just•as•useful•as•C++,•C#,•Java,•and•many•others.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (268 > 79)

this & object prototypes/foreword.md
|  14| If•I•had•this•*You•Don’t•Know•JS*•series•of•books•at•the•start•of•my•career,•my•career•history•would•look•much•different•than•it•does•today.•And•that•is•one•of•the•things•I•love•about•this•series:•it•explains•JS•at•a•level•that•builds•your•understanding•as•you•go•through•the•series,•but•in•a•fun•and•informative•way.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (317 > 79)

this & object prototypes/foreword.md
|  16| *this•&•Object•Prototypes*•is•a•wonderful•continuation•to•the•series.•It•does•a•great•and•natural•job•of•building•on•the•prior•book,•Scope•&•Closures,•and•extending•that•knowledge•to•a•very•important•part•of•the•JS•language,•the•`this`•keyword•and•prototypes.•These•two•simple•things•are•pivotal•for•what•you•will•learn•in•the•future•books,•because•they•are•foundational•to•doing•real•programming•with•JavaScript.•The•concept•of•how•to•create•objects,•relate•them,•and•extend•them•to•represent•things•in•your•application•is•necessary•to•create•large•and•complex•applications•in•JavaScript.•And•without•them,•creating•complex•applications•(such•as•Google•Maps)•wouldn’t•be•possible•in•JavaScript.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (695 > 79)

this & object prototypes/foreword.md
|  18| I•would•say•that•the•vast•majority•of•web•developers•probably•have•never•built•a•JavaScript•object•and•just•treat•the•language•as•event-binding•glue•between•buttons•and•AJAX•requests.•I•was•in•that•camp•at•a•point•in•my•career,•but•after•I•learned•how•to•master•prototypes•and•create•objects•in•JavaScript,•a•world•of•possibilities•opened•up•for•me.•If•you•fall•into•the•category•of•just•creating•event-binding•glue•code,•this•book•is•a•must-read;•if•you•just•need•a•refresher,•this•book•will•be•a•go-to•resource•for•you.•Either•way,•you•will•not•be•disappointed.•Trust•me!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (573 > 79)

this & object prototypes/foreword.md
|  21| [nickberardi.com](http://nickberardi.com),•[@nberardi](http://twitter.com/nberardi)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (83 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/ch8.md
|    |++++| /app/es6 & beyond/ch8.md
|   1|   1| # You Don't Know JS: ES6 & Beyond
|    |   2|+
|   2|   3| # Chapter 8: Beyond ES6
|   3|   4| 
|   4|   5| At the time of this writing, the final draft of ES6 (*ECMAScript 2015*) is shortly headed toward its final official vote of approval by ECMA. But even as ES6 is being finalized, the TC39 committee is already hard at work on features for ES7/2016 and beyond.
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/ch8.md
|    |++++| /app/es6 & beyond/ch8.md
|   7|   7| 
|   8|   8| But even more importantly, the committee is actually going to work feature by feature. As soon as a feature is spec-complete and has its kinks worked out through implementation experiments in a few browsers, that feature will be considered stable enough to start using. We're all strongly encouraged to adopt features once they're ready instead of waiting for some official standards vote. If you haven't already learned ES6, the time is *past due* to get on board!
|   9|   9| 
|  10|    |-As the time of this writing, a list of future proposals and their status can be seen here (https://github.com/tc39/ecma262#current-proposals).
|    |  10|+As the time of this writing, a list of future proposals and their status can be seen here (<https://github.com/tc39/ecma262#current-proposals>).
|  11|  11| 
|  12|  12| Transpilers and polyfills are how we'll bridge to these new features even before all browsers we support have implemented them. Babel, Traceur, and several other major transpilers already have support for some of the post-ES6 features that are most likely to stabilize.
|  13|  13| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/ch8.md
|    |++++| /app/es6 & beyond/ch8.md
| 140| 140| 
| 141| 141| Several possible resolutions to this debate have surfaced:
| 142| 142| 
| 143|    |-* `async function`s won't be cancelable at all (status quo)
| 144|    |-* A "cancel token" can be passed to an async function at call time
| 145|    |-* Return value changes to a cancelable-promise type that's added
| 146|    |-* Return value changes to something else non-promise (e.g., observable, or control token with promise and cancel capabilities)
|    | 143|+- `async function`s won't be cancelable at all (status quo)
|    | 144|+- A "cancel token" can be passed to an async function at call time
|    | 145|+- Return value changes to a cancelable-promise type that's added
|    | 146|+- Return value changes to something else non-promise (e.g., observable, or control token with promise and cancel capabilities)
| 147| 147| 
| 148| 148| At the time of this writing, `async function`s return regular promises, so it's less likely that the return value will entirely change. But it's too early to tell where things will land. Keep an eye on this discussion.
| 149| 149| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/ch8.md
|    |++++| /app/es6 & beyond/ch8.md
| 155| 155| 
| 156| 156| There are six types of changes that you can observe:
| 157| 157| 
| 158|    |-* add
| 159|    |-* update
| 160|    |-* delete
| 161|    |-* reconfigure
| 162|    |-* setPrototype
| 163|    |-* preventExtensions
|    | 158|+- add
|    | 159|+- update
|    | 160|+- delete
|    | 161|+- reconfigure
|    | 162|+- setPrototype
|    | 163|+- preventExtensions
| 164| 164| 
| 165| 165| By default, you'll be notified of all these change types, but you can filter down to only the ones you care about.
| 166| 166| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/ch8.md
|    |++++| /app/es6 & beyond/ch8.md
| 191| 191| 
| 192| 192| In addition to the main `"add"`, `"update"`, and `"delete"` change types:
| 193| 193| 
| 194|    |-* The `"reconfigure"` change event is fired if one of the object's properties is reconfigured with `Object.defineProperty(..)`, such as changing its `writable` attribute. See the *this & Object Prototypes* title of this series for more information.
| 195|    |-* The `"preventExtensions"` change event is fired if the object is made non-extensible via `Object.preventExtensions(..)`.
|    | 194|+- The `"reconfigure"` change event is fired if one of the object's properties is reconfigured with `Object.defineProperty(..)`, such as changing its `writable` attribute. See the *this & Object Prototypes* title of this series for more information.
|    | 195|+- The `"preventExtensions"` change event is fired if the object is made non-extensible via `Object.preventExtensions(..)`.
| 196| 196| 
| 197| 197|    Because both `Object.seal(..)` and `Object.freeze(..)` also imply `Object.preventExtensions(..)`, they'll also fire its corresponding change event. In addition, `"reconfigure"` change events will also be fired for each property on the object.
| 198| 198| * The `"setPrototype"` change event is fired if the `[[Prototype]]` of an object is changed, either by setting it with the `__proto__` setter, or using `Object.setPrototypeOf(..)`.
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/ch8.md
|    |++++| /app/es6 & beyond/ch8.md
| 195| 195| * The `"preventExtensions"` change event is fired if the object is made non-extensible via `Object.preventExtensions(..)`.
| 196| 196| 
| 197| 197|    Because both `Object.seal(..)` and `Object.freeze(..)` also imply `Object.preventExtensions(..)`, they'll also fire its corresponding change event. In addition, `"reconfigure"` change events will also be fired for each property on the object.
| 198|    |-* The `"setPrototype"` change event is fired if the `[[Prototype]]` of an object is changed, either by setting it with the `__proto__` setter, or using `Object.setPrototypeOf(..)`.
|    | 198|+
|    | 199|+- The `"setPrototype"` change event is fired if the `[[Prototype]]` of an object is changed, either by setting it with the `__proto__` setter, or using `Object.setPrototypeOf(..)`.
| 199| 200| 
| 200| 201| Notice that these change events are notified immediately after said change. Don't confuse this with proxies (see Chapter 7) where you can intercept the actions before they occur. Object observation lets you respond after a change (or set of changes) occurs.
| 201| 202| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/ch8.md
|    |++++| /app/es6 & beyond/ch8.md
| 422| 422| 
| 423| 423| Things which are currently written in JS will probably continue to always be written in JS, at least for the foreseeable future. Things which are transpiled to JS will probably eventually at least consider targeting WASM instead. For things which need the utmost in performance with minimal tolerance for layers of abstraction, the likely choice will be to find a suitable non-JS language to author in, then targeting WASM.
| 424| 424| 
| 425|    |-There's a good chance this shift will be slow, and will be years in the making. WASM landing in all the major browser platforms is probably a few years out at best. In the meantime, the WASM project (https://github.com/WebAssembly) has an early polyfill to demonstrate proof-of-concept for its basic tenets.
|    | 425|+There's a good chance this shift will be slow, and will be years in the making. WASM landing in all the major browser platforms is probably a few years out at best. In the meantime, the WASM project (<https://github.com/WebAssembly>) has an early polyfill to demonstrate proof-of-concept for its basic tenets.
| 426| 426| 
| 427| 427| But as time goes on, and as WASM learns new non-JS tricks, it's not too much a stretch of imagination to see some currently-JS things being refactored to a WASM-targetable language. For example, the performance sensitive parts of frameworks, game engines, and other heavily used tools might very well benefit from such a shift. Developers using these tools in their web applications likely won't notice much difference in usage or integration, but will just automatically take advantage of the performance and capabilities.
| 428| 428| 

es6 & beyond/ch8.md
|   4| At•the•time•of•this•writing,•the•final•draft•of•ES6•(*ECMAScript•2015*)•is•shortly•headed•toward•its•final•official•vote•of•approval•by•ECMA.•But•even•as•ES6•is•being•finalized,•the•TC39•committee•is•already•hard•at•work•on•features•for•ES7/2016•and•beyond.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (257 > 79)

es6 & beyond/ch8.md
|   6| As•we•discussed•in•Chapter•1,•it's•expected•that•the•cadence•of•progress•for•JS•is•going•to•accelerate•from•updating•once•every•several•years•to•having•an•official•version•update•once•per•year•(hence•the•year-based•naming).•That•alone•is•going•to•radically•change•how•JS•developers•learn•about•and•keep•up•with•the•language.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (324 > 79)

es6 & beyond/ch8.md
|   8| But•even•more•importantly,•the•committee•is•actually•going•to•work•feature•by•feature.•As•soon•as•a•feature•is•spec-complete•and•has•its•kinks•worked•out•through•implementation•experiments•in•a•few•browsers,•that•feature•will•be•considered•stable•enough•to•start•using.•We're•all•strongly•encouraged•to•adopt•features•once•they're•ready•instead•of•waiting•for•some•official•standards•vote.•If•you•haven't•already•learned•ES6,•the•time•is•*past•due*•to•get•on•board!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (465 > 79)

es6 & beyond/ch8.md
|  10| As•the•time•of•this•writing,•a•list•of•future•proposals•and•their•status•can•be•seen•here•(https://github.com/tc39/ecma262#current-proposals).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (142 > 79)

es6 & beyond/ch8.md
|  12| Transpilers•and•polyfills•are•how•we'll•bridge•to•these•new•features•even•before•all•browsers•we•support•have•implemented•them.•Babel,•Traceur,•and•several•other•major•transpilers•already•have•support•for•some•of•the•post-ES6•features•that•are•most•likely•to•stabilize.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (269 > 79)

es6 & beyond/ch8.md
|  14| With•that•in•mind,•it's•already•time•for•us•to•look•at•some•of•them.•Let's•jump•in!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (83 > 79)

es6 & beyond/ch8.md
|  16| **Warning:**•These•features•are•all•in•various•stages•of•development.•While•they're•likely•to•land,•and•probably•will•look•similar,•take•the•contents•of•this•chapter•with•more•than•a•few•grains•of•salt.•This•chapter•will•evolve•in•future•editions•of•this•title•as•these•(and•other!)•features•finalize.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (301 > 79)

es6 & beyond/ch8.md
|  20| In•"Generators•+•Promises"•in•Chapter•4,•we•mentioned•that•there's•a•proposal•for•direct•syntactic•support•for•the•pattern•of•generators•`yield`ing•promises•to•a•runner-like•utility•that•will•resume•it•on•promise•completion.•Let's•take•a•brief•look•at•that•proposed•feature,•called•`async•function`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (299 > 79)

es6 & beyond/ch8.md
|  53| The•proposed•`async•function`•syntax•can•express•this•same•flow•control•logic•without•needing•the•`run(..)`•utility,•because•JS•will•automatically•know•how•to•look•for•promises•to•wait•and•resume.•Consider:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (206 > 79)

es6 & beyond/ch8.md
|  86| Instead•of•the•`function•*main()•{•..`•declaration,•we•declare•with•the•`async•function•main()•{•..`•form.•And•instead•of•`yield`ing•a•promise,•we•`await`•the•promise.•The•call•to•run•the•function•`main()`•actually•returns•a•promise•that•we•can•directly•observe.•That's•the•equivalent•to•the•promise•that•we•get•back•from•a•`run(main)`•call.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (341 > 79)

es6 & beyond/ch8.md
|  88| Do•you•see•the•symmetry?•`async•function`•is•essentially•syntactic•sugar•for•the•generators•+•promises•+•`run(..)`•pattern;•under•the•covers,•it•operates•the•same!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (163 > 79)

es6 & beyond/ch8.md
|  90| If•you're•a•C#•developer•and•this•`async`/`await`•looks•familiar,•it's•because•this•feature•is•directly•inspired•by•C#'s•feature.•It's•nice•to•see•language•precedence•informing•convergence!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (189 > 79)

es6 & beyond/ch8.md
|  92| Babel,•Traceur•and•other•transpilers•already•have•early•support•for•the•current•status•of•`async•function`s,•so•you•can•start•using•them•already.•However,•in•the•next•section•"Caveats",•we'll•see•why•you•perhaps•shouldn't•jump•on•that•ship•quite•yet.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (250 > 79)

es6 & beyond/ch8.md
|  94| **Note:**•There's•also•a•proposal•for•`async•function*`,•which•would•be•called•an•"async•generator."•You•can•both•`yield`•and•`await`•in•the•same•code,•and•even•combine•those•operations•in•the•same•statement:•`x•=•await•yield•y`.•The•"async•generator"•proposal•seems•to•be•more•in•flux•--•namely,•its•return•value•is•not•fully•worked•out•yet.•Some•feel•it•should•be•an•*observable*,•which•is•kind•of•like•the•combination•of•an•iterator•and•a•promise.•For•now,•we•won't•go•further•into•that•topic,•but•stay•tuned•as•it•evolves.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (526 > 79)

es6 & beyond/ch8.md
|  98| One•unresolved•point•of•contention•with•`async•function`•is•that•because•it•only•returns•a•promise,•there's•no•way•from•the•outside•to•*cancel*•an•`async•function`•instance•that's•currently•running.•This•can•be•a•problem•if•the•async•operation•is•resource•intensive,•and•you•want•to•free•up•the•resources•as•soon•as•you're•sure•the•result•won't•be•needed.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (355 > 79)

es6 & beyond/ch8.md
| 137| This•`request(..)`•that•I've•conceived•is•somewhat•like•the•`fetch(..)`•utility•that's•recently•been•proposed•for•inclusion•into•the•web•platform.•So•the•concern•is,•what•happens•if•you•want•to•use•the•`pr`•value•to•somehow•indicate•that•you•want•to•cancel•a•long-running•Ajax•request,•for•example?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (298 > 79)

es6 & beyond/ch8.md
| 139| Promises•are•not•cancelable•(at•the•time•of•writing,•anyway).•In•my•opinion,•as•well•as•many•others,•they•never•should•be•(see•the•*Async•&•Performance*•title•of•this•series).•And•even•if•a•promise•did•have•a•`cancel()`•method•on•it,•does•that•necessarily•mean•that•calling•`pr.cancel()`•should•actually•propagate•a•cancelation•signal•all•the•way•back•up•the•promise•chain•to•the•`async•function`?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (397 > 79)

es6 & beyond/ch8.md
| 146| *•Return•value•changes•to•something•else•non-promise•(e.g.,•observable,•or•control•token•with•promise•and•cancel•capabilities)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (126 > 79)

es6 & beyond/ch8.md
| 148| At•the•time•of•this•writing,•`async•function`s•return•regular•promises,•so•it's•less•likely•that•the•return•value•will•entirely•change.•But•it's•too•early•to•tell•where•things•will•land.•Keep•an•eye•on•this•discussion.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (218 > 79)

es6 & beyond/ch8.md
| 152| One•of•the•holy•grails•of•front-end•web•development•is•data•binding•--•listening•for•updates•to•a•data•object•and•syncing•the•DOM•representation•of•that•data.•Most•JS•frameworks•provide•some•mechanism•for•these•sorts•of•operations.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (231 > 79)

es6 & beyond/ch8.md
| 154| It•appears•likely•that•post•ES6,•we'll•see•support•added•directly•to•the•language,•via•a•utility•called•`Object.observe(..)`.•Essentially,•the•idea•is•that•you•can•set•up•a•listener•to•observe•an•object's•changes,•and•have•a•callback•called•any•time•a•change•occurs.•You•can•then•update•the•DOM•accordingly,•for•instance.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (321 > 79)

es6 & beyond/ch8.md
| 165| By•default,•you'll•be•notified•of•all•these•change•types,•but•you•can•filter•down•to•only•the•ones•you•care•about.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (114 > 79)

es6 & beyond/ch8.md
| 194| *•The•`"reconfigure"`•change•event•is•fired•if•one•of•the•object's•properties•is•reconfigured•with•`Object.defineProperty(..)`,•such•as•changing•its•`writable`•attribute.•See•the•*this•&•Object•Prototypes*•title•of•this•series•for•more•information.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (248 > 79)

es6 & beyond/ch8.md
| 195| *•The•`"preventExtensions"`•change•event•is•fired•if•the•object•is•made•non-extensible•via•`Object.preventExtensions(..)`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (122 > 79)

es6 & beyond/ch8.md
| 197| •••Because•both•`Object.seal(..)`•and•`Object.freeze(..)`•also•imply•`Object.preventExtensions(..)`,•they'll•also•fire•its•corresponding•change•event.•In•addition,•`"reconfigure"`•change•events•will•also•be•fired•for•each•property•on•the•object.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (245 > 79)

es6 & beyond/ch8.md
| 198| *•The•`"setPrototype"`•change•event•is•fired•if•the•`[[Prototype]]`•of•an•object•is•changed,•either•by•setting•it•with•the•`__proto__`•setter,•or•using•`Object.setPrototypeOf(..)`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (180 > 79)

es6 & beyond/ch8.md
| 200| Notice•that•these•change•events•are•notified•immediately•after•said•change.•Don't•confuse•this•with•proxies•(see•Chapter•7)•where•you•can•intercept•the•actions•before•they•occur.•Object•observation•lets•you•respond•after•a•change•(or•set•of•changes)•occurs.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (257 > 79)

es6 & beyond/ch8.md
| 204| In•addition•to•the•six•built-in•change•event•types,•you•can•also•listen•for•and•fire•custom•change•events.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (106 > 79)

es6 & beyond/ch8.md
| 249| The•change•set•(`"recalc"`•custom•event)•has•been•queued•for•delivery•to•the•observer,•but•not•delivered•yet,•which•is•why•`obj.c`•is•still•`3`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (144 > 79)

es6 & beyond/ch8.md
| 251| The•changes•are•by•default•delivered•at•the•end•of•the•current•event•loop•(see•the•*Async•&•Performance*•title•of•this•series).•If•you•want•to•deliver•them•immediately,•use•`Object.deliverChangeRecords(observer)`.•Once•the•change•events•are•delivered,•you•can•observe•`obj.c`•updated•as•expected:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (296 > 79)

es6 & beyond/ch8.md
| 257| In•the•previous•example,•we•called•`notifier.notify(..)`•with•the•complete•change•event•record.•An•alternative•form•for•queuing•change•records•is•to•use•`performChange(..)`,•which•separates•specifying•the•type•of•the•event•from•the•rest•of•event•record's•properties•(via•a•function•callback).•Consider:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (302 > 79)

es6 & beyond/ch8.md
| 269| In•certain•circumstances,•this•separation•of•concerns•may•map•more•cleanly•to•your•usage•pattern.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (97 > 79)

es6 & beyond/ch8.md
| 273| Just•like•with•normal•event•listeners,•you•may•wish•to•stop•observing•an•object's•change•events.•For•that,•you•use•`Object.unobserve(..)`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (138 > 79)

es6 & beyond/ch8.md
| 292| In•this•trivial•example,•we•listen•for•change•events•until•we•see•the•`"setPrototype"`•event•come•through,•at•which•time•we•stop•observing•any•more•change•events.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (162 > 79)

es6 & beyond/ch8.md
| 296| An•operator•has•been•proposed•for•JavaScript•to•perform•exponentiation•in•the•same•way•that•`Math.pow(..)`•does.•Consider:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (122 > 79)

es6 & beyond/ch8.md
| 307| **Note:**•`**`•is•essentially•the•same•as•it•appears•in•Python,•Ruby,•Perl,•and•others.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (87 > 79)

es6 & beyond/ch8.md
| 311| As•we•saw•in•the•"Too•Many,•Too•Few,•Just•Enough"•section•of•Chapter•2,•the•`...`•operator•is•pretty•obvious•in•how•it•relates•to•spreading•or•gathering•arrays.•But•what•about•objects?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (184 > 79)

es6 & beyond/ch8.md
| 313| Such•a•feature•was•considered•for•ES6,•but•was•deferred•to•be•considered•after•ES6•(aka•"ES7"•or•"ES2016"•or•...).•Here's•how•it•might•work•in•that•"beyond•ES6"•timeframe:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (171 > 79)

es6 & beyond/ch8.md
| 324| The•`...`•operator•might•also•be•used•to•gather•an•object's•destructured•properties•back•into•an•object:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (104 > 79)

es6 & beyond/ch8.md
| 333| Here,•the•`...o2`•re-gathers•the•destructured•`c`•and•`d`•properties•back•into•an•`o2`•object•(`o2`•does•not•have•a•`b`•property•like•`o1`•does).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (145 > 79)

es6 & beyond/ch8.md
| 335| Again,•these•are•just•proposals•under•consideration•beyond•ES6.•But•it'll•be•cool•if•they•do•land.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (98 > 79)

es6 & beyond/ch8.md
| 339| One•extremely•common•task•JS•developers•need•to•perform•is•searching•for•a•value•inside•an•array•of•values.•The•way•this•has•always•been•done•is:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (145 > 79)

es6 & beyond/ch8.md
| 349| The•reason•for•the•`>=•0`•check•is•because•`indexOf(..)`•returns•a•numeric•value•of•`0`•or•greater•if•found,•or•`-1`•if•not•found.•In•other•words,•we're•using•an•index-returning•function•in•a•boolean•context.•But•because•`-1`•is•truthy•instead•of•falsy,•we•have•to•be•more•manual•with•our•checks.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (296 > 79)

es6 & beyond/ch8.md
| 351| In•the•*Types•&•Grammar*•title•of•this•series,•I•explored•another•pattern•that•I•slightly•prefer:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (97 > 79)

es6 & beyond/ch8.md
| 361| The•`~`•operator•here•conforms•the•return•value•of•`indexOf(..)`•to•a•value•range•that•is•suitably•boolean•coercible.•That•is,•`-1`•produces•`0`•(falsy),•and•anything•else•produces•a•non-zero•(truthy)•value,•which•is•what•we•for•deciding•if•we•found•the•value•or•not.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (267 > 79)

es6 & beyond/ch8.md
| 363| While•I•think•that's•an•improvement,•others•strongly•disagree.•However,•no•one•can•argue•that•`indexOf(..)`'s•searching•logic•is•perfect.•It•fails•to•find•`NaN`•values•in•the•array,•for•example.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (194 > 79)

es6 & beyond/ch8.md
| 365| So•a•proposal•has•surfaced•and•gained•a•lot•of•support•for•adding•a•real•boolean-returning•array•search•method,•called•`includes(..)`:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (134 > 79)

es6 & beyond/ch8.md
| 375| **Note:**•`Array#includes(..)`•uses•matching•logic•that•will•find•`NaN`•values,•but•will•not•distinguish•between•`-0`•and•`0`•(see•the•*Types•&•Grammar*•title•of•this•series).•If•you•don't•care•about•`-0`•values•in•your•programs,•this•will•likely•be•exactly•what•you're•hoping•for.•If•you•*do*•care•about•`-0`,•you'll•need•to•do•your•own•searching•logic,•likely•using•the•`Object.is(..)`•utility•(see•Chapter•6).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (412 > 79)

es6 & beyond/ch8.md
| 379| We•cover•Single•Instruction,•Multiple•Data•(SIMD)•in•more•detail•in•the•*Async•&•Performance*•title•of•this•series,•but•it•bears•a•brief•mention•here,•as•it's•one•of•the•next•likely•features•to•land•in•a•future•JS.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (214 > 79)

es6 & beyond/ch8.md
| 381| The•SIMD•API•exposes•various•low-level•(CPU)•instructions•that•can•operate•on•more•than•a•single•number•value•at•a•time.•For•example,•you'll•be•able•to•specify•two•*vectors*•of•4•or•8•numbers•each,•and•multiply•the•respective•elements•all•at•once•(data•parallelism!).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (267 > 79)

es6 & beyond/ch8.md
| 393| SIMD•will•include•several•other•operations•besides•`mul(..)`•(multiplication),•such•as•`sub()`,•`div()`,•`abs()`,•`neg()`,•`sqrt()`,•and•many•more.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (147 > 79)

es6 & beyond/ch8.md
| 395| Parallel•math•operations•are•critical•for•the•next•generations•of•high•performance•JS•applications.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (99 > 79)

es6 & beyond/ch8.md
| 399| Brendan•Eich•made•a•late•breaking•announcement•near•the•completion•of•the•first•edition•of•this•title•that•has•the•potential•to•significantly•impact•the•future•path•of•JavaScript:•WebAssembly•(WASM).•We•will•not•be•able•to•cover•WASM•in•detail•here,•as•it's•extremely•early•at•the•time•of•this•writing.•But•this•title•would•be•incomplete•without•at•least•a•brief•mention•of•it.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (377 > 79)

es6 & beyond/ch8.md
| 401| One•of•the•strongest•pressures•on•the•recent•(and•near•future)•design•changes•of•the•JS•language•has•been•the•desire•that•it•become•a•more•suitable•target•for•transpilation/cross-compilation•from•other•languages•(like•C/C++,•ClojureScript,•etc.).•Obviously,•performance•of•code•running•as•JavaScript•has•been•a•primary•concern.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (327 > 79)

es6 & beyond/ch8.md
| 403| As•discussed•in•the•*Async•&•Performance*•title•of•this•series,•a•few•years•ago•a•group•of•developers•at•Mozilla•introduced•an•idea•to•JavaScript•called•ASM.js.•ASM.js•is•a•subset•of•valid•JS•that•most•significantly•restricts•certain•actions•that•make•code•hard•for•the•JS•engine•to•optimize.•The•result•is•that•ASM.js•compatible•code•running•in•an•ASM-aware•engine•can•run•remarkably•faster,•nearly•on•par•with•native•optimized•C•equivalents.•Many•viewed•ASM.js•as•the•most•likely•backbone•on•which•performance-hungry•applications•would•ride•in•JavaScript.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (557 > 79)

es6 & beyond/ch8.md
| 405| In•other•words,•all•roads•to•running•code•in•the•browser•*lead•through•JavaScript*.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (83 > 79)

es6 & beyond/ch8.md
| 407| That•is,•until•the•WASM•announcement.•WASM•provides•an•alternate•path•for•other•languages•to•target•the•browser's•runtime•environment•without•having•to•first•pass•through•JavaScript.•Essentially,•if•WASM•takes•off,•JS•engines•will•grow•an•extra•capability•to•execute•a•binary•format•of•code•that•can•be•seen•as•somewhat•similar•to•a•bytecode•(like•that•which•runs•on•the•JVM).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (376 > 79)

es6 & beyond/ch8.md
| 409| WASM•proposes•a•format•for•a•binary•representation•of•a•highly•compressed•AST•(syntax•tree)•of•code,•which•can•then•give•instructions•directly•to•the•JS•engine•and•its•underpinnings,•without•having•to•be•parsed•by•JS,•or•even•behave•by•the•rules•of•JS.•Languages•like•C•or•C++•can•be•compiled•directly•to•the•WASM•format•instead•of•ASM.js,•and•gain•an•extra•speed•advantage•by•skipping•the•JS•parsing.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (401 > 79)

es6 & beyond/ch8.md
| 411| The•near•term•for•WASM•is•to•have•parity•with•ASM.js•and•indeed•JS.•But•eventually,•it's•expected•that•WASM•would•grow•new•capabilities•that•surpass•anything•JS•could•do.•For•example,•the•pressure•for•JS•to•evolve•radical•features•like•threads•--•a•change•that•would•certainly•send•major•shockwaves•through•the•JS•ecosystem•--•has•a•more•hopeful•future•as•a•future•WASM•extension,•relieving•the•pressure•to•change•JS.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (417 > 79)

es6 & beyond/ch8.md
| 413| In•fact,•this•new•roadmap•opens•up•many•new•roads•for•many•languages•to•target•the•web•runtime.•That's•an•exciting•new•future•path•for•the•web•platform!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (152 > 79)

es6 & beyond/ch8.md
| 415| What•does•it•mean•for•JS?•Will•JS•become•irrelevant•or•"die"?•Absolutely•not.•ASM.js•will•likely•not•see•much•of•a•future•beyond•the•next•couple•of•years,•but•the•majority•of•JS•is•quite•safely•anchored•in•the•web•platform•story.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (229 > 79)

es6 & beyond/ch8.md
| 417| Proponents•of•WASM•suggest•its•success•will•mean•that•the•design•of•JS•will•be•protected•from•pressures•that•would•have•eventually•stretched•it•beyond•assumed•breaking•points•of•reasonability.•It•is•projected•that•WASM•will•become•the•preferred•target•for•high-performance•parts•of•applications,•as•authored•in•any•of•a•myriad•of•different•languages.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (350 > 79)

es6 & beyond/ch8.md
| 419| Interestingly,•JavaScript•is•one•of•the•lesser•likely•languages•to•target•WASM•in•the•future.•There•may•be•future•changes•that•carve•out•subsets•of•JS•that•might•be•tenable•for•such•targeting,•but•that•path•doesn't•seem•high•on•the•priority•list.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (246 > 79)

es6 & beyond/ch8.md
| 421| While•JS•likely•won't•be•much•of•a•WASM•funnel,•JS•code•and•WASM•code•will•be•able•to•interoperate•in•the•most•significant•ways,•just•as•naturally•as•current•module•interactions.•You•can•imagine•calling•a•JS•function•like•`foo()`•and•having•that•actually•invoke•a•WASM•function•of•that•name•with•the•power•to•run•well•outside•the•constraints•of•the•rest•of•your•JS.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (365 > 79)

es6 & beyond/ch8.md
| 423| Things•which•are•currently•written•in•JS•will•probably•continue•to•always•be•written•in•JS,•at•least•for•the•foreseeable•future.•Things•which•are•transpiled•to•JS•will•probably•eventually•at•least•consider•targeting•WASM•instead.•For•things•which•need•the•utmost•in•performance•with•minimal•tolerance•for•layers•of•abstraction,•the•likely•choice•will•be•to•find•a•suitable•non-JS•language•to•author•in,•then•targeting•WASM.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (423 > 79)

es6 & beyond/ch8.md
| 425| There's•a•good•chance•this•shift•will•be•slow,•and•will•be•years•in•the•making.•WASM•landing•in•all•the•major•browser•platforms•is•probably•a•few•years•out•at•best.•In•the•meantime,•the•WASM•project•(https://github.com/WebAssembly)•has•an•early•polyfill•to•demonstrate•proof-of-concept•for•its•basic•tenets.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (307 > 79)

es6 & beyond/ch8.md
| 427| But•as•time•goes•on,•and•as•WASM•learns•new•non-JS•tricks,•it's•not•too•much•a•stretch•of•imagination•to•see•some•currently-JS•things•being•refactored•to•a•WASM-targetable•language.•For•example,•the•performance•sensitive•parts•of•frameworks,•game•engines,•and•other•heavily•used•tools•might•very•well•benefit•from•such•a•shift.•Developers•using•these•tools•in•their•web•applications•likely•won't•notice•much•difference•in•usage•or•integration,•but•will•just•automatically•take•advantage•of•the•performance•and•capabilities.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (523 > 79)

es6 & beyond/ch8.md
| 429| What's•certain•is•that•the•more•real•WASM•becomes•over•time,•the•more•it•means•to•the•trajectory•and•design•of•JavaScript.•It's•perhaps•one•of•the•most•important•"beyond•ES6"•topics•developers•should•keep•an•eye•on.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (215 > 79)

es6 & beyond/ch8.md
| 433| If•all•the•other•books•in•this•series•essentially•propose•this•challenge,•"you•(may)•not•know•JS•(as•much•as•you•thought),"•this•book•has•instead•suggested,•"you•don't•know•JS•anymore."•The•book•has•covered•a•ton•of•new•stuff•added•to•the•language•in•ES6.•It's•an•exciting•collection•of•new•language•features•and•paradigms•that•will•forever•improve•our•JS•programs.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (365 > 79)

es6 & beyond/ch8.md
| 435| But•JS•is•not•done•with•ES6!•Not•even•close.•There's•already•quite•a•few•features•in•various•stages•of•development•for•the•"beyond•ES6"•timeframe.•In•this•chapter,•we•briefly•looked•at•some•of•the•most•likely•candidates•to•land•in•JS•very•soon.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (244 > 79)

es6 & beyond/ch8.md
| 437| `async•function`s•are•powerful•syntactic•sugar•on•top•of•the•generators•+•promises•pattern•(see•Chapter•4).•`Object.observe(..)`•adds•direct•native•support•for•observing•object•change•events,•which•is•critical•for•implementing•data•binding.•The•`**`•exponentiation•operator,•`...`•for•object•properties,•and•`Array#includes(..)`•are•all•simple•but•helpful•improvements•to•existing•mechanisms.•Finally,•SIMD•ushers•in•a•new•era•in•the•evolution•of•high•performance•JS.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (467 > 79)

es6 & beyond/ch8.md
| 439| Cliché•as•it•sounds,•the•future•of•JS•is•really•bright!•The•challenge•of•this•series,•and•indeed•of•this•book,•is•incumbent•on•every•reader•now.•What•are•you•waiting•for?•It's•time•to•get•learning•and•exploring!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (211 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/scope & closures/apA.md
|    |++++| /app/scope & closures/apA.md
|   1|   1| # You Don't Know JS: Scope & Closures
|    |   2|+
|   2|   3| # Appendix A: Dynamic Scope
|   3|   4| 
|   4|   5| In Chapter 2, we talked about "Dynamic Scope" as a contrast to the "Lexical Scope" model, which is how scope works in JavaScript (and in fact, most other languages).

scope & closures/apA.md
|   4| In•Chapter•2,•we•talked•about•"Dynamic•Scope"•as•a•contrast•to•the•"Lexical•Scope"•model,•which•is•how•scope•works•in•JavaScript•(and•in•fact,•most•other•languages).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (165 > 79)

scope & closures/apA.md
|   6| We•will•briefly•examine•dynamic•scope,•to•hammer•home•the•contrast.•But,•more•importantly,•dynamic•scope•actually•is•a•near•cousin•to•another•mechanism•(`this`)•in•JavaScript,•which•we•covered•in•the•"*this•&•Object•Prototypes*"•title•of•this•book•series.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (255 > 79)

scope & closures/apA.md
|   8| As•we•saw•in•Chapter•2,•lexical•scope•is•the•set•of•rules•about•how•the•*Engine*•can•look-up•a•variable•and•where•it•will•find•it.•The•key•characteristic•of•lexical•scope•is•that•it•is•defined•at•author-time,•when•the•code•is•written•(assuming•you•don't•cheat•with•`eval()`•or•`with`).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (285 > 79)

scope & closures/apA.md
|  10| Dynamic•scope•seems•to•imply,•and•for•good•reason,•that•there's•a•model•whereby•scope•can•be•determined•dynamically•at•runtime,•rather•than•statically•at•author-time.•That•is•in•fact•the•case.•Let's•illustrate•via•code:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (219 > 79)

scope & closures/apA.md
|  27| Lexical•scope•holds•that•the•RHS•reference•to•`a`•in•`foo()`•will•be•resolved•to•the•global•variable•`a`,•which•will•result•in•value•`2`•being•output.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (150 > 79)

scope & closures/apA.md
|  29| Dynamic•scope,•by•contrast,•doesn't•concern•itself•with•how•and•where•functions•and•scopes•are•declared,•but•rather•**where•they•are•called•from**.•In•other•words,•the•scope•chain•is•based•on•the•call-stack,•not•the•nesting•of•scopes•in•code.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (242 > 79)

scope & closures/apA.md
|  31| So,•if•JavaScript•had•dynamic•scope,•when•`foo()`•is•executed,•**theoretically**•the•code•below•would•instead•result•in•`3`•as•the•output.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (138 > 79)

scope & closures/apA.md
|  48| How•can•this•be?•Because•when•`foo()`•cannot•resolve•the•variable•reference•for•`a`,•instead•of•stepping•up•the•nested•(lexical)•scope•chain,•it•walks•up•the•call-stack,•to•find•where•`foo()`•was•*called•from*.•Since•`foo()`•was•called•from•`bar()`,•it•checks•the•variables•in•scope•for•`bar()`,•and•finds•an•`a`•there•with•value•`3`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (334 > 79)

scope & closures/apA.md
|  52| But•that's•just•because•you've•probably•only•ever•worked•on•(or•at•least•deeply•considered)•code•which•is•lexically•scoped.•So•dynamic•scoping•seems•foreign.•If•you•had•only•ever•written•code•in•a•dynamically•scoped•language,•it•would•seem•natural,•and•lexical•scope•would•be•the•odd-ball.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (289 > 79)

scope & closures/apA.md
|  54| To•be•clear,•JavaScript•**does•not,•in•fact,•have•dynamic•scope**.•It•has•lexical•scope.•Plain•and•simple.•But•the•`this`•mechanism•is•kind•of•like•dynamic•scope.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (162 > 79)

scope & closures/apA.md
|  56| The•key•contrast:•**lexical•scope•is•write-time,•whereas•dynamic•scope•(and•`this`!)•are•runtime**.•Lexical•scope•cares•*where•a•function•was•declared*,•but•dynamic•scope•cares•where•a•function•was•*called•from*.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (212 > 79)

scope & closures/apA.md
|  58| Finally:•`this`•cares•*how•a•function•was•called*,•which•shows•how•closely•related•the•`this`•mechanism•is•to•the•idea•of•dynamic•scoping.•To•dig•more•into•`this`,•read•the•title•"*this•&•Object•Prototypes*".
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (208 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/types & grammar/apB.md
|    |++++| /app/types & grammar/apB.md
|   1|   1| # You Don't Know JS: Types & Grammar
|    |   2|+
|   2|   3| # Appendix B: Acknowledgments
|   3|   4| 
|   4|   5| I have many people to thank for making this book title and the overall series happen.

types & grammar/apB.md
|   4| I•have•many•people•to•thank•for•making•this•book•title•and•the•overall•series•happen.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (85 > 79)

types & grammar/apB.md
|   6| First,•I•must•thank•my•wife•Christen•Simpson,•and•my•two•kids•Ethan•and•Emily,•for•putting•up•with•Dad•always•pecking•away•at•the•computer.•Even•when•not•writing•books,•my•obsession•with•JavaScript•glues•my•eyes•to•the•screen•far•more•than•it•should.•That•time•I•borrow•from•my•family•is•the•reason•these•books•can•so•deeply•and•completely•explain•JavaScript•to•you,•the•reader.•I•owe•my•family•everything.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (406 > 79)

types & grammar/apB.md
|   8| I'd•like•to•thank•my•editors•at•O'Reilly,•namely•Simon•St.Laurent•and•Brian•MacDonald,•as•well•as•the•rest•of•the•editorial•and•marketing•staff.•They•are•fantastic•to•work•with,•and•have•been•especially•accommodating•during•this•experiment•into•"open•source"•book•writing,•editing,•and•production.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (297 > 79)

types & grammar/apB.md
|  10| Thank•you•to•the•many•folks•who•have•participated•in•making•this•book•series•better•by•providing•editorial•suggestions•and•corrections,•including•Shelley•Powers,•Tim•Ferro,•Evan•Borden,•Forrest•L.•Norvell,•Jennifer•Davis,•Jesse•Harlin,•and•many•others.•A•big•thank•you•to•David•Walsh•for•writing•the•Foreword•for•this•title.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (324 > 79)

types & grammar/apB.md
|  12| Thank•you•to•the•countless•folks•in•the•community,•including•members•of•the•TC39•committee,•who•have•shared•so•much•knowledge•with•the•rest•of•us,•and•especially•tolerated•my•incessant•questions•and•explorations•with•patience•and•detail.•John-David•Dalton,•Juriy•"kangax"•Zaytsev,•Mathias•Bynens,•Axel•Rauschmayer,•Nicholas•Zakas,•Angus•Croll,•Reginald•Braithwaite,•Dave•Herman,•Brendan•Eich,•Allen•Wirfs-Brock,•Bradley•Meck,•Domenic•Denicola,•David•Walsh,•Tim•Disney,•Peter•van•der•Zee,•Andrea•Giammarchi,•Kit•Cambridge,•Eric•Elliott,•and•so•many•others,•I•can't•even•scratch•the•surface.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (589 > 79)

types & grammar/apB.md
|  14| The•*You•Don't•Know•JS*•book•series•was•born•on•Kickstarter,•so•I•also•wish•to•thank•all•my•(nearly)•500•generous•backers,•without•whom•this•book•series•could•not•have•happened:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (177 > 79)

types & grammar/apB.md
|  16| >•Jan•Szpila,•nokiko,•Murali•Krishnamoorthy,•Ryan•Joy,•Craig•Patchett,•pdqtrader,•Dale•Fukami,•ray•hatfield,•R0drigo•Perez•[Mx],•Dan•Petitt,•Jack•Franklin,•Andrew•Berry,•Brian•Grinstead,•Rob•Sutherland,•Sergi•Meseguer,•Phillip•Gourley,•Mark•Watson,•Jeff•Carouth,•Alfredo•Sumaran,•Martin•Sachse,•Marcio•Barrios,•Dan,•AimelyneM,•Matt•Sullivan,•Delnatte•Pierre-Antoine,•Jake•Smith,•Eugen•Tudorancea,•Iris,•David•Trinh,•simonstl,•Ray•Daly,•Uros•Gruber,•Justin•Myers,•Shai•Zonis,•Mom•&•Dad,•Devin•Clark,•Dennis•Palmer,•Brian•Panahi•Johnson,•Josh•Marshall,•Marshall,•Dennis•Kerr,•Matt•Steele,•Erik•Slagter,•Sacah,•Justin•Rainbow,•Christian•Nilsson,•Delapouite,•D.Pereira,•Nicolas•Hoizey,•George•V.•Reilly,•Dan•Reeves,•Bruno•Laturner,•Chad•Jennings,•Shane•King,•Jeremiah•Lee•Cohick,•od3n,•Stan•Yamane,•Marko•Vucinic,•Jim•B,•Stephen•Collins,•Ægir•Þorsteinsson,•Eric•Pederson,•Owain,•Nathan•Smith,•Jeanetteurphy,•Alexandre•ELISÉ,•Chris•Peterson,•Rik•Watson,•Luke•Matthews,•Justin•Lowery,•Morten•Nielsen,•Vernon•Kesner,•Chetan•Shenoy,•Paul•Tregoing,•Marc•Grabanski,•Dion•Almaer,•Andrew•Sullivan,•Keith•Elsass,•Tom•Burke,•Brian•Ashenfelter,•David•Stuart,•Karl•Swedberg,•Graeme,•Brandon•Hays,•John•Christopher,•Gior,•manoj•reddy,•Chad•Smith,•Jared•Harbour,•Minoru•TODA,•Chris•Wigley,•Daniel•Mee,•Mike,•Handyface,•Alex•Jahraus,•Carl•Furrow,•Rob•Foulkrod,•Max•Shishkin,•Leigh•Penny•Jr.,•Robert•Ferguson,•Mike•van•Hoenselaar,•Hasse•Schougaard,•rajan•venkataguru,•Jeff•Adams,•Trae•Robbins,•Rolf•Langenhuijzen,•Jorge•Antunes,•Alex•Koloskov,•Hugh•Greenish,•Tim•Jones,•Jose•Ochoa,•Michael•Brennan-White,•Naga•Harish•Muvva,•Barkóczi•Dávid,•Kitt•Hodsden,•Paul•McGraw,•Sascha•Goldhofer,•Andrew•Metcalf,•Markus•Krogh,•Michael•Mathews,•Matt•Jared,•Juanfran,•Georgie•Kirschner,•Kenny•Lee,•Ted•Zhang,•Amit•Pahwa,•Inbal•Sinai,•Dan•Raine,•Schabse•Laks,•Michael•Tervoort,•Alexandre•Abreu,•Alan•Joseph•Williams,•NicolasD,•Cindy•Wong,•Reg•Braithwaite,•LocalPCGuy,•Jon•Friskics,•Chris•Merriman,•John•Pena,•Jacob•Katz,•Sue•Lockwood,•Magnus•Johansson,•Jeremy•Crapsey,•Grzegorz•Pawłowski,•nico•nuzzaci,•Christine•Wilks,•Hans•Bergren,•charles•montgomery,•Ariel•בר-לבב•Fogel,•Ivan•Kolev,•Daniel•Campos,•Hugh•Wood,•Christian•Bradford,•Frédéric•Harper,•Ionuţ•Dan•Popa,•Jeff•Trimble,•Rupert•Wood,•Trey•Carrico,•Pancho•Lopez,•Joël•kuijten,•Tom•A•Marra,•Jeff•Jewiss,•Jacob•Rios,•Paolo•Di•Stefano,•Soledad•Penades,•Chris•Gerber,•Andrey•Dolganov,•Wil•Moore•III,•Thomas•Martineau,•Kareem,•Ben•Thouret,•Udi•Nir,•Morgan•Laupies,•jory•carson-burson,•Nathan•L•Smith,•Eric•Damon•Walters,•Derry•Lozano-Hoyland,•Geoffrey•Wiseman,•mkeehner,•KatieK,•Scott•MacFarlane,•Brian•LaShomb,•Adrien•Mas,•christopher•ross,•Ian•Littman,•Dan•Atkinson,•Elliot•Jobe,•Nick•Dozier,•Peter•Wooley,•John•Hoover,•dan,•Martin•A.•Jackson,•Héctor•Fernando•Hurtado,•andy•ennamorato,•Paul•Seltmann,•Melissa•Gore,•Dave•Pollard,•Jack•Smith,•Philip•Da•Silva,•Guy•Israeli,•@megalithic,•Damian•Crawford,•Felix•Gliesche,•April•Carter•Grant,•Heidi,•jim•tierney,•Andrea•Giammarchi,•Nico•Vignola,•Don•Jones,•Chris•Hartjes,•Alex•Howes,•john•gibbon,•David•J.•Groom,•BBox,•Yu•'Dilys'•Sun,•Nate•Steiner,•Brandon•Satrom,•Brian•Wyant,•Wesley•Hales,•Ian•Pouncey,•Timothy•Kevin•Oxley,•George•Terezakis,•sanjay•raj,•Jordan•Harband,•Marko•McLion,•Wolfgang•Kaufmann,•Pascal•Peuckert,•Dave•Nugent,•Markus•Liebelt,•Welling•Guzman,•Nick•Cooley,•Daniel•Mesquita,•Robert•Syvarth,•Chris•Coyier,•Rémy•Bach,•Adam•Dougal,•Alistair•Duggin,•David•Loidolt,•Ed•Richer,•Brian•Chenault,•GoldFire•Studios,•Carles•Andrés,•Carlos•Cabo,•Yuya•Saito,•roberto•ricardo,•Barnett•Klane,•Mike•Moore,•Kevin•Marx,•Justin•Love,•Joe•Taylor,•Paul•Dijou,•Michael•Kohler,•Rob•Cassie,•Mike•Tierney,•Cody•Leroy•Lindley,•tofuji,•Shimon•Schwartz,•Raymond,•Luc•De•Brouwer,•David•Hayes,•Rhys•Brett-Bowen,•Dmitry,•Aziz•Khoury,•Dean,•Scott•Tolinski•-•Level•Up,•Clement•Boirie,•Djordje•Lukic,•Anton•Kotenko,•Rafael•Corral,•Philip•Hurwitz,•Jonathan•Pidgeon,•Jason•Campbell,•Joseph•C.,•SwiftOne,•Jan•Hohner,•Derick•Bailey,•getify,•Daniel•Cousineau,•Chris•Charlton,•Eric•Turner,•David•Turner,•Joël•Galeran,•Dharma•Vagabond,•adam,•Dirk•van•Bergen,•dave•♥♫★•furf,•Vedran•Zakanj,•Ryan•McAllen,•Natalie•Patrice•Tucker,•Eric•J.•Bivona,•Adam•Spooner,•Aaron•Cavano,•Kelly•Packer,•Eric•J,•Martin•Drenovac,•Emilis,•Michael•Pelikan,•Scott•F.•Walter,•Josh•Freeman,•Brandon•Hudgeons,•vijay•chennupati,•Bill•Glennon,•Robin•R.,•Troy•Forster,•otaku_coder,•Brad,•Scott,•Frederick•Ostrander,•Adam•Brill,•Seb•Flippence,•Michael•Anderson,•Jacob,•Adam•Randlett,•Standard,•Joshua•Clanton,•Sebastian•Kouba,•Chris•Deck,•SwordFire,•Hannes•Papenberg,•Richard•Woeber,•hnzz,•Rob•Crowther,•Jedidiah•Broadbent,•Sergey•Chernyshev,•Jay-Ar•Jamon,•Ben•Combee,•luciano•bonachela,•Mark•Tomlinson,•Kit•Cambridge,•Michael•Melgares,•Jacob•Adams,•Adrian•Bruinhout,•Bev•Wieber,•Scott•Puleo,•Thomas•Herzog,•April•Leone,•Daniel•Mizieliński,•Kees•van•Ginkel,•Jon•Abrams,•Erwin•Heiser,•Avi•Laviad,•David•newell,•Jean-Francois•Turcot,•Niko•Roberts,•Erik•Dana,•Charles•Neill,•Aaron•Holmes,•Grzegorz•Ziółkowski,•Nathan•Youngman,•Timothy,•Jacob•Mather,•Michael•Allan,•Mohit•Seth,•Ryan•Ewing,•Benjamin•Van•Treese,•Marcelo•Santos,•Denis•Wolf,•Phil•Keys,•Chris•Yung,•Timo•Tijhof,•Martin•Lekvall,•Agendine,•Greg•Whitworth,•Helen•Humphrey,•Dougal•Campbell,•Johannes•Harth,•Bruno•Girin,•Brian•Hough,•Darren•Newton,•Craig•McPheat,•Olivier•Tille,•Dennis•Roethig,•Mathias•Bynens,•Brendan•Stromberger,•sundeep,•John•Meyer,•Ron•Male,•John•F•Croston•III,•gigante,•Carl•Bergenhem,•B.J.•May,•Rebekah•Tyler,•Ted•Foxberry,•Jordan•Reese,•Terry•Suitor,•afeliz,•Tom•Kiefer,•Darragh•Duffy,•Kevin•Vanderbeken,•Andy•Pearson,•Simon•Mac•Donald,•Abid•Din,•Chris•Joel,•Tomas•Theunissen,•David•Dick,•Paul•Grock,•Brandon•Wood,•John•Weis,•dgrebb,•Nick•Jenkins,•Chuck•Lane,•Johnny•Megahan,•marzsman,•Tatu•Tamminen,•Geoffrey•Knauth,•Alexander•Tarmolov,•Jeremy•Tymes,•Chad•Auld,•Sean•Parmelee,•Rob•Staenke,•Dan•Bender,•Yannick•derwa,•Joshua•Jones,•Geert•Plaisier,•Tom•LeZotte,•Christen•Simpson,•Stefan•Bruvik,•Justin•Falcone,•Carlos•Santana,•Michael•Weiss,•Pablo•Villoslada,•Peter•deHaan,•Dimitris•Iliopoulos,•seyDoggy,•Adam•Jordens,•Noah•Kantrowitz,•Amol•M,•Matthew•Winnard,•Dirk•Ginader,•Phinam•Bui,•David•Rapson,•Andrew•Baxter,•Florian•Bougel,•Michael•George,•Alban•Escalier,•Daniel•Sellers,•Sasha•Rudan,•John•Green,•Robert•Kowalski,•David•I.•Teixeira•(@ditma,•Charles•Carpenter,•Justin•Yost,•Sam•S,•Denis•Ciccale,•Kevin•Sheurs,•Yannick•Croissant,•Pau•Fracés,•Stephen•McGowan,•Shawn•Searcy,•Chris•Ruppel,•Kevin•Lamping,•Jessica•Campbell,•Christopher•Schmitt,•Sablons,•Jonathan•Reisdorf,•Bunni•Gek,•Teddy•Huff,•Michael•Mullany,•Michael•Fürstenberg,•Carl•Henderson,•Rick•Yoesting,•Scott•Nichols,•Hernán•Ciudad,•Andrew•Maier,•Mike•Stapp,•Jesse•Shawl,•Sérgio•Lopes,•jsulak,•Shawn•Price,•Joel•Clermont,•Chris•Ridmann,•Sean•Timm,•Jason•Finch,•Aiden•Montgomery,•Elijah•Manor,•Derek•Gathright,•Jesse•Harlin,•Dillon•Curry,•Courtney•Myers,•Diego•Cadenas,•Arne•de•Bree,•João•Paulo•Dubas,•James•Taylor,•Philipp•Kraeutli,•Mihai•Păun,•Sam•Gharegozlou,•joshjs,•Matt•Murchison,•Eric•Windham,•Timo•Behrmann,•Andrew•Hall,•joshua•price,•Théophile•Villard
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (7114 > 79)

types & grammar/apB.md
|  18| This•book•series•is•being•produced•in•an•open•source•fashion,•including•editing•and•production.•We•owe•GitHub•a•debt•of•gratitude•for•making•that•sort•of•thing•possible•for•the•community!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (187 > 79)

types & grammar/apB.md
|  20| Thank•you•again•to•all•the•countless•folks•I•didn't•name•but•who•I•nonetheless•owe•thanks.•May•this•book•series•be•"owned"•by•all•of•us•and•serve•to•contribute•to•increasing•awareness•and•understanding•of•the•JavaScript•language,•to•the•benefit•of•all•current•and•future•community•contributors.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (294 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/types & grammar/foreword.md
|    |++++| /app/types & grammar/foreword.md
|   1|   1| # You Don't Know JS: Types & Grammar
|    |   2|+
|   2|   3| # Foreword
|   3|   4| 
|   4|   5| It was once said, "JavaScript is the only language developers don't learn to use before using it."
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/types & grammar/foreword.md
|    |++++| /app/types & grammar/foreword.md
|  16|  16| Enjoy Types and Grammar and don't let it get too far away from your desk!
|  17|  17| 
|  18|  18| David Walsh<br>
|  19|    |-[http://davidwalsh.name](http://davidwalsh.name), [@davidwalshblog](http://twitter.com/davidwalshblog)<br>
|    |  19|+<http://davidwalsh.name>, [@davidwalshblog](http://twitter.com/davidwalshblog)<br>
|  20|  20| Senior Web Developer, Mozilla

types & grammar/foreword.md
|   4| It•was•once•said,•"JavaScript•is•the•only•language•developers•don't•learn•to•use•before•using•it."
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (98 > 79)

types & grammar/foreword.md
|   6| I•laugh•each•time•I•hear•that•quote•because•it•was•true•for•me•and•I•suspect•it•was•for•many•other•developers.•JavaScript,•and•maybe•even•CSS•and•HTML,•were•not•a•core•computer•science•language•taught•at•college•in•the•Internet's•early•days,•so•personal•development•was•very•much•based•on•the•budding•developer's•search•and•"view•source"•abilities•to•piece•together•these•basic•web•languages.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (392 > 79)

types & grammar/foreword.md
|   8| I•still•remember•my•first•high•school•website•project.•The•task•was•to•create•any•type•of•web•store,•and•me•being•a•James•Bond•fan,•I•decided•to•create•a•Goldeneye•store.•It•had•everything:•the•Goldeneye•midi•theme•song•playing•in•the•background,•a•JavaScript-powered•crosshairs•following•the•mouse•around•the•screen,•and•a•gunshot•sound•that•played•upon•every•click.•Q•would•have•been•proud•of•this•masterpiece•of•a•website.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (425 > 79)

types & grammar/foreword.md
|  10| I•tell•that•story•because•I•did•back•then•what•many•developers•are•doing•today:•I•copied•and•pasted•chunks•of•JavaScript•code•into•my•project•without•having•a•clue•what's•actually•happening.•The•widespread•use•of•JavaScript•toolkits•like•jQuery•have,•in•their•own•small•way,•perpetuated•this•pattern•of•nonlearning•of•core•JavaScript.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (334 > 79)

types & grammar/foreword.md
|  12| I'm•not•disparaging•JavaScript•toolkit•use;•after•all,•I'm•a•member•of•the•MooTools•JavaScript•team!•But•the•reason•JavaScript•toolkits•are•as•powerful•as•they•are•is•because•their•developers•know•the•fundamentals,•and•their•"gotchas,"•and•apply•them•magnificently.•As•useful•as•these•toolkits•are,•it's•still•incredibly•important•to•know•the•basics•of•the•language,•and•with•books•like•Kyle•Simpson's•*You•Don't•Know•JS*•series,•there's•no•excuse•not•to•learn•them.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (466 > 79)

types & grammar/foreword.md
|  14| *Types•and•Grammar*,•the•third•installment•of•the•series,•is•an•excellent•look•at•the•core•JavaScript•fundamentals•that•copy•and•paste•and•JavaScript•toolkits•don't•and•could•never•teach•you.•Coercion•and•its•pitfalls,•natives•as•constructors,•and•the•whole•gamut•of•JavaScript•basics•are•thoroughly•explained•with•focused•code•examples.•Like•the•other•books•in•this•series,•Kyle•cuts•straight•to•the•point:•no•fluff•and•word-smithing•--•exactly•the•type•of•tech•book•I•love.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (475 > 79)

types & grammar/foreword.md
|  19| [http://davidwalsh.name](http://davidwalsh.name),•[@davidwalshblog](http://twitter.com/davidwalshblog)<br>
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (106 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/README.md
|    |++++| /app/README.md
|   2|   2| 
|   3|   3| This is a series of books diving deep into the core mechanisms of the JavaScript language. The first edition of the series is now complete.
|   4|   4| 
|   5|    |-<a href="http://www.ebooks.com/1993212/you-don-t-know-js-up-going/simpson-kyle/"><img src="up %26 going/cover.jpg" width="75"></a>&nbsp;
|   6|    |-<a href="http://www.ebooks.com/1647631/you-don-t-know-js-scope-closures/simpson-kyle/"><img src="scope %26 closures/cover.jpg" width="75"></a>&nbsp;
|   7|    |-<a href="http://www.ebooks.com/1734321/you-don-t-know-js-this-object-prototypes/simpson-kyle/"><img src="this %26 object prototypes/cover.jpg" width="75"></a>&nbsp;
|   8|    |-<a href="http://www.ebooks.com/1935541/you-don-t-know-js-types-grammar/simpson-kyle/"><img src="types %26 grammar/cover.jpg" width="75"></a>&nbsp;
|   9|    |-<a href="http://www.ebooks.com/1977375/you-don-t-know-js-async-performance/simpson-kyle/"><img src="async %26 performance/cover.jpg" width="75"></a>&nbsp;
|    |   5|+<a href="http://www.ebooks.com/1993212/you-don-t-know-js-up-going/simpson-kyle/"><img src="up %26 going/cover.jpg" width="75"></a> 
|    |   6|+<a href="http://www.ebooks.com/1647631/you-don-t-know-js-scope-closures/simpson-kyle/"><img src="scope %26 closures/cover.jpg" width="75"></a> 
|    |   7|+<a href="http://www.ebooks.com/1734321/you-don-t-know-js-this-object-prototypes/simpson-kyle/"><img src="this %26 object prototypes/cover.jpg" width="75"></a> 
|    |   8|+<a href="http://www.ebooks.com/1935541/you-don-t-know-js-types-grammar/simpson-kyle/"><img src="types %26 grammar/cover.jpg" width="75"></a> 
|    |   9|+<a href="http://www.ebooks.com/1977375/you-don-t-know-js-async-performance/simpson-kyle/"><img src="async %26 performance/cover.jpg" width="75"></a> 
|  10|  10| <a href="http://www.ebooks.com/2481820/you-don-t-know-js-es6-beyond/simpson-kyle/"><img src="es6 %26 beyond/cover.jpg" width="75"></a>
|  11|  11| 
|  12|  12| Please feel free to contribute to the quality of this content by submitting PR's for improvements to code snippets, explanations, etc. While typo fixes are welcomed, they will likely be caught through normal editing processes, and are thus not necessarily as important for this repository.
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/README.md
|    |++++| /app/README.md
|  15|  15| 
|  16|  16| ## Titles
|  17|  17| 
|  18|    |-* Read online (free!): ["Up & Going"](up\%20&\%20going/README.md#you-dont-know-js-up--going), Published: [Buy Now](http://www.ebooks.com/1993212/you-don-t-know-js-up-going/simpson-kyle/) in print, but the ebook format is free!
|  19|    |-* Read online (free!): ["Scope & Closures"](scope\%20&\%20closures/README.md#you-dont-know-js-scope--closures), Published: [Buy Now](http://www.ebooks.com/1647631/you-don-t-know-js-scope-closures/simpson-kyle/)
|  20|    |-* Read online (free!): ["this & Object Prototypes"](this\%20&\%20object\%20prototypes/README.md#you-dont-know-js-this--object-prototypes), Published: [Buy Now](http://www.ebooks.com/1734321/you-don-t-know-js-this-object-prototypes/simpson-kyle/)
|  21|    |-* Read online (free!): ["Types & Grammar"](types\%20&\%20grammar/README.md#you-dont-know-js-types--grammar), Published: [Buy Now](http://www.ebooks.com/1935541/you-don-t-know-js-types-grammar/simpson-kyle/)
|  22|    |-* Read online (free!): ["Async & Performance"](async\%20&\%20performance/README.md#you-dont-know-js-async--performance), Published: [Buy Now](http://www.ebooks.com/1977375/you-don-t-know-js-async-performance/simpson-kyle/)
|  23|    |-* Read online (free!): ["ES6 & Beyond"](es6\%20&\%20beyond/README.md#you-dont-know-js-es6--beyond), Published: [Buy Now](http://www.ebooks.com/2481820/you-don-t-know-js-es6-beyond/simpson-kyle/)
|    |  18|+- Read online (free!): ["Up & Going"](up\%20&\%20going/README.md#you-dont-know-js-up--going), Published: [Buy Now](http://www.ebooks.com/1993212/you-don-t-know-js-up-going/simpson-kyle/) in print, but the ebook format is free!
|    |  19|+- Read online (free!): ["Scope & Closures"](scope\%20&\%20closures/README.md#you-dont-know-js-scope--closures), Published: [Buy Now](http://www.ebooks.com/1647631/you-don-t-know-js-scope-closures/simpson-kyle/)
|    |  20|+- Read online (free!): ["this & Object Prototypes"](this\%20&\%20object\%20prototypes/README.md#you-dont-know-js-this--object-prototypes), Published: [Buy Now](http://www.ebooks.com/1734321/you-don-t-know-js-this-object-prototypes/simpson-kyle/)
|    |  21|+- Read online (free!): ["Types & Grammar"](types\%20&\%20grammar/README.md#you-dont-know-js-types--grammar), Published: [Buy Now](http://www.ebooks.com/1935541/you-don-t-know-js-types-grammar/simpson-kyle/)
|    |  22|+- Read online (free!): ["Async & Performance"](async\%20&\%20performance/README.md#you-dont-know-js-async--performance), Published: [Buy Now](http://www.ebooks.com/1977375/you-don-t-know-js-async-performance/simpson-kyle/)
|    |  23|+- Read online (free!): ["ES6 & Beyond"](es6\%20&\%20beyond/README.md#you-dont-know-js-es6--beyond), Published: [Buy Now](http://www.ebooks.com/2481820/you-don-t-know-js-es6-beyond/simpson-kyle/)
|  24|  24| 
|  25|  25| ## Publishing
|  26|  26| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/README.md
|    |++++| /app/README.md
|  30|  30| 
|  31|  31| If you'd like to contribute financially towards the effort (or any of my other OSS work) aside from purchasing the books, I do have a [patreon](https://www.patreon.com/getify) that I would always appreciate your generosity towards.
|  32|  32| 
|  33|    |-<a href="https://www.patreon.com/getify">[![patreon.png](https://s11.postimg.org/axpzguh77/patreon.png)](https://www.patreon.com/getify)</a>
|    |  33|+<a href="https://www.patreon.com/getify">\[![patreon.png](https://s11.postimg.org/axpzguh77/patreon.png)](https&#x3A;//www.patreon.com/getify)</a>
|  34|  34| 
|  35|  35| ## In-person Training
|  36|  36| 

README.md
|   3| This•is•a•series•of•books•diving•deep•into•the•core•mechanisms•of•the•JavaScript•language.•The•first•edition•of•the•series•is•now•complete.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (139 > 79)

README.md
|   5| <a•href="http://www.ebooks.com/1993212/you-don-t-know-js-up-going/simpson-kyle/"><img•src="up•%26•going/cover.jpg"•width="75"></a>&nbsp;
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (136 > 79)

README.md
|   6| <a•href="http://www.ebooks.com/1647631/you-don-t-know-js-scope-closures/simpson-kyle/"><img•src="scope•%26•closures/cover.jpg"•width="75"></a>&nbsp;
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (148 > 79)

README.md
|   7| <a•href="http://www.ebooks.com/1734321/you-don-t-know-js-this-object-prototypes/simpson-kyle/"><img•src="this•%26•object•prototypes/cover.jpg"•width="75"></a>&nbsp;
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (164 > 79)

README.md
|   8| <a•href="http://www.ebooks.com/1935541/you-don-t-know-js-types-grammar/simpson-kyle/"><img•src="types•%26•grammar/cover.jpg"•width="75"></a>&nbsp;
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (146 > 79)

README.md
|   9| <a•href="http://www.ebooks.com/1977375/you-don-t-know-js-async-performance/simpson-kyle/"><img•src="async•%26•performance/cover.jpg"•width="75"></a>&nbsp;
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (154 > 79)

README.md
|  10| <a•href="http://www.ebooks.com/2481820/you-don-t-know-js-es6-beyond/simpson-kyle/"><img•src="es6•%26•beyond/cover.jpg"•width="75"></a>
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (134 > 79)

README.md
|  12| Please•feel•free•to•contribute•to•the•quality•of•this•content•by•submitting•PR's•for•improvements•to•code•snippets,•explanations,•etc.•While•typo•fixes•are•welcomed,•they•will•likely•be•caught•through•normal•editing•processes,•and•are•thus•not•necessarily•as•important•for•this•repository.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (289 > 79)

README.md
|  14| **To•read•more•about•the•motivations•and•perspective•behind•this•book•series,•check•out•the•[Preface](preface.md).**
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (116 > 79)

README.md
|  18| *•Read•online•(free!):•["Up•&•Going"](up\%20&\%20going/README.md#you-dont-know-js-up--going),•Published:•[Buy•Now](http://www.ebooks.com/1993212/you-don-t-know-js-up-going/simpson-kyle/)•in•print,•but•the•ebook•format•is•free!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (226 > 79)

README.md
|  19| *•Read•online•(free!):•["Scope•&•Closures"](scope\%20&\%20closures/README.md#you-dont-know-js-scope--closures),•Published:•[Buy•Now](http://www.ebooks.com/1647631/you-don-t-know-js-scope-closures/simpson-kyle/)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (210 > 79)

README.md
|  20| *•Read•online•(free!):•["this•&•Object•Prototypes"](this\%20&\%20object\%20prototypes/README.md#you-dont-know-js-this--object-prototypes),•Published:•[Buy•Now](http://www.ebooks.com/1734321/you-don-t-know-js-this-object-prototypes/simpson-kyle/)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (245 > 79)

README.md
|  21| *•Read•online•(free!):•["Types•&•Grammar"](types\%20&\%20grammar/README.md#you-dont-know-js-types--grammar),•Published:•[Buy•Now](http://www.ebooks.com/1935541/you-don-t-know-js-types-grammar/simpson-kyle/)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (206 > 79)

README.md
|  22| *•Read•online•(free!):•["Async•&•Performance"](async\%20&\%20performance/README.md#you-dont-know-js-async--performance),•Published:•[Buy•Now](http://www.ebooks.com/1977375/you-don-t-know-js-async-performance/simpson-kyle/)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (222 > 79)

README.md
|  23| *•Read•online•(free!):•["ES6•&•Beyond"](es6\%20&\%20beyond/README.md#you-dont-know-js-es6--beyond),•Published:•[Buy•Now](http://www.ebooks.com/2481820/you-don-t-know-js-es6-beyond/simpson-kyle/)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (194 > 79)

README.md
|  27| These•books•are•being•released•here•as•drafts,•free•to•read,•but•are•also•being•edited,•produced,•and•published•through•O'Reilly.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (129 > 79)

README.md
|  29| If•you•like•the•content•you•find•here,•and•want•to•support•more•content•like•it,•please•purchase•the•books•once•they•are•available•for•sale,•through•your•normal•book•sources.•:)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (177 > 79)

README.md
|  31| If•you'd•like•to•contribute•financially•towards•the•effort•(or•any•of•my•other•OSS•work)•aside•from•purchasing•the•books,•I•do•have•a•[patreon](https://www.patreon.com/getify)•that•I•would•always•appreciate•your•generosity•towards.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (231 > 79)

README.md
|  33| <a•href="https://www.patreon.com/getify">[![patreon.png](https://s11.postimg.org/axpzguh77/patreon.png)](https://www.patreon.com/getify)</a>
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (140 > 79)

README.md
|  37| The•content•for•these•books•derives•heavily•from•a•series•of•training•materials•I•teach•professionally•(in•both•public•and•private-corporate•workshop•format):•"Deep•JavaScript•Foundations",•"Rethinking•Async",•and•"ES6:•The•Right•Parts"•workshops.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (247 > 79)

README.md
|  39| If•you•like•this•content•and•would•like•to•contact•me•regarding•conducting•training•on•these,•or•other•various•JS/HTML5/node.js•topics,•please•reach•out•to•me•through•email:•getify•@•gmail
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (188 > 79)

README.md
|  43| I•also•have•some•JS•training•material•available•in•on-demand•video•format.•I•teach•courses•through•[Frontend•Masters](https://FrontendMasters.com),•like•my•[Deep•JavaScript•Foundations](https://frontendmasters.com/courses/javascript-foundations/)•workshop.•You•can•find•[all•my•courses•here](https://frontendmasters.com/kyle-simpson/).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (335 > 79)

README.md
|  45| Some•of•those•courses•are•also•distributed•on•other•platforms,•like•Pluralsight,•Lynda.com,•and•O'Reilly•Safari•Online.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (119 > 79)

README.md
|  49| Any•contributions•you•make•to•this•effort•**are•of•course•greatly•appreciated**.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (80 > 79)

README.md
|  51| But•**PLEASE**•read•the•[Contributions•Guidelines](CONTRIBUTING.md)•carefully•before•submitting•a•PR.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (101 > 79)

README.md
|  57| <a•rel="license"•href="http://creativecommons.org/licenses/by-nc-nd/4.0/"><img•alt="Creative•Commons•License"•style="border-width:0"•src="https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png"•/></a><br•/>This•work•is•licensed•under•a•<a•rel="license"•href="http://creativecommons.org/licenses/by-nc-nd/4.0/">Creative•Commons•Attribution-NonCommercial-NoDerivs•4.0•Unported•License</a>.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (387 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/types & grammar/ch3.md
|    |++++| /app/types & grammar/ch3.md
|   1|   1| # You Don't Know JS: Types & Grammar
|    |   2|+
|   2|   3| # Chapter 3: Natives
|   3|   4| 
|   4|   5| Several times in Chapters 1 and 2, we alluded to various built-ins, usually called "natives," like `String` and `Number`. Let's examine those in detail now.
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/types & grammar/ch3.md
|    |++++| /app/types & grammar/ch3.md
|   5|   5| 
|   6|   6| Here's a list of the most commonly used natives:
|   7|   7| 
|   8|    |-* `String()`
|   9|    |-* `Number()`
|  10|    |-* `Boolean()`
|  11|    |-* `Array()`
|  12|    |-* `Object()`
|  13|    |-* `Function()`
|  14|    |-* `RegExp()`
|  15|    |-* `Date()`
|  16|    |-* `Error()`
|  17|    |-* `Symbol()` -- added in ES6!
|    |   8|+- `String()`
|    |   9|+- `Number()`
|    |  10|+- `Boolean()`
|    |  11|+- `Array()`
|    |  12|+- `Object()`
|    |  13|+- `Function()`
|    |  14|+- `RegExp()`
|    |  15|+- `Date()`
|    |  16|+- `Error()`
|    |  17|+- `Symbol()` -- added in ES6!
|  18|  18| 
|  19|  19| As you can see, these natives are actually built-in functions.
|  20|  20| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/types & grammar/ch3.md
|    |++++| /app/types & grammar/ch3.md
| 402| 402| 
| 403| 403| **Note:** By documentation convention, `String.prototype.XYZ` is shortened to `String#XYZ`, and likewise for all the other `.prototype`s.
| 404| 404| 
| 405|    |-* `String#indexOf(..)`: find the position in the string of another substring
| 406|    |-* `String#charAt(..)`: access the character at a position in the string
| 407|    |-* `String#substr(..)`, `String#substring(..)`, and `String#slice(..)`: extract a portion of the string as a new string
| 408|    |-* `String#toUpperCase()` and `String#toLowerCase()`: create a new string that's converted to either uppercase or lowercase
| 409|    |-* `String#trim()`: create a new string that's stripped of any trailing or leading whitespace
|    | 405|+- `String#indexOf(..)`: find the position in the string of another substring
|    | 406|+- `String#charAt(..)`: access the character at a position in the string
|    | 407|+- `String#substr(..)`, `String#substring(..)`, and `String#slice(..)`: extract a portion of the string as a new string
|    | 408|+- `String#toUpperCase()` and `String#toLowerCase()`: create a new string that's converted to either uppercase or lowercase
|    | 409|+- `String#trim()`: create a new string that's stripped of any trailing or leading whitespace
| 410| 410| 
| 411| 411| None of the methods modify the string *in place*. Modifications (like case conversion or trimming) create a new value from the existing value.
| 412| 412| 

types & grammar/ch3.md
|   4| Several•times•in•Chapters•1•and•2,•we•alluded•to•various•built-ins,•usually•called•"natives,"•like•`String`•and•`Number`.•Let's•examine•those•in•detail•now.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (156 > 79)

types & grammar/ch3.md
|  21| If•you're•coming•to•JS•from•a•language•like•Java,•JavaScript's•`String()`•will•look•like•the•`String(..)`•constructor•you're•used•to•for•creating•string•values.•So,•you'll•quickly•observe•that•you•can•do•things•like:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (216 > 79)

types & grammar/ch3.md
|  29| It•*is*•true•that•each•of•these•natives•can•be•used•as•a•native•constructor.•But•what's•being•constructed•may•be•different•than•you•think.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (138 > 79)

types & grammar/ch3.md
|  41| The•result•of•the•constructor•form•of•value•creation•(`new•String("abc")`)•is•an•object•wrapper•around•the•primitive•(`"abc"`)•value.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (133 > 79)

types & grammar/ch3.md
|  43| Importantly,•`typeof`•shows•that•these•objects•are•not•their•own•special•*types*,•but•more•appropriately•they•are•subtypes•of•the•`object`•type.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (144 > 79)

types & grammar/ch3.md
|  51| The•output•of•that•statement•varies•depending•on•your•browser,•as•developer•consoles•are•free•to•choose•however•they•feel•it's•appropriate•to•serialize•the•object•for•developer•inspection.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (188 > 79)

types & grammar/ch3.md
|  53| **Note:**•At•the•time•of•writing,•the•latest•Chrome•prints•something•like•this:•`String•{0:•"a",•1:•"b",•2:•"c",•length:•3,•[[PrimitiveValue]]:•"abc"}`.•But•older•versions•of•Chrome•used•to•just•print•this:•`String•{0:•"a",•1:•"b",•2:•"c"}`.•The•latest•Firefox•currently•prints•`String•["a","b","c"]`,•but•used•to•print•`"abc"`•in•italics,•which•was•clickable•to•open•the•object•inspector.•Of•course,•these•results•are•subject•to•rapid•change•and•your•experience•may•vary.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (472 > 79)

types & grammar/ch3.md
|  55| The•point•is,•`new•String("abc")`•creates•a•string•wrapper•object•around•`"abc"`,•not•just•the•primitive•`"abc"`•value•itself.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (126 > 79)

types & grammar/ch3.md
|  59| Values•that•are•`typeof`•`"object"`•(such•as•an•array)•are•additionally•tagged•with•an•internal•`[[Class]]`•property•(think•of•this•more•as•an•internal•*class*ification•rather•than•related•to•classes•from•traditional•class-oriented•coding).•This•property•cannot•be•accessed•directly,•but•can•generally•be•revealed•indirectly•by•borrowing•the•default•`Object.prototype.toString(..)`•method•called•against•the•value.•For•example:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (427 > 79)

types & grammar/ch3.md
|  67| So,•for•the•array•in•this•example,•the•internal•`[[Class]]`•value•is•`"Array"`,•and•for•the•regular•expression,•it's•`"RegExp"`.•In•most•cases,•this•internal•`[[Class]]`•value•corresponds•to•the•built-in•native•constructor•(see•below)•that's•related•to•the•value,•but•that's•not•always•the•case.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (295 > 79)

types & grammar/ch3.md
|  76| You'll•note•that•there•are•no•`Null()`•or•`Undefined()`•native•constructors,•but•nevertheless•the•`"Null"`•and•`"Undefined"`•are•the•internal•`[[Class]]`•values•exposed.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (169 > 79)

types & grammar/ch3.md
|  78| But•for•the•other•simple•primitives•like•`string`,•`number`,•and•`boolean`,•another•behavior•actually•kicks•in,•which•is•usually•called•"boxing"•(see•"Boxing•Wrappers"•section•next):
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (182 > 79)

types & grammar/ch3.md
|  86| In•this•snippet,•each•of•the•simple•primitives•are•automatically•boxed•by•their•respective•object•wrappers,•which•is•why•`"String"`,•`"Number"`,•and•`"Boolean"`•are•revealed•as•the•respective•internal•`[[Class]]`•values.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (220 > 79)

types & grammar/ch3.md
|  88| **Note:**•The•behavior•of•`toString()`•and•`[[Class]]`•as•illustrated•here•has•changed•a•bit•from•ES5•to•ES6,•but•we•cover•those•details•in•the•*ES6•&•Beyond*•title•of•this•series.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (180 > 79)

types & grammar/ch3.md
|  92| These•object•wrappers•serve•a•very•important•purpose.•Primitive•values•don't•have•properties•or•methods,•so•to•access•`.length`•or•`.toString()`•you•need•an•object•wrapper•around•the•value.•Thankfully,•JS•will•automatically•*box*•(aka•wrap)•the•primitive•value•to•fulfill•such•accesses.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (286 > 79)

types & grammar/ch3.md
| 101| So,•if•you're•going•to•be•accessing•these•properties/methods•on•your•string•values•regularly,•like•a•`i•<•a.length`•condition•in•a•`for`•loop•for•instance,•it•might•seem•to•make•sense•to•just•have•the•object•form•of•the•value•from•the•start,•so•the•JS•engine•doesn't•need•to•implicitly•create•it•for•you.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (304 > 79)

types & grammar/ch3.md
| 103| But•it•turns•out•that's•a•bad•idea.•Browsers•long•ago•performance-optimized•the•common•cases•like•`.length`,•which•means•your•program•will•*actually•go•slower*•if•you•try•to•"preoptimize"•by•directly•using•the•object•form•(which•isn't•on•the•optimized•path).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (258 > 79)

types & grammar/ch3.md
| 105| In•general,•there's•basically•no•reason•to•use•the•object•form•directly.•It's•better•to•just•let•the•boxing•happen•implicitly•where•necessary.•In•other•words,•never•do•things•like•`new•String("abc")`,•`new•Number(42)`,•etc•--•always•prefer•using•the•literal•primitive•values•`"abc"`•and•`42`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (292 > 79)

types & grammar/ch3.md
| 109| There•are•some•gotchas•with•using•the•object•wrappers•directly•that•you•should•be•aware•of•if•you•*do*•choose•to•ever•use•them.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (127 > 79)

types & grammar/ch3.md
| 121| The•problem•is•that•you've•created•an•object•wrapper•around•the•`false`•value,•but•objects•themselves•are•"truthy"•(see•Chapter•4),•so•using•the•object•behaves•oppositely•to•using•the•underlying•`false`•value•itself,•which•is•quite•contrary•to•normal•expectation.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (263 > 79)

types & grammar/ch3.md
| 123| If•you•want•to•manually•box•a•primitive•value,•you•can•use•the•`Object(..)`•function•(no•`new`•keyword):
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (104 > 79)

types & grammar/ch3.md
| 141| Again,•using•the•boxed•object•wrapper•directly•(like•`b`•and•`c`•above)•is•usually•discouraged,•but•there•may•be•some•rare•occasions•you'll•run•into•where•they•may•be•useful.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (174 > 79)

types & grammar/ch3.md
| 145| If•you•have•an•object•wrapper•and•you•want•to•get•the•underlying•primitive•value•out,•you•can•use•the•`valueOf()`•method:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (121 > 79)

types & grammar/ch3.md
| 157| Unboxing•can•also•happen•implicitly,•when•using•an•object•wrapper•value•in•a•way•that•requires•the•primitive•value.•This•process•(coercion)•will•be•covered•in•more•detail•in•Chapter•4,•but•briefly:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (197 > 79)

types & grammar/ch3.md
| 169| For•`array`,•`object`,•`function`,•and•regular-expression•values,•it's•almost•universally•preferred•that•you•use•the•literal•form•for•creating•the•values,•but•the•literal•form•creates•the•same•sort•of•object•as•the•constructor•form•does•(that•is,•there•is•no•nonwrapped•value).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (277 > 79)

types & grammar/ch3.md
| 171| Just•as•we've•seen•above•with•the•other•natives,•these•constructor•forms•should•generally•be•avoided,•unless•you•really•know•you•need•them,•mostly•because•they•introduce•exceptions•and•gotchas•that•you•probably•don't•really•*want*•to•deal•with.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (244 > 79)

types & grammar/ch3.md
| 183| **Note:**•The•`Array(..)`•constructor•does•not•require•the•`new`•keyword•in•front•of•it.•If•you•omit•it,•it•will•behave•as•if•you•have•used•it•anyway.•So•`Array(1,2,3)`•is•the•same•outcome•as•`new•Array(1,2,3)`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (211 > 79)

types & grammar/ch3.md
| 185| The•`Array`•constructor•has•a•special•form•where•if•only•one•`number`•argument•is•passed,•instead•of•providing•that•value•as•*contents*•of•the•array,•it's•taken•as•a•length•to•"presize•the•array"•(well,•sorta).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (210 > 79)

types & grammar/ch3.md
| 187| This•is•a•terrible•idea.•Firstly,•you•can•trip•over•that•form•accidentally,•as•it's•easy•to•forget.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (99 > 79)

types & grammar/ch3.md
| 189| But•more•importantly,•there's•no•such•thing•as•actually•presizing•the•array.•Instead,•what•you're•creating•is•an•otherwise•empty•array,•but•setting•the•`length`•property•of•the•array•to•the•numeric•value•specified.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (214 > 79)

types & grammar/ch3.md
| 191| An•array•that•has•no•explicit•values•in•its•slots,•but•has•a•`length`•property•that•*implies*•the•slots•exist,•is•a•weird•exotic•type•of•data•structure•in•JS•with•some•very•strange•and•confusing•behavior.•The•capability•to•create•such•a•value•comes•purely•from•old,•deprecated,•historical•functionalities•("array-like•objects"•like•the•`arguments`•object).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (356 > 79)

types & grammar/ch3.md
| 193| **Note:**•An•array•with•at•least•one•"empty•slot"•in•it•is•often•called•a•"sparse•array."
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (89 > 79)

types & grammar/ch3.md
| 195| It•doesn't•help•matters•that•this•is•yet•another•example•where•browser•developer•consoles•vary•on•how•they•represent•such•an•object,•which•breeds•more•confusion.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (161 > 79)

types & grammar/ch3.md
| 206| The•serialization•of•`a`•in•Chrome•is•(at•the•time•of•writing):•`[•undefined•x•3•]`.•**This•is•really•unfortunate.**•It•implies•that•there•are•three•`undefined`•values•in•the•slots•of•this•array,•when•in•fact•the•slots•do•not•exist•(so-called•"empty•slots"•--•also•a•bad•name!).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (278 > 79)

types & grammar/ch3.md
| 221| **Note:**•As•you•can•see•with•`c`•in•this•example,•empty•slots•in•an•array•can•happen•after•creation•of•the•array.•Changing•the•`length`•of•an•array•to•go•beyond•its•number•of•actually-defined•slot•values,•you•implicitly•introduce•empty•slots.•In•fact,•you•could•even•call•`delete•b[1]`•in•the•above•snippet,•and•it•would•introduce•an•empty•slot•into•the•middle•of•`b`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (369 > 79)

types & grammar/ch3.md
| 223| For•`b`•(in•Chrome,•currently),•you'll•find•`[•undefined,•undefined,•undefined•]`•as•the•serialization,•as•opposed•to•`[•undefined•x•3•]`•for•`a`•and•`c`.•Confused?•Yeah,•so•is•everyone•else.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (191 > 79)

types & grammar/ch3.md
| 225| Worse•than•that,•at•the•time•of•writing,•Firefox•reports•`[•,•,•,•]`•for•`a`•and•`c`.•Did•you•catch•why•that's•so•confusing?•Look•closely.•Three•commas•implies•four•slots,•not•three•slots•like•we'd•expect.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (205 > 79)

types & grammar/ch3.md
| 227| **What!?**•Firefox•puts•an•extra•`,`•on•the•end•of•their•serialization•here•because•as•of•ES5,•trailing•commas•in•lists•(array•values,•property•lists,•etc.)•are•allowed•(and•thus•dropped•and•ignored).•So•if•you•were•to•type•in•a•`[•,•,•,•]`•value•into•your•program•or•the•console,•you'd•actually•get•the•underlying•value•that's•like•`[•,•,•]`•(that•is,•an•array•with•three•empty•slots).•This•choice,•while•confusing•if•reading•the•developer•console,•is•defended•as•instead•making•copy-n-paste•behavior•accurate.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (511 > 79)

types & grammar/ch3.md
| 229| If•you're•shaking•your•head•or•rolling•your•eyes•about•now,•you're•not•alone!•Shrugs.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (85 > 79)

types & grammar/ch3.md
| 231| Unfortunately,•it•gets•worse.•More•than•just•confusing•console•output,•`a`•and•`b`•from•the•above•code•snippet•actually•behave•the•same•in•some•cases•**but•differently•in•others**:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (180 > 79)

types & grammar/ch3.md
| 243| The•`a.map(..)`•call•*fails*•because•the•slots•don't•actually•exist,•so•`map(..)`•has•nothing•to•iterate•over.•`join(..)`•works•differently.•Basically,•we•can•think•of•it•implemented•sort•of•like•this:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (201 > 79)

types & grammar/ch3.md
| 263| As•you•can•see,•`join(..)`•works•by•just•*assuming*•the•slots•exist•and•looping•up•to•the•`length`•value.•Whatever•`map(..)`•does•internally,•it•(apparently)•doesn't•make•such•an•assumption,•so•the•result•from•the•strange•"empty•slots"•array•is•unexpected•and•likely•to•cause•failure.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (284 > 79)

types & grammar/ch3.md
| 265| So,•if•you•wanted•to•*actually*•create•an•array•of•actual•`undefined`•values•(not•just•"empty•slots"),•how•could•you•do•it•(besides•manually)?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (142 > 79)

types & grammar/ch3.md
| 274| `apply(..)`•is•a•utility•available•to•all•functions,•which•calls•the•function•it's•used•with•but•in•a•special•way.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (114 > 79)

types & grammar/ch3.md
| 276| The•first•argument•is•a•`this`•object•binding•(covered•in•the•*this•&•Object•Prototypes*•title•of•this•series),•which•we•don't•care•about•here,•so•we•set•it•to•`null`.•The•second•argument•is•supposed•to•be•an•array•(or•something•*like*•an•array•--•aka•an•"array-like•object").•The•contents•of•this•"array"•are•"spread"•out•as•arguments•to•the•function•in•question.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (364 > 79)

types & grammar/ch3.md
| 278| So,•`Array.apply(..)`•is•calling•the•`Array(..)`•function•and•spreading•out•the•values•(of•the•`{•length:•3•}`•object•value)•as•its•arguments.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (142 > 79)

types & grammar/ch3.md
| 280| Inside•of•`apply(..)`,•we•can•envision•there's•another•`for`•loop•(kinda•like•`join(..)`•from•above)•that•goes•from•`0`•up•to,•but•not•including,•`length`•(`3`•in•our•case).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (173 > 79)

types & grammar/ch3.md
| 282| For•each•index,•it•retrieves•that•key•from•the•object.•So•if•the•array-object•parameter•was•named•`arr`•internally•inside•of•the•`apply(..)`•function,•the•property•access•would•effectively•be•`arr[0]`,•`arr[1]`,•and•`arr[2]`.•Of•course,•none•of•those•properties•exist•on•the•`{•length:•3•}`•object•value,•so•all•three•of•those•property•accesses•would•return•the•value•`undefined`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (380 > 79)

types & grammar/ch3.md
| 284| In•other•words,•it•ends•up•calling•`Array(..)`•basically•like•this:•`Array(undefined,undefined,undefined)`,•which•is•how•we•end•up•with•an•array•filled•with•`undefined`•values,•and•not•just•those•(crazy)•empty•slots.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (216 > 79)

types & grammar/ch3.md
| 286| While•`Array.apply(•null,•{•length:•3•}•)`•is•a•strange•and•verbose•way•to•create•an•array•filled•with•`undefined`•values,•it's•**vastly**•better•and•more•reliable•than•what•you•get•with•the•footgun'ish•`Array(3)`•empty•slots.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (226 > 79)

types & grammar/ch3.md
| 288| Bottom•line:•**never•ever,•under•any•circumstances**,•should•you•intentionally•create•and•use•these•exotic•empty-slot•arrays.•Just•don't•do•it.•They're•nuts.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (157 > 79)

types & grammar/ch3.md
| 292| The•`Object(..)`/`Function(..)`/`RegExp(..)`•constructors•are•also•generally•optional•(and•thus•should•usually•be•avoided•unless•specifically•called•for):
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (154 > 79)

types & grammar/ch3.md
| 310| There's•practically•no•reason•to•ever•use•the•`new•Object()`•constructor•form,•especially•since•it•forces•you•to•add•properties•one-by-one•instead•of•many•at•once•in•the•object•literal•form.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (190 > 79)

types & grammar/ch3.md
| 312| The•`Function`•constructor•is•helpful•only•in•the•rarest•of•cases,•where•you•need•to•dynamically•define•a•function's•parameters•and/or•its•function•body.•**Do•not•just•treat•`Function(..)`•as•an•alternate•form•of•`eval(..)`.**•You•will•almost•never•need•to•dynamically•define•a•function•in•this•way.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (299 > 79)

types & grammar/ch3.md
| 314| Regular•expressions•defined•in•the•literal•form•(`/^a*b+/g`)•are•strongly•preferred,•not•just•for•ease•of•syntax•but•for•performance•reasons•--•the•JS•engine•precompiles•and•caches•them•before•code•execution.•Unlike•the•other•constructor•forms•we've•seen•so•far,•`RegExp(..)`•has•some•reasonable•utility:•to•dynamically•define•the•pattern•for•a•regular•expression.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (364 > 79)

types & grammar/ch3.md
| 323| This•kind•of•scenario•legitimately•occurs•in•JS•programs•from•time•to•time,•so•you'd•need•to•use•the•`new•RegExp("pattern","flags")`•form.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (138 > 79)

types & grammar/ch3.md
| 327| The•`Date(..)`•and•`Error(..)`•native•constructors•are•much•more•useful•than•the•other•natives,•because•there•is•no•literal•form•for•either.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (140 > 79)

types & grammar/ch3.md
| 329| To•create•a•date•object•value,•you•must•use•`new•Date()`.•The•`Date(..)`•constructor•accepts•optional•arguments•to•specify•the•date/time•to•use,•but•if•omitted,•the•current•date/time•is•assumed.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (194 > 79)

types & grammar/ch3.md
| 331| By•far•the•most•common•reason•you•construct•a•date•object•is•to•get•the•current•timestamp•value•(a•signed•integer•number•of•milliseconds•since•Jan•1,•1970).•You•can•do•this•by•calling•`getTime()`•on•a•date•object•instance.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (222 > 79)

types & grammar/ch3.md
| 333| But•an•even•easier•way•is•to•just•call•the•static•helper•function•defined•as•of•ES5:•`Date.now()`.•And•to•polyfill•that•for•pre-ES5•is•pretty•easy:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (147 > 79)

types & grammar/ch3.md
| 343| **Note:**•If•you•call•`Date()`•without•`new`,•you'll•get•back•a•string•representation•of•the•date/time•at•that•moment.•The•exact•form•of•this•representation•is•not•specified•in•the•language•spec,•though•browsers•tend•to•agree•on•something•close•to:•`"Fri•Jul•18•2014•00:31:02•GMT-0500•(CDT)"`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (293 > 79)

types & grammar/ch3.md
| 345| The•`Error(..)`•constructor•(much•like•`Array()`•above)•behaves•the•same•with•the•`new`•keyword•present•or•omitted.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (115 > 79)

types & grammar/ch3.md
| 347| The•main•reason•you'd•want•to•create•an•error•object•is•that•it•captures•the•current•execution•stack•context•into•the•object•(in•most•JS•engines,•revealed•as•a•read-only•`.stack`•property•once•constructed).•This•stack•context•includes•the•function•call-stack•and•the•line-number•where•the•error•object•was•created,•which•makes•debugging•that•error•much•easier.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (360 > 79)

types & grammar/ch3.md
| 360| Error•object•instances•generally•have•at•least•a•`message`•property,•and•sometimes•other•properties•(which•you•should•treat•as•read-only),•like•`type`.•However,•other•than•inspecting•the•above-mentioned•`stack`•property,•it's•usually•best•to•just•call•`toString()`•on•the•error•object•(either•explicitly,•or•implicitly•through•coercion•--•see•Chapter•4)•to•get•a•friendly-formatted•error•message.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (396 > 79)

types & grammar/ch3.md
| 362| **Tip:**•Technically,•in•addition•to•the•general•`Error(..)`•native,•there•are•several•other•specific-error-type•natives:•`EvalError(..)`,•`RangeError(..)`,•`ReferenceError(..)`,•`SyntaxError(..)`,•`TypeError(..)`,•and•`URIError(..)`.•But•it's•very•rare•to•manually•use•these•specific•error•natives.•They•are•automatically•used•if•your•program•actually•suffers•from•a•real•exception•(such•as•referencing•an•undeclared•variable•and•getting•a•`ReferenceError`•error).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (465 > 79)

types & grammar/ch3.md
| 366| New•as•of•ES6,•an•additional•primitive•value•type•has•been•added,•called•"Symbol".•Symbols•are•special•"unique"•(not•strictly•guaranteed!)•values•that•can•be•used•as•properties•on•objects•with•little•fear•of•any•collision.•They're•primarily•designed•for•special•built-in•behaviors•of•ES6•constructs,•but•you•can•also•define•your•own•symbols.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (341 > 79)

types & grammar/ch3.md
| 368| Symbols•can•be•used•as•property•names,•but•you•cannot•see•or•access•the•actual•value•of•a•symbol•from•your•program,•nor•from•the•developer•console.•If•you•evaluate•a•symbol•in•the•developer•console,•what's•shown•looks•like•`Symbol(Symbol.create)`,•for•example.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (260 > 79)

types & grammar/ch3.md
| 370| There•are•several•predefined•symbols•in•ES6,•accessed•as•static•properties•of•the•`Symbol`•function•object,•like•`Symbol.create`,•`Symbol.iterator`,•etc.•To•use•them,•do•something•like:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (185 > 79)

types & grammar/ch3.md
| 376| To•define•your•own•custom•symbols,•use•the•`Symbol(..)`•native.•The•`Symbol(..)`•native•"constructor"•is•unique•in•that•you're•not•allowed•to•use•`new`•with•it,•as•doing•so•will•throw•an•error.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (193 > 79)

types & grammar/ch3.md
| 391| While•symbols•are•not•actually•private•(`Object.getOwnPropertySymbols(..)`•reflects•on•the•object•and•reveals•the•symbols•quite•publicly),•using•them•for•private•or•special•properties•is•likely•their•primary•use-case.•For•most•developers,•they•may•take•the•place•of•property•names•with•`_`•underscore•prefixes,•which•are•almost•always•by•convention•signals•to•say,•"hey,•this•is•a•private/special/internal•property,•so•leave•it•alone!"
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (435 > 79)

types & grammar/ch3.md
| 397| Each•of•the•built-in•native•constructors•has•its•own•`.prototype`•object•--•`Array.prototype`,•`String.prototype`,•etc.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (119 > 79)

types & grammar/ch3.md
| 401| For•example,•all•string•objects,•and•by•extension•(via•boxing)•`string`•primitives,•have•access•to•default•behavior•as•methods•defined•on•the•`String.prototype`•object.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (168 > 79)

types & grammar/ch3.md
| 403| **Note:**•By•documentation•convention,•`String.prototype.XYZ`•is•shortened•to•`String#XYZ`,•and•likewise•for•all•the•other•`.prototype`s.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (137 > 79)

types & grammar/ch3.md
| 407| *•`String#substr(..)`,•`String#substring(..)`,•and•`String#slice(..)`:•extract•a•portion•of•the•string•as•a•new•string
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (118 > 79)

types & grammar/ch3.md
| 408| *•`String#toUpperCase()`•and•`String#toLowerCase()`:•create•a•new•string•that's•converted•to•either•uppercase•or•lowercase
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (122 > 79)

types & grammar/ch3.md
| 409| *•`String#trim()`:•create•a•new•string•that's•stripped•of•any•trailing•or•leading•whitespace
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (92 > 79)

types & grammar/ch3.md
| 411| None•of•the•methods•modify•the•string•*in•place*.•Modifications•(like•case•conversion•or•trimming)•create•a•new•value•from•the•existing•value.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (142 > 79)

types & grammar/ch3.md
| 413| By•virtue•of•prototype•delegation•(see•the•*this•&•Object•Prototypes*•title•in•this•series),•any•string•value•can•access•these•methods:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (135 > 79)

types & grammar/ch3.md
| 423| The•other•constructor•prototypes•contain•behaviors•appropriate•to•their•types,•such•as•`Number#toFixed(..)`•(stringifying•a•number•with•a•fixed•number•of•decimal•digits)•and•`Array#concat(..)`•(merging•arrays).•All•functions•have•access•to•`apply(..)`,•`call(..)`,•and•`bind(..)`•because•`Function.prototype`•defines•them.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (322 > 79)

types & grammar/ch3.md
| 435| A•particularly•bad•idea,•you•can•even•modify•these•native•prototypes•(not•just•adding•properties•as•you're•probably•familiar•with):
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (131 > 79)

types & grammar/ch3.md
| 447| As•you•can•see,•`Function.prototype`•is•a•function,•`RegExp.prototype`•is•a•regular•expression,•and•`Array.prototype`•is•an•array.•Interesting•and•cool,•huh?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (157 > 79)

types & grammar/ch3.md
| 451| `Function.prototype`•being•an•empty•function,•`RegExp.prototype`•being•an•"empty"•(e.g.,•non-matching)•regex,•and•`Array.prototype`•being•an•empty•array,•make•them•all•nice•"default"•values•to•assign•to•variables•if•those•variables•wouldn't•already•have•had•a•value•of•the•proper•type.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (285 > 79)

types & grammar/ch3.md
| 475| **Note:**•As•of•ES6,•we•don't•need•to•use•the•`vals•=•vals•||•..`•default•value•syntax•trick•(see•Chapter•4)•anymore,•because•default•values•can•be•set•for•parameters•via•native•syntax•in•the•function•declaration•(see•Chapter•5).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (229 > 79)

types & grammar/ch3.md
| 477| One•minor•side-benefit•of•this•approach•is•that•the•`.prototype`s•are•already•created•and•built-in,•thus•created•*only•once*.•By•contrast,•using•`[]`,•`function(){}`,•and•`/(?:)/`•values•themselves•for•those•defaults•would•(likely,•depending•on•engine•implementations)•be•recreating•those•values•(and•probably•garbage-collecting•them•later)•for•*each•call*•of•`isThisCool(..)`.•That•could•be•memory/CPU•wasteful.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (412 > 79)

types & grammar/ch3.md
| 479| Also,•be•very•careful•not•to•use•`Array.prototype`•as•a•default•value•**that•will•subsequently•be•modified**.•In•this•example,•`vals`•is•used•read-only,•but•if•you•were•to•instead•make•in-place•changes•to•`vals`,•you•would•actually•be•modifying•`Array.prototype`•itself,•which•would•lead•to•the•gotchas•mentioned•earlier!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (321 > 79)

types & grammar/ch3.md
| 481| **Note:**•While•we're•pointing•out•these•native•prototypes•and•some•usefulness,•be•cautious•of•relying•on•them•and•even•more•wary•of•modifying•them•in•any•way.•See•Appendix•A•"Native•Prototypes"•for•more•discussion.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (215 > 79)

types & grammar/ch3.md
| 485| JavaScript•provides•object•wrappers•around•primitive•values,•known•as•natives•(`String`,•`Number`,•`Boolean`,•etc).•These•object•wrappers•give•the•values•access•to•behaviors•appropriate•for•each•object•subtype•(`String#trim()`•and•`Array#concat(..)`).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (251 > 79)

types & grammar/ch3.md
| 487| If•you•have•a•simple•scalar•primitive•value•like•`"abc"`•and•you•access•its•`length`•property•or•some•`String.prototype`•method,•JS•automatically•"boxes"•the•value•(wraps•it•in•its•respective•object•wrapper)•so•that•the•property/method•accesses•can•be•fulfilled.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (262 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/up & going/apA.md
|    |++++| /app/up & going/apA.md
|   1|   1| # You Don't Know JS: Up & Going
|    |   2|+
|   2|   3| # Appendix A: Acknowledgments
|   3|   4| 
|   4|   5| I have many people to thank for making this book title and the overall series happen.

up & going/apA.md
|   4| I•have•many•people•to•thank•for•making•this•book•title•and•the•overall•series•happen.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (85 > 79)

up & going/apA.md
|   6| First,•I•must•thank•my•wife•Christen•Simpson,•and•my•two•kids•Ethan•and•Emily,•for•putting•up•with•Dad•always•pecking•away•at•the•computer.•Even•when•not•writing•books,•my•obsession•with•JavaScript•glues•my•eyes•to•the•screen•far•more•than•it•should.•That•time•I•borrow•from•my•family•is•the•reason•these•books•can•so•deeply•and•completely•explain•JavaScript•to•you,•the•reader.•I•owe•my•family•everything.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (406 > 79)

up & going/apA.md
|   8| I'd•like•to•thank•my•editors•at•O'Reilly,•namely•Simon•St.Laurent•and•Brian•MacDonald,•as•well•as•the•rest•of•the•editorial•and•marketing•staff.•They•are•fantastic•to•work•with,•and•have•been•especially•accommodating•during•this•experiment•into•"open•source"•book•writing,•editing,•and•production.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (297 > 79)

up & going/apA.md
|  10| Thank•you•to•the•many•folks•who•have•participated•in•making•this•book•series•better•by•providing•editorial•suggestions•and•corrections,•including•Shelley•Powers,•Tim•Ferro,•Evan•Borden,•Forrest•L.•Norvell,•Jennifer•Davis,•Jesse•Harlin,•Kris•Kowal,•Rick•Waldron,•Jordan•Harband,•Benjamin•Gruenbaum,•Vyacheslav•Egorov,•David•Nolen,•and•many•others.•A•big•thank•you•to•Jenn•Lukas•for•writing•the•Foreword•for•this•title.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (417 > 79)

up & going/apA.md
|  12| Thank•you•to•the•countless•folks•in•the•community,•including•members•of•the•TC39•committee,•who•have•shared•so•much•knowledge•with•the•rest•of•us,•and•especially•tolerated•my•incessant•questions•and•explorations•with•patience•and•detail.•John-David•Dalton,•Juriy•"kangax"•Zaytsev,•Mathias•Bynens,•Axel•Rauschmayer,•Nicholas•Zakas,•Angus•Croll,•Reginald•Braithwaite,•Dave•Herman,•Brendan•Eich,•Allen•Wirfs-Brock,•Bradley•Meck,•Domenic•Denicola,•David•Walsh,•Tim•Disney,•Peter•van•der•Zee,•Andrea•Giammarchi,•Kit•Cambridge,•Eric•Elliott,•and•so•many•others,•I•can't•even•scratch•the•surface.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (589 > 79)

up & going/apA.md
|  14| Since•the•"You•Don't•Know•JS"•book•series•was•born•on•Kickstarter,•I•also•wish•to•thank•all•my•(nearly)•500•generous•backers,•without•whom•this•book•series•could•not•have•happened:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (180 > 79)

up & going/apA.md
|  16| >•Jan•Szpila,•nokiko,•Murali•Krishnamoorthy,•Ryan•Joy,•Craig•Patchett,•pdqtrader,•Dale•Fukami,•ray•hatfield,•R0drigo•Perez•[Mx],•Dan•Petitt,•Jack•Franklin,•Andrew•Berry,•Brian•Grinstead,•Rob•Sutherland,•Sergi•Meseguer,•Phillip•Gourley,•Mark•Watson,•Jeff•Carouth,•Alfredo•Sumaran,•Martin•Sachse,•Marcio•Barrios,•Dan,•AimelyneM,•Matt•Sullivan,•Delnatte•Pierre-Antoine,•Jake•Smith,•Eugen•Tudorancea,•Iris,•David•Trinh,•simonstl,•Ray•Daly,•Uros•Gruber,•Justin•Myers,•Shai•Zonis,•Mom•&•Dad,•Devin•Clark,•Dennis•Palmer,•Brian•Panahi•Johnson,•Josh•Marshall,•Marshall,•Dennis•Kerr,•Matt•Steele,•Erik•Slagter,•Sacah,•Justin•Rainbow,•Christian•Nilsson,•Delapouite,•D.Pereira,•Nicolas•Hoizey,•George•V.•Reilly,•Dan•Reeves,•Bruno•Laturner,•Chad•Jennings,•Shane•King,•Jeremiah•Lee•Cohick,•od3n,•Stan•Yamane,•Marko•Vucinic,•Jim•B,•Stephen•Collins,•Ægir•Þorsteinsson,•Eric•Pederson,•Owain,•Nathan•Smith,•Jeanetteurphy,•Alexandre•ELISÉ,•Chris•Peterson,•Rik•Watson,•Luke•Matthews,•Justin•Lowery,•Morten•Nielsen,•Vernon•Kesner,•Chetan•Shenoy,•Paul•Tregoing,•Marc•Grabanski,•Dion•Almaer,•Andrew•Sullivan,•Keith•Elsass,•Tom•Burke,•Brian•Ashenfelter,•David•Stuart,•Karl•Swedberg,•Graeme,•Brandon•Hays,•John•Christopher,•Gior,•manoj•reddy,•Chad•Smith,•Jared•Harbour,•Minoru•TODA,•Chris•Wigley,•Daniel•Mee,•Mike,•Handyface,•Alex•Jahraus,•Carl•Furrow,•Rob•Foulkrod,•Max•Shishkin,•Leigh•Penny•Jr.,•Robert•Ferguson,•Mike•van•Hoenselaar,•Hasse•Schougaard,•rajan•venkataguru,•Jeff•Adams,•Trae•Robbins,•Rolf•Langenhuijzen,•Jorge•Antunes,•Alex•Koloskov,•Hugh•Greenish,•Tim•Jones,•Jose•Ochoa,•Michael•Brennan-White,•Naga•Harish•Muvva,•Barkóczi•Dávid,•Kitt•Hodsden,•Paul•McGraw,•Sascha•Goldhofer,•Andrew•Metcalf,•Markus•Krogh,•Michael•Mathews,•Matt•Jared,•Juanfran,•Georgie•Kirschner,•Kenny•Lee,•Ted•Zhang,•Amit•Pahwa,•Inbal•Sinai,•Dan•Raine,•Schabse•Laks,•Michael•Tervoort,•Alexandre•Abreu,•Alan•Joseph•Williams,•NicolasD,•Cindy•Wong,•Reg•Braithwaite,•LocalPCGuy,•Jon•Friskics,•Chris•Merriman,•John•Pena,•Jacob•Katz,•Sue•Lockwood,•Magnus•Johansson,•Jeremy•Crapsey,•Grzegorz•Pawłowski,•nico•nuzzaci,•Christine•Wilks,•Hans•Bergren,•charles•montgomery,•Ariel•בר-לבב•Fogel,•Ivan•Kolev,•Daniel•Campos,•Hugh•Wood,•Christian•Bradford,•Frédéric•Harper,•Ionuţ•Dan•Popa,•Jeff•Trimble,•Rupert•Wood,•Trey•Carrico,•Pancho•Lopez,•Joël•kuijten,•Tom•A•Marra,•Jeff•Jewiss,•Jacob•Rios,•Paolo•Di•Stefano,•Soledad•Penades,•Chris•Gerber,•Andrey•Dolganov,•Wil•Moore•III,•Thomas•Martineau,•Kareem,•Ben•Thouret,•Udi•Nir,•Morgan•Laupies,•jory•carson-burson,•Nathan•L•Smith,•Eric•Damon•Walters,•Derry•Lozano-Hoyland,•Geoffrey•Wiseman,•mkeehner,•KatieK,•Scott•MacFarlane,•Brian•LaShomb,•Adrien•Mas,•christopher•ross,•Ian•Littman,•Dan•Atkinson,•Elliot•Jobe,•Nick•Dozier,•Peter•Wooley,•John•Hoover,•dan,•Martin•A.•Jackson,•Héctor•Fernando•Hurtado,•andy•ennamorato,•Paul•Seltmann,•Melissa•Gore,•Dave•Pollard,•Jack•Smith,•Philip•Da•Silva,•Guy•Israeli,•@megalithic,•Damian•Crawford,•Felix•Gliesche,•April•Carter•Grant,•Heidi,•jim•tierney,•Andrea•Giammarchi,•Nico•Vignola,•Don•Jones,•Chris•Hartjes,•Alex•Howes,•john•gibbon,•David•J.•Groom,•BBox,•Yu•'Dilys'•Sun,•Nate•Steiner,•Brandon•Satrom,•Brian•Wyant,•Wesley•Hales,•Ian•Pouncey,•Timothy•Kevin•Oxley,•George•Terezakis,•sanjay•raj,•Jordan•Harband,•Marko•McLion,•Wolfgang•Kaufmann,•Pascal•Peuckert,•Dave•Nugent,•Markus•Liebelt,•Welling•Guzman,•Nick•Cooley,•Daniel•Mesquita,•Robert•Syvarth,•Chris•Coyier,•Rémy•Bach,•Adam•Dougal,•Alistair•Duggin,•David•Loidolt,•Ed•Richer,•Brian•Chenault,•GoldFire•Studios,•Carles•Andrés,•Carlos•Cabo,•Yuya•Saito,•roberto•ricardo,•Barnett•Klane,•Mike•Moore,•Kevin•Marx,•Justin•Love,•Joe•Taylor,•Paul•Dijou,•Michael•Kohler,•Rob•Cassie,•Mike•Tierney,•Cody•Leroy•Lindley,•tofuji,•Shimon•Schwartz,•Raymond,•Luc•De•Brouwer,•David•Hayes,•Rhys•Brett-Bowen,•Dmitry,•Aziz•Khoury,•Dean,•Scott•Tolinski•-•Level•Up,•Clement•Boirie,•Djordje•Lukic,•Anton•Kotenko,•Rafael•Corral,•Philip•Hurwitz,•Jonathan•Pidgeon,•Jason•Campbell,•Joseph•C.,•SwiftOne,•Jan•Hohner,•Derick•Bailey,•getify,•Daniel•Cousineau,•Chris•Charlton,•Eric•Turner,•David•Turner,•Joël•Galeran,•Dharma•Vagabond,•adam,•Dirk•van•Bergen,•dave•♥♫★•furf,•Vedran•Zakanj,•Ryan•McAllen,•Natalie•Patrice•Tucker,•Eric•J.•Bivona,•Adam•Spooner,•Aaron•Cavano,•Kelly•Packer,•Eric•J,•Martin•Drenovac,•Emilis,•Michael•Pelikan,•Scott•F.•Walter,•Josh•Freeman,•Brandon•Hudgeons,•vijay•chennupati,•Bill•Glennon,•Robin•R.,•Troy•Forster,•otaku_coder,•Brad,•Scott,•Frederick•Ostrander,•Adam•Brill,•Seb•Flippence,•Michael•Anderson,•Jacob,•Adam•Randlett,•Standard,•Joshua•Clanton,•Sebastian•Kouba,•Chris•Deck,•SwordFire,•Hannes•Papenberg,•Richard•Woeber,•hnzz,•Rob•Crowther,•Jedidiah•Broadbent,•Sergey•Chernyshev,•Jay-Ar•Jamon,•Ben•Combee,•luciano•bonachela,•Mark•Tomlinson,•Kit•Cambridge,•Michael•Melgares,•Jacob•Adams,•Adrian•Bruinhout,•Bev•Wieber,•Scott•Puleo,•Thomas•Herzog,•April•Leone,•Daniel•Mizieliński,•Kees•van•Ginkel,•Jon•Abrams,•Erwin•Heiser,•Avi•Laviad,•David•newell,•Jean-Francois•Turcot,•Niko•Roberts,•Erik•Dana,•Charles•Neill,•Aaron•Holmes,•Grzegorz•Ziółkowski,•Nathan•Youngman,•Timothy,•Jacob•Mather,•Michael•Allan,•Mohit•Seth,•Ryan•Ewing,•Benjamin•Van•Treese,•Marcelo•Santos,•Denis•Wolf,•Phil•Keys,•Chris•Yung,•Timo•Tijhof,•Martin•Lekvall,•Agendine,•Greg•Whitworth,•Helen•Humphrey,•Dougal•Campbell,•Johannes•Harth,•Bruno•Girin,•Brian•Hough,•Darren•Newton,•Craig•McPheat,•Olivier•Tille,•Dennis•Roethig,•Mathias•Bynens,•Brendan•Stromberger,•sundeep,•John•Meyer,•Ron•Male,•John•F•Croston•III,•gigante,•Carl•Bergenhem,•B.J.•May,•Rebekah•Tyler,•Ted•Foxberry,•Jordan•Reese,•Terry•Suitor,•afeliz,•Tom•Kiefer,•Darragh•Duffy,•Kevin•Vanderbeken,•Andy•Pearson,•Simon•Mac•Donald,•Abid•Din,•Chris•Joel,•Tomas•Theunissen,•David•Dick,•Paul•Grock,•Brandon•Wood,•John•Weis,•dgrebb,•Nick•Jenkins,•Chuck•Lane,•Johnny•Megahan,•marzsman,•Tatu•Tamminen,•Geoffrey•Knauth,•Alexander•Tarmolov,•Jeremy•Tymes,•Chad•Auld,•Sean•Parmelee,•Rob•Staenke,•Dan•Bender,•Yannick•derwa,•Joshua•Jones,•Geert•Plaisier,•Tom•LeZotte,•Christen•Simpson,•Stefan•Bruvik,•Justin•Falcone,•Carlos•Santana,•Michael•Weiss,•Pablo•Villoslada,•Peter•deHaan,•Dimitris•Iliopoulos,•seyDoggy,•Adam•Jordens,•Noah•Kantrowitz,•Amol•M,•Matthew•Winnard,•Dirk•Ginader,•Phinam•Bui,•David•Rapson,•Andrew•Baxter,•Florian•Bougel,•Michael•George,•Alban•Escalier,•Daniel•Sellers,•Sasha•Rudan,•John•Green,•Robert•Kowalski,•David•I.•Teixeira•(@ditma,•Charles•Carpenter,•Justin•Yost,•Sam•S,•Denis•Ciccale,•Kevin•Sheurs,•Yannick•Croissant,•Pau•Fracés,•Stephen•McGowan,•Shawn•Searcy,•Chris•Ruppel,•Kevin•Lamping,•Jessica•Campbell,•Christopher•Schmitt,•Sablons,•Jonathan•Reisdorf,•Bunni•Gek,•Teddy•Huff,•Michael•Mullany,•Michael•Fürstenberg,•Carl•Henderson,•Rick•Yoesting,•Scott•Nichols,•Hernán•Ciudad,•Andrew•Maier,•Mike•Stapp,•Jesse•Shawl,•Sérgio•Lopes,•jsulak,•Shawn•Price,•Joel•Clermont,•Chris•Ridmann,•Sean•Timm,•Jason•Finch,•Aiden•Montgomery,•Elijah•Manor,•Derek•Gathright,•Jesse•Harlin,•Dillon•Curry,•Courtney•Myers,•Diego•Cadenas,•Arne•de•Bree,•João•Paulo•Dubas,•James•Taylor,•Philipp•Kraeutli,•Mihai•Păun,•Sam•Gharegozlou,•joshjs,•Matt•Murchison,•Eric•Windham,•Timo•Behrmann,•Andrew•Hall,•joshua•price,•Théophile•Villard
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (7114 > 79)

up & going/apA.md
|  18| This•book•series•is•being•produced•in•an•open•source•fashion,•including•editing•and•production.•We•owe•GitHub•a•debt•of•gratitude•for•making•that•sort•of•thing•possible•for•the•community!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (187 > 79)

up & going/apA.md
|  20| Thank•you•again•to•all•the•countless•folks•I•didn't•name•but•to•whom•I•nonetheless•owe•thanks.•May•this•book•series•be•"owned"•by•all•of•us•and•serve•to•contribute•to•increasing•awareness•and•understanding•of•the•JavaScript•language,•to•the•benefit•of•all•current•and•future•community•contributors.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (298 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/README.md
|    |++++| /app/es6 & beyond/README.md
|   2|   2| 
|   3|   3| <img src="cover.jpg" width="300">
|   4|   4| 
|----|    | --
|    |   5|+***
|   5|   6| 
|   6|   7| **[Purchase digital/print copy from O'Reilly](http://shop.oreilly.com/product/0636920033769.do)**
|   7|   8| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/README.md
|    |++++| /app/es6 & beyond/README.md
|   6|   6| 
|   7|   7| **[Purchase digital/print copy from O'Reilly](http://shop.oreilly.com/product/0636920033769.do)**
|   8|   8| 
|----|    | --
|    |   9|+***
|   9|  10| 
|  10|  11| [Table of Contents](toc.md)
|  11|  12| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/README.md
|    |++++| /app/es6 & beyond/README.md
|  10|  10| 
|  11|  11| [Table of Contents](toc.md)
|  12|  12| 
|  13|    |-* [Foreword](foreword.md) (by [Rick Waldron](http://bocoup.com/weblog/author/rick-waldron/))
|  14|    |-* [Preface](../preface.md)
|  15|    |-* [Chapter 1: ES? Now & Future](ch1.md)
|  16|    |-* [Chapter 2: Syntax](ch2.md)
|  17|    |-* [Chapter 3: Organization](ch3.md)
|  18|    |-* [Chapter 4: Async Flow Control](ch4.md)
|  19|    |-* [Chapter 5: Collections](ch5.md)
|  20|    |-* [Chapter 6: API Additions](ch6.md)
|  21|    |-* [Chapter 7: Meta Programming](ch7.md)
|  22|    |-* [Chapter 8: Beyond ES6](ch8.md)
|  23|    |-* [Appendix A: Thank You's!](apA.md)
|    |  13|+- [Foreword](foreword.md) (by [Rick Waldron](http://bocoup.com/weblog/author/rick-waldron/))
|    |  14|+- [Preface](../preface.md)
|    |  15|+- [Chapter 1: ES? Now & Future](ch1.md)
|    |  16|+- [Chapter 2: Syntax](ch2.md)
|    |  17|+- [Chapter 3: Organization](ch3.md)
|    |  18|+- [Chapter 4: Async Flow Control](ch4.md)
|    |  19|+- [Chapter 5: Collections](ch5.md)
|    |  20|+- [Chapter 6: API Additions](ch6.md)
|    |  21|+- [Chapter 7: Meta Programming](ch7.md)
|    |  22|+- [Chapter 8: Beyond ES6](ch8.md)
|    |  23|+- [Appendix A: Thank You's!](apA.md)

es6 & beyond/README.md
|   7| **[Purchase•digital/print•copy•from•O'Reilly](http://shop.oreilly.com/product/0636920033769.do)**
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (97 > 79)

es6 & beyond/README.md
|  13| *•[Foreword](foreword.md)•(by•[Rick•Waldron](http://bocoup.com/weblog/author/rick-waldron/))
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (92 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/this & object prototypes/ch1.md
|    |++++| /app/this & object prototypes/ch1.md
|   1|   1| # You Don't Know JS: *this* & Object Prototypes
|    |   2|+
|   2|   3| # Chapter 1: `this` Or That?
|   3|   4| 
|   4|   5| One of the most confused mechanisms in JavaScript is the `this` keyword. It's a special identifier keyword that's automatically defined in the scope of every function, but what exactly it refers to bedevils even seasoned JavaScript developers.

this & object prototypes/ch1.md
|   4| One•of•the•most•confused•mechanisms•in•JavaScript•is•the•`this`•keyword.•It's•a•special•identifier•keyword•that's•automatically•defined•in•the•scope•of•every•function,•but•what•exactly•it•refers•to•bedevils•even•seasoned•JavaScript•developers.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (243 > 79)

this & object prototypes/ch1.md
|   6| >•Any•sufficiently•*advanced*•technology•is•indistinguishable•from•magic.•--•Arthur•C.•Clarke
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (93 > 79)

this & object prototypes/ch1.md
|   8| JavaScript's•`this`•mechanism•isn't•actually•*that*•advanced,•but•developers•often•paraphrase•that•quote•in•their•own•mind•by•inserting•"complex"•or•"confusing",•and•there's•no•question•that•without•lack•of•clear•understanding,•`this`•can•seem•downright•magical•in•*your*•confusion.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (282 > 79)

this & object prototypes/ch1.md
|  10| **Note:**•The•word•"this"•is•a•terribly•common•pronoun•in•general•discourse.•So,•it•can•be•very•difficult,•especially•verbally,•to•determine•whether•we•are•using•"this"•as•a•pronoun•or•using•it•to•refer•to•the•actual•keyword•identifier.•For•clarity,•I•will•always•use•`this`•to•refer•to•the•special•keyword,•and•"this"•or•*this*•or•this•otherwise.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (347 > 79)

this & object prototypes/ch1.md
|  14| If•the•`this`•mechanism•is•so•confusing,•even•to•seasoned•JavaScript•developers,•one•may•wonder•why•it's•even•useful?•Is•it•more•trouble•than•it's•worth?•Before•we•jump•into•the•*how*,•we•should•examine•the•*why*.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (213 > 79)

this & object prototypes/ch1.md
|  43| If•the•*how*•of•this•snippet•confuses•you,•don't•worry!•We'll•get•to•that•shortly.•Just•set•those•questions•aside•briefly•so•we•can•look•into•the•*why*•more•clearly.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (165 > 79)

this & object prototypes/ch1.md
|  45| This•code•snippet•allows•the•`identify()`•and•`speak()`•functions•to•be•re-used•against•multiple•*context*•(`me`•and•`you`)•objects,•rather•than•needing•a•separate•version•of•the•function•for•each•object.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (204 > 79)

this & object prototypes/ch1.md
|  47| Instead•of•relying•on•`this`,•you•could•have•explicitly•passed•in•a•context•object•to•both•`identify()`•and•`speak()`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (118 > 79)

this & object prototypes/ch1.md
|  63| However,•the•`this`•mechanism•provides•a•more•elegant•way•of•implicitly•"passing•along"•an•object•reference,•leading•to•cleaner•API•design•and•easier•re-use.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (157 > 79)

this & object prototypes/ch1.md
|  65| The•more•complex•your•usage•pattern•is,•the•more•clearly•you'll•see•that•passing•context•around•as•an•explicit•parameter•is•often•messier•than•passing•around•a•`this`•context.•When•we•explore•objects•and•prototypes,•you•will•see•the•helpfulness•of•a•collection•of•functions•being•able•to•automatically•reference•the•proper•context•object.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (338 > 79)

this & object prototypes/ch1.md
|  69| We'll•soon•begin•to•explain•how•`this`•*actually*•works,•but•first•we•must••dispel•some•misconceptions•about•how•it•*doesn't*•actually•work.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (140 > 79)

this & object prototypes/ch1.md
|  71| The•name•"this"•creates•confusion•when•developers•try•to•think•about•it•too•literally.•There•are•two•meanings•often•assumed,•but•both•are•incorrect.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (148 > 79)

this & object prototypes/ch1.md
|  75| The•first•common•temptation•is•to•assume•`this`•refers•to•the•function•itself.•That's•a•reasonable•grammatical•inference,•at•least.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (131 > 79)

this & object prototypes/ch1.md
|  77| Why•would•you•want•to•refer•to•a•function•from•inside•itself?•The•most•common•reasons•would•be•things•like•recursion•(calling•a•function•from•inside•itself)•or•having•an•event•handler•that•can•unbind•itself•when•it's•first•called.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (230 > 79)

this & object prototypes/ch1.md
|  79| Developers•new•to•JS's•mechanisms•often•think•that•referencing•the•function•as•an•object•(all•functions•in•JavaScript•are•objects!)•lets•you•store•*state*•(values•in•properties)•between•function•calls.•While•this•is•certainly•possible•and•has•some•limited•uses,•the•rest•of•the•book•will•expound•on•many•other•patterns•for•*better*•places•to•store•state•besides•the•function•object.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (382 > 79)

this & object prototypes/ch1.md
|  81| But•for•just•a•moment,•we'll•explore•that•pattern,•to•illustrate•how•`this`•doesn't•let•a•function•get•a•reference•to•itself•like•we•might•have•assumed.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (152 > 79)

this & object prototypes/ch1.md
|  83| Consider•the•following•code,•where•we•attempt•to•track•how•many•times•a•function•(`foo`)•was•called:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (100 > 79)

this & object prototypes/ch1.md
| 111| `foo.count`•is•*still*•`0`,•even•though•the•four•`console.log`•statements•clearly•indicate•`foo(..)`•was•in•fact•called•four•times.•The•frustration•stems•from•a•*too•literal*•interpretation•of•what•`this`•(in•`this.count++`)•means.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (231 > 79)

this & object prototypes/ch1.md
| 113| When•the•code•executes•`foo.count•=•0`,•indeed•it's•adding•a•property•`count`•to•the•function•object•`foo`.•But•for•the•`this.count`•reference•inside•of•the•function,•`this`•is•not•in•fact•pointing•*at•all*•to•that•function•object,•and•so•even•though•the•property•names•are•the•same,•the•root•objects•are•different,•and•confusion•ensues.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (337 > 79)

this & object prototypes/ch1.md
| 115| **Note:**•A•responsible•developer•*should*•ask•at•this•point,•"If•I•was•incrementing•a•`count`•property•but•it•wasn't•the•one•I•expected,•which•`count`•*was*•I•incrementing?"•In•fact,•were•she•to•dig•deeper,•she•would•find•that•she•had•accidentally•created•a•global•variable•`count`•(see•Chapter•2•for•*how*•that•happened!),•and•it•currently•has•the•value•`NaN`.•Of•course,•once•she•identifies•this•peculiar•outcome,•she•then•has•a•whole•other•set•of•questions:•"How•was•it•global,•and•why•did•it•end•up•`NaN`•instead•of•some•proper•count•value?"•(see•Chapter•2).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (563 > 79)

this & object prototypes/ch1.md
| 117| Instead•of•stopping•at•this•point•and•digging•into•why•the•`this`•reference•doesn't•seem•to•be•behaving•as•*expected*,•and•answering•those•tough•but•important•questions,•many•developers•simply•avoid•the•issue•altogether,•and•hack•toward•some•other•solution,•such•as•creating•another•object•to•hold•the•`count`•property:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (319 > 79)

this & object prototypes/ch1.md
| 147| While•it•is•true•that•this•approach•"solves"•the•problem,•unfortunately•it•simply•ignores•the•real•problem•--•lack•of•understanding•what•`this`•means•and•how•it•works•--•and•instead•falls•back•to•the•comfort•zone•of•a•more•familiar•mechanism:•lexical•scope.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (257 > 79)

this & object prototypes/ch1.md
| 149| **Note:**•Lexical•scope•is•a•perfectly•fine•and•useful•mechanism;•I•am•not•belittling•the•use•of•it,•by•any•means•(see•*"Scope•&•Closures"*•title•of•this•book•series).•But•constantly•*guessing*•at•how•to•use•`this`,•and•usually•being•*wrong*,•is•not•a•good•reason•to•retreat•back•to•lexical•scope•and•never•learn•*why*•`this`•eludes•you.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (337 > 79)

this & object prototypes/ch1.md
| 151| To•reference•a•function•object•from•inside•itself,•`this`•by•itself•will•typically•be•insufficient.•You•generally•need•a•reference•to•the•function•object•via•a•lexical•identifier•(variable)•that•points•at•it.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (208 > 79)

this & object prototypes/ch1.md
| 166| In•the•first•function,•called•a•"named•function",•`foo`•is•a•reference•that•can•be•used•to•refer•to•the•function•from•inside•itself.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (132 > 79)

this & object prototypes/ch1.md
| 168| But•in•the•second•example,•the•function•callback•passed•to•`setTimeout(..)`•has•no•name•identifier•(so•called•an•"anonymous•function"),•so•there's•no•proper•way•to•refer•to•the•function•object•itself.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (200 > 79)

this & object prototypes/ch1.md
| 170| **Note:**•The•old-school•but•now•deprecated•and•frowned-upon•`arguments.callee`•reference•inside•a•function•*also*•points•to•the•function•object•of•the•currently•executing•function.•This•reference•is•typically•the•only•way•to•access•an•anonymous•function's•object•from•inside•itself.•The•best•approach,•however,•is•to•avoid•the•use•of•anonymous•functions•altogether,•at•least•for•those•which•require•a•self-reference,•and•instead•use•a•named•function•(expression).•`arguments.callee`•is•deprecated•and•should•not•be•used.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (521 > 79)

this & object prototypes/ch1.md
| 172| So•another•solution•to•our•running•example•would•have•been•to•use•the•`foo`•identifier•as•a•function•object•reference•in•each•place,•and•not•use•`this`•at•all,•which•*works*:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (174 > 79)

this & object prototypes/ch1.md
| 200| However,•that•approach•similarly•side-steps•*actual*•understanding•of•`this`•and•relies•entirely•on•the•lexical•scoping•of•variable•`foo`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (138 > 79)

this & object prototypes/ch1.md
| 202| Yet•another•way•of•approaching•the•issue•is•to•force•`this`•to•actually•point•at•the•`foo`•function•object:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (107 > 79)

this & object prototypes/ch1.md
| 234| **Instead•of•avoiding•`this`,•we•embrace•it.**•We'll•explain•in•a•little•bit•*how*•such•techniques•work•much•more•completely,•so•don't•worry•if•you're•still•a•bit•confused!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (172 > 79)

this & object prototypes/ch1.md
| 238| The•next•most•common•misconception•about•the•meaning•of•`this`•is•that•it•somehow•refers•to•the•function's•scope.•It's•a•tricky•question,•because•in•one•sense•there•is•some•truth,•but•in•the•other•sense,•it's•quite•misguided.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (225 > 79)

this & object prototypes/ch1.md
| 240| To•be•clear,•`this`•does•not,•in•any•way,•refer•to•a•function's•**lexical•scope**.•It•is•true•that•internally,•scope•is•kind•of•like•an•object•with•properties•for•each•of•the•available•identifiers.•But•the•scope•"object"•is•not•accessible•to•JavaScript•code.•It's•an•inner•part•of•the•*Engine*'s•implementation.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (311 > 79)

this & object prototypes/ch1.md
| 242| Consider•code•which•attempts•(and•fails!)•to•cross•over•the•boundary•and•use•`this`•to•implicitly•refer•to•a•function's•lexical•scope:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (134 > 79)

this & object prototypes/ch1.md
| 257| There's•more•than•one•mistake•in•this•snippet.•While•it•may•seem•contrived,•the•code•you•see•is•a•distillation•of•actual•real-world•code•that•has•been•exchanged•in•public•community•help•forums.•It's•a•wonderful•(if•not•sad)•illustration•of•just•how•misguided•`this`•assumptions•can•be.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (285 > 79)

this & object prototypes/ch1.md
| 259| Firstly,•an•attempt•is•made•to•reference•the•`bar()`•function•via•`this.bar()`.•It•is•almost•certainly•an•*accident*•that•it•works,•but•we'll•explain•the•*how*•of•that•shortly.•The•most•natural•way•to•have•invoked•`bar()`•would•have•been•to•omit•the•leading•`this.`•and•just•make•a•lexical•reference•to•the•identifier.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (318 > 79)

this & object prototypes/ch1.md
| 261| However,•the•developer•who•writes•such•code•is•attempting•to•use•`this`•to•create•a•bridge•between•the•lexical•scopes•of•`foo()`•and•`bar()`,•so•that•`bar()`•has•access•to•the•variable•`a`•in•the•inner•scope•of•`foo()`.•**No•such•bridge•is•possible.**•You•cannot•use•a•`this`•reference•to•look•something•up•in•a•lexical•scope.•It•is•not•possible.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (346 > 79)

this & object prototypes/ch1.md
| 263| Every•time•you•feel•yourself•trying•to•mix•lexical•scope•look-ups•with•`this`,•remind•yourself:•*there•is•no•bridge*.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (117 > 79)

this & object prototypes/ch1.md
| 267| Having•set•aside•various•incorrect•assumptions,•let•us•now•turn•our•attention•to•how•the•`this`•mechanism•really•works.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (119 > 79)

this & object prototypes/ch1.md
| 269| We•said•earlier•that•`this`•is•not•an•author-time•binding•but•a•runtime•binding.•It•is•contextual•based•on•the•conditions•of•the•function's•invocation.•`this`•binding•has•nothing•to•do•with•where•a•function•is•declared,•but•has•instead•everything•to•do•with•the•manner•in•which•the•function•is•called.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (301 > 79)

this & object prototypes/ch1.md
| 271| When•a•function•is•invoked,•an•activation•record,•otherwise•known•as•an•execution•context,•is•created.•This•record•contains•information•about•where•the•function•was•called•from•(the•call-stack),•*how*•the•function•was•invoked,•what•parameters•were•passed,•etc.•One•of•the•properties•of•this•record•is•the•`this`•reference•which•will•be•used•for•the•duration•of•that•function's•execution.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (387 > 79)

this & object prototypes/ch1.md
| 273| In•the•next•chapter,•we•will•learn•to•find•a•function's•**call-site**•to•determine•how•its•execution•will•bind•`this`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (118 > 79)

this & object prototypes/ch1.md
| 277| `this`•binding•is•a•constant•source•of•confusion•for•the•JavaScript•developer•who•does•not•take•the•time•to•learn•how•the•mechanism•actually•works.•Guesses,•trial-and-error,•and•blind•copy-n-paste•from•Stack•Overflow•answers•is•not•an•effective•or•proper•way•to•leverage•*this*•important•`this`•mechanism.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (305 > 79)

this & object prototypes/ch1.md
| 279| To•learn•`this`,•you•first•have•to•learn•what•`this`•is•*not*,•despite•any•assumptions•or•misconceptions•that•may•lead•you•down•those•paths.•`this`•is•neither•a•reference•to•the•function•itself,•nor•is•it•a•reference•to•the•function's•*lexical*•scope.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (251 > 79)

this & object prototypes/ch1.md
| 281| `this`•is•actually•a•binding•that•is•made•when•a•function•is•invoked,•and•*what*•it•references•is•determined•entirely•by•the•call-site•where•the•function•is•called.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (164 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/this & object prototypes/apB.md
|    |++++| /app/this & object prototypes/apB.md
|   1|   1| # You Don't Know JS: *this* & Object Prototypes
|    |   2|+
|   2|   3| # Appendix B: Acknowledgments
|   3|   4| 
|   4|   5| I have many people to thank for making this book title and the overall series happen.

this & object prototypes/apB.md
|   4| I•have•many•people•to•thank•for•making•this•book•title•and•the•overall•series•happen.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (85 > 79)

this & object prototypes/apB.md
|   6| First,•I•must•thank•my•wife•Christen•Simpson,•and•my•two•kids•Ethan•and•Emily,•for•putting•up•with•Dad•always•pecking•away•at•the•computer.•Even•when•not•writing•books,•my•obsession•with•JavaScript•glues•my•eyes•to•the•screen•far•more•than•it•should.•That•time•I•borrow•from•my•family•is•the•reason•these•books•can•so•deeply•and•completely•explain•JavaScript•to•you,•the•reader.•I•owe•my•family•everything.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (406 > 79)

this & object prototypes/apB.md
|   8| I'd•like•to•thank•my•editors•at•O'Reilly,•namely•Simon•St.Laurent•and•Brian•MacDonald,•as•well•as•the•rest•of•the•editorial•and•marketing•staff.•They•are•fantastic•to•work•with,•and•have•been•especially•accommodating•during•this•experiment•into•"open•source"•book•writing,•editing,•and•production.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (297 > 79)

this & object prototypes/apB.md
|  10| Thank•you•to•the•many•folks•who•have•participated•in•making•this•book•series•better•by•providing•editorial•suggestions•and•corrections,•including•Shelley•Powers,•Tim•Ferro,•Evan•Borden,•Forrest•L.•Norvell,•Jennifer•Davis,•Jesse•Harlin,•and•many•others.•A•big•thank•you•to•Nick•Berardi•for•writing•the•Foreword•for•this•title.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (325 > 79)

this & object prototypes/apB.md
|  12| Thank•you•to•the•countless•folks•in•the•community,•including•members•of•the•TC39•committee,•who•have•shared•so•much•knowledge•with•the•rest•of•us,•and•especially•tolerated•my•incessant•questions•and•explorations•with•patience•and•detail.•John-David•Dalton,•Juriy•"kangax"•Zaytsev,•Mathias•Bynens,•Axel•Rauschmayer,•Nicholas•Zakas,•Angus•Croll,•Reginald•Braithwaite,•Dave•Herman,•Brendan•Eich,•Allen•Wirfs-Brock,•Bradley•Meck,•Domenic•Denicola,•David•Walsh,•Tim•Disney,•Peter•van•der•Zee,•Andrea•Giammarchi,•Kit•Cambridge,•Eric•Elliott,•and•so•many•others,•I•can't•even•scratch•the•surface.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (589 > 79)

this & object prototypes/apB.md
|  14| The•*You•Don't•Know•JS*•book•series•was•born•on•Kickstarter,•so•I•also•wish•to•thank•all•my•(nearly)•500•generous•backers,•without•whom•this•book•series•could•not•have•happened:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (177 > 79)

this & object prototypes/apB.md
|  16| >•Jan•Szpila,•nokiko,•Murali•Krishnamoorthy,•Ryan•Joy,•Craig•Patchett,•pdqtrader,•Dale•Fukami,•ray•hatfield,•R0drigo•Perez•[Mx],•Dan•Petitt,•Jack•Franklin,•Andrew•Berry,•Brian•Grinstead,•Rob•Sutherland,•Sergi•Meseguer,•Phillip•Gourley,•Mark•Watson,•Jeff•Carouth,•Alfredo•Sumaran,•Martin•Sachse,•Marcio•Barrios,•Dan,•AimelyneM,•Matt•Sullivan,•Delnatte•Pierre-Antoine,•Jake•Smith,•Eugen•Tudorancea,•Iris,•David•Trinh,•simonstl,•Ray•Daly,•Uros•Gruber,•Justin•Myers,•Shai•Zonis,•Mom•&•Dad,•Devin•Clark,•Dennis•Palmer,•Brian•Panahi•Johnson,•Josh•Marshall,•Marshall,•Dennis•Kerr,•Matt•Steele,•Erik•Slagter,•Sacah,•Justin•Rainbow,•Christian•Nilsson,•Delapouite,•D.Pereira,•Nicolas•Hoizey,•George•V.•Reilly,•Dan•Reeves,•Bruno•Laturner,•Chad•Jennings,•Shane•King,•Jeremiah•Lee•Cohick,•od3n,•Stan•Yamane,•Marko•Vucinic,•Jim•B,•Stephen•Collins,•Ægir•Þorsteinsson,•Eric•Pederson,•Owain,•Nathan•Smith,•Jeanetteurphy,•Alexandre•ELISÉ,•Chris•Peterson,•Rik•Watson,•Luke•Matthews,•Justin•Lowery,•Morten•Nielsen,•Vernon•Kesner,•Chetan•Shenoy,•Paul•Tregoing,•Marc•Grabanski,•Dion•Almaer,•Andrew•Sullivan,•Keith•Elsass,•Tom•Burke,•Brian•Ashenfelter,•David•Stuart,•Karl•Swedberg,•Graeme,•Brandon•Hays,•John•Christopher,•Gior,•manoj•reddy,•Chad•Smith,•Jared•Harbour,•Minoru•TODA,•Chris•Wigley,•Daniel•Mee,•Mike,•Handyface,•Alex•Jahraus,•Carl•Furrow,•Rob•Foulkrod,•Max•Shishkin,•Leigh•Penny•Jr.,•Robert•Ferguson,•Mike•van•Hoenselaar,•Hasse•Schougaard,•rajan•venkataguru,•Jeff•Adams,•Trae•Robbins,•Rolf•Langenhuijzen,•Jorge•Antunes,•Alex•Koloskov,•Hugh•Greenish,•Tim•Jones,•Jose•Ochoa,•Michael•Brennan-White,•Naga•Harish•Muvva,•Barkóczi•Dávid,•Kitt•Hodsden,•Paul•McGraw,•Sascha•Goldhofer,•Andrew•Metcalf,•Markus•Krogh,•Michael•Mathews,•Matt•Jared,•Juanfran,•Georgie•Kirschner,•Kenny•Lee,•Ted•Zhang,•Amit•Pahwa,•Inbal•Sinai,•Dan•Raine,•Schabse•Laks,•Michael•Tervoort,•Alexandre•Abreu,•Alan•Joseph•Williams,•NicolasD,•Cindy•Wong,•Reg•Braithwaite,•LocalPCGuy,•Jon•Friskics,•Chris•Merriman,•John•Pena,•Jacob•Katz,•Sue•Lockwood,•Magnus•Johansson,•Jeremy•Crapsey,•Grzegorz•Pawłowski,•nico•nuzzaci,•Christine•Wilks,•Hans•Bergren,•charles•montgomery,•Ariel•בר-לבב•Fogel,•Ivan•Kolev,•Daniel•Campos,•Hugh•Wood,•Christian•Bradford,•Frédéric•Harper,•Ionuţ•Dan•Popa,•Jeff•Trimble,•Rupert•Wood,•Trey•Carrico,•Pancho•Lopez,•Joël•kuijten,•Tom•A•Marra,•Jeff•Jewiss,•Jacob•Rios,•Paolo•Di•Stefano,•Soledad•Penades,•Chris•Gerber,•Andrey•Dolganov,•Wil•Moore•III,•Thomas•Martineau,•Kareem,•Ben•Thouret,•Udi•Nir,•Morgan•Laupies,•jory•carson-burson,•Nathan•L•Smith,•Eric•Damon•Walters,•Derry•Lozano-Hoyland,•Geoffrey•Wiseman,•mkeehner,•KatieK,•Scott•MacFarlane,•Brian•LaShomb,•Adrien•Mas,•christopher•ross,•Ian•Littman,•Dan•Atkinson,•Elliot•Jobe,•Nick•Dozier,•Peter•Wooley,•John•Hoover,•dan,•Martin•A.•Jackson,•Héctor•Fernando•Hurtado,•andy•ennamorato,•Paul•Seltmann,•Melissa•Gore,•Dave•Pollard,•Jack•Smith,•Philip•Da•Silva,•Guy•Israeli,•@megalithic,•Damian•Crawford,•Felix•Gliesche,•April•Carter•Grant,•Heidi,•jim•tierney,•Andrea•Giammarchi,•Nico•Vignola,•Don•Jones,•Chris•Hartjes,•Alex•Howes,•john•gibbon,•David•J.•Groom,•BBox,•Yu•'Dilys'•Sun,•Nate•Steiner,•Brandon•Satrom,•Brian•Wyant,•Wesley•Hales,•Ian•Pouncey,•Timothy•Kevin•Oxley,•George•Terezakis,•sanjay•raj,•Jordan•Harband,•Marko•McLion,•Wolfgang•Kaufmann,•Pascal•Peuckert,•Dave•Nugent,•Markus•Liebelt,•Welling•Guzman,•Nick•Cooley,•Daniel•Mesquita,•Robert•Syvarth,•Chris•Coyier,•Rémy•Bach,•Adam•Dougal,•Alistair•Duggin,•David•Loidolt,•Ed•Richer,•Brian•Chenault,•GoldFire•Studios,•Carles•Andrés,•Carlos•Cabo,•Yuya•Saito,•roberto•ricardo,•Barnett•Klane,•Mike•Moore,•Kevin•Marx,•Justin•Love,•Joe•Taylor,•Paul•Dijou,•Michael•Kohler,•Rob•Cassie,•Mike•Tierney,•Cody•Leroy•Lindley,•tofuji,•Shimon•Schwartz,•Raymond,•Luc•De•Brouwer,•David•Hayes,•Rhys•Brett-Bowen,•Dmitry,•Aziz•Khoury,•Dean,•Scott•Tolinski•-•Level•Up,•Clement•Boirie,•Djordje•Lukic,•Anton•Kotenko,•Rafael•Corral,•Philip•Hurwitz,•Jonathan•Pidgeon,•Jason•Campbell,•Joseph•C.,•SwiftOne,•Jan•Hohner,•Derick•Bailey,•getify,•Daniel•Cousineau,•Chris•Charlton,•Eric•Turner,•David•Turner,•Joël•Galeran,•Dharma•Vagabond,•adam,•Dirk•van•Bergen,•dave•♥♫★•furf,•Vedran•Zakanj,•Ryan•McAllen,•Natalie•Patrice•Tucker,•Eric•J.•Bivona,•Adam•Spooner,•Aaron•Cavano,•Kelly•Packer,•Eric•J,•Martin•Drenovac,•Emilis,•Michael•Pelikan,•Scott•F.•Walter,•Josh•Freeman,•Brandon•Hudgeons,•vijay•chennupati,•Bill•Glennon,•Robin•R.,•Troy•Forster,•otaku_coder,•Brad,•Scott,•Frederick•Ostrander,•Adam•Brill,•Seb•Flippence,•Michael•Anderson,•Jacob,•Adam•Randlett,•Standard,•Joshua•Clanton,•Sebastian•Kouba,•Chris•Deck,•SwordFire,•Hannes•Papenberg,•Richard•Woeber,•hnzz,•Rob•Crowther,•Jedidiah•Broadbent,•Sergey•Chernyshev,•Jay-Ar•Jamon,•Ben•Combee,•luciano•bonachela,•Mark•Tomlinson,•Kit•Cambridge,•Michael•Melgares,•Jacob•Adams,•Adrian•Bruinhout,•Bev•Wieber,•Scott•Puleo,•Thomas•Herzog,•April•Leone,•Daniel•Mizieliński,•Kees•van•Ginkel,•Jon•Abrams,•Erwin•Heiser,•Avi•Laviad,•David•newell,•Jean-Francois•Turcot,•Niko•Roberts,•Erik•Dana,•Charles•Neill,•Aaron•Holmes,•Grzegorz•Ziółkowski,•Nathan•Youngman,•Timothy,•Jacob•Mather,•Michael•Allan,•Mohit•Seth,•Ryan•Ewing,•Benjamin•Van•Treese,•Marcelo•Santos,•Denis•Wolf,•Phil•Keys,•Chris•Yung,•Timo•Tijhof,•Martin•Lekvall,•Agendine,•Greg•Whitworth,•Helen•Humphrey,•Dougal•Campbell,•Johannes•Harth,•Bruno•Girin,•Brian•Hough,•Darren•Newton,•Craig•McPheat,•Olivier•Tille,•Dennis•Roethig,•Mathias•Bynens,•Brendan•Stromberger,•sundeep,•John•Meyer,•Ron•Male,•John•F•Croston•III,•gigante,•Carl•Bergenhem,•B.J.•May,•Rebekah•Tyler,•Ted•Foxberry,•Jordan•Reese,•Terry•Suitor,•afeliz,•Tom•Kiefer,•Darragh•Duffy,•Kevin•Vanderbeken,•Andy•Pearson,•Simon•Mac•Donald,•Abid•Din,•Chris•Joel,•Tomas•Theunissen,•David•Dick,•Paul•Grock,•Brandon•Wood,•John•Weis,•dgrebb,•Nick•Jenkins,•Chuck•Lane,•Johnny•Megahan,•marzsman,•Tatu•Tamminen,•Geoffrey•Knauth,•Alexander•Tarmolov,•Jeremy•Tymes,•Chad•Auld,•Sean•Parmelee,•Rob•Staenke,•Dan•Bender,•Yannick•derwa,•Joshua•Jones,•Geert•Plaisier,•Tom•LeZotte,•Christen•Simpson,•Stefan•Bruvik,•Justin•Falcone,•Carlos•Santana,•Michael•Weiss,•Pablo•Villoslada,•Peter•deHaan,•Dimitris•Iliopoulos,•seyDoggy,•Adam•Jordens,•Noah•Kantrowitz,•Amol•M,•Matthew•Winnard,•Dirk•Ginader,•Phinam•Bui,•David•Rapson,•Andrew•Baxter,•Florian•Bougel,•Michael•George,•Alban•Escalier,•Daniel•Sellers,•Sasha•Rudan,•John•Green,•Robert•Kowalski,•David•I.•Teixeira•(@ditma,•Charles•Carpenter,•Justin•Yost,•Sam•S,•Denis•Ciccale,•Kevin•Sheurs,•Yannick•Croissant,•Pau•Fracés,•Stephen•McGowan,•Shawn•Searcy,•Chris•Ruppel,•Kevin•Lamping,•Jessica•Campbell,•Christopher•Schmitt,•Sablons,•Jonathan•Reisdorf,•Bunni•Gek,•Teddy•Huff,•Michael•Mullany,•Michael•Fürstenberg,•Carl•Henderson,•Rick•Yoesting,•Scott•Nichols,•Hernán•Ciudad,•Andrew•Maier,•Mike•Stapp,•Jesse•Shawl,•Sérgio•Lopes,•jsulak,•Shawn•Price,•Joel•Clermont,•Chris•Ridmann,•Sean•Timm,•Jason•Finch,•Aiden•Montgomery,•Elijah•Manor,•Derek•Gathright,•Jesse•Harlin,•Dillon•Curry,•Courtney•Myers,•Diego•Cadenas,•Arne•de•Bree,•João•Paulo•Dubas,•James•Taylor,•Philipp•Kraeutli,•Mihai•Păun,•Sam•Gharegozlou,•joshjs,•Matt•Murchison,•Eric•Windham,•Timo•Behrmann,•Andrew•Hall,•joshua•price,•Théophile•Villard
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (7114 > 79)

this & object prototypes/apB.md
|  18| This•book•series•is•being•produced•in•an•open•source•fashion,•including•editing•and•production.•We•owe•GitHub•a•debt•of•gratitude•for•making•that•sort•of•thing•possible•for•the•community!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (187 > 79)

this & object prototypes/apB.md
|  20| Thank•you•again•to•all•the•countless•folks•I•didn't•name•but•who•I•nonetheless•owe•thanks.•May•this•book•series•be•"owned"•by•all•of•us•and•serve•to•contribute•to•increasing•awareness•and•understanding•of•the•JavaScript•language,•to•the•benefit•of•all•current•and•future•community•contributors.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (294 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/ch3.md
|    |++++| /app/es6 & beyond/ch3.md
|   1|   1| # You Don't Know JS: ES6 & Beyond
|    |   2|+
|   2|   3| # Chapter 3: Organization
|   3|   4| 
|   4|   5| It's one thing to write JS code, but it's another to properly organize it. Utilizing common patterns for organization and reuse goes a long way to improving the readability and understandability of your code. Remember: code is at least as much about communicating to other developers as it is about feeding the computer instructions.
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/ch3.md
|    |++++| /app/es6 & beyond/ch3.md
|  19|  19| 
|  20|  20| ### Interfaces
|  21|  21| 
|  22|    |-At the time of this writing, ES6 section 25.1.1.2 (https://people.mozilla.org/~jorendorff/es6-draft.html#sec-iterator-interface) details the `Iterator` interface as having the following requirement:
|    |  22|+At the time of this writing, ES6 section 25.1.1.2 (<https://people.mozilla.org/~jorendorff/es6-draft.html#sec-iterator-interface>) details the `Iterator` interface as having the following requirement:
|  23|  23| 
|  24|  24| ```
|  25|  25| Iterator [required]
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/ch3.md
|    |++++| /app/es6 & beyond/ch3.md
| 365| 365| 
| 366| 366| In this case, the chances that you'll have a collision with other code or even a future JS feature is probably exceedingly low. But just beware of the slight possibility. And document what you're doing verbosely for posterity's sake.
| 367| 367| 
| 368|    |-**Note:** I've expounded on this particular technique in this blog post (http://blog.getify.com/iterating-es6-numbers/) if you want more details. And this comment (http://blog.getify.com/iterating-es6-numbers/comment-page-1/#comment-535294) even suggests a similar trick but for making string character ranges.
|    | 368|+**Note:** I've expounded on this particular technique in this blog post (<http://blog.getify.com/iterating-es6-numbers/>) if you want more details. And this comment (<http://blog.getify.com/iterating-es6-numbers/comment-page-1/#comment-535294>) even suggests a similar trick but for making string character ranges.
| 369| 369| 
| 370| 370| ### Iterator Consumption
| 371| 371| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/ch3.md
|    |++++| /app/es6 & beyond/ch3.md
| 992| 992| 
| 993| 993| ### Transpiling a Generator
| 994| 994| 
| 995|    |-Is it possible to represent a generator's capabilities prior to ES6? It turns out it is, and there are several great tools that do so, including most notably Facebook's Regenerator tool (https://facebook.github.io/regenerator/).
|    | 995|+Is it possible to represent a generator's capabilities prior to ES6? It turns out it is, and there are several great tools that do so, including most notably Facebook's Regenerator tool (<https://facebook.github.io/regenerator/>).
| 996| 996| 
| 997| 997| But just to better understand generators, let's try our hand at manually converting. Basically, we're going to create a simple closure-based state machine.
| 998| 998| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/ch3.md
|    |++++| /app/es6 & beyond/ch3.md
|1083|1083| 
|1084|1084| We've seen two major patterns:
|1085|1085| 
|1086|    |-* *Producing a series of values:* This usage can be simple (e.g., random strings or incremented numbers), or it can represent more structured data access (e.g., iterating over rows returned from a database query).
|    |1086|+- *Producing a series of values:* This usage can be simple (e.g., random strings or incremented numbers), or it can represent more structured data access (e.g., iterating over rows returned from a database query).
|1087|1087| 
|1088|1088|    Either way, we use the iterator to control a generator so that some logic can be invoked for each call to `next(..)`. Normal iterators on data structures merely pull values without any controlling logic.
|1089|1089| * *Queue of tasks to perform serially:* This usage often represents flow control for the steps in an algorithm, where each step requires retrieval of data from some external source. The fulfillment of each piece of data may be immediate, or may be asynchronously delayed.
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/ch3.md
|    |++++| /app/es6 & beyond/ch3.md
|1086|1086| * *Producing a series of values:* This usage can be simple (e.g., random strings or incremented numbers), or it can represent more structured data access (e.g., iterating over rows returned from a database query).
|1087|1087| 
|1088|1088|    Either way, we use the iterator to control a generator so that some logic can be invoked for each call to `next(..)`. Normal iterators on data structures merely pull values without any controlling logic.
|1089|    |-* *Queue of tasks to perform serially:* This usage often represents flow control for the steps in an algorithm, where each step requires retrieval of data from some external source. The fulfillment of each piece of data may be immediate, or may be asynchronously delayed.
|    |1089|+
|    |1090|+- *Queue of tasks to perform serially:* This usage often represents flow control for the steps in an algorithm, where each step requires retrieval of data from some external source. The fulfillment of each piece of data may be immediate, or may be asynchronously delayed.
|1090|1091| 
|1091|1092|    From the perspective of the code inside the generator, the details of sync or async at a `yield` point are entirely opaque. Moreover, these details are intentionally abstracted away, such as not to obscure the natural sequential expression of steps with such implementation complications. Abstraction also means the implementations can be swapped/refactored often without touching the code in the generator at all.
|1092|1093| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/ch3.md
|    |++++| /app/es6 & beyond/ch3.md
|1143|1143| 
|1144|1144| Before we get into the specific syntax, it's important to understand some fairly significant conceptual differences with ES6 modules compared to how you may have dealt with modules in the past:
|1145|1145| 
|1146|    |-* ES6 uses file-based modules, meaning one module per file. At this time, there is no standardized way of combining multiple modules into a single file.
|    |1146|+- ES6 uses file-based modules, meaning one module per file. At this time, there is no standardized way of combining multiple modules into a single file.
|1147|1147| 
|1148|1148|    That means that if you are going to load ES6 modules directly into a browser web application, you will be loading them individually, not as a large bundle in a single file as has been common in performance optimization efforts.
|1149|1149| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/ch3.md
|    |++++| /app/es6 & beyond/ch3.md
|1148|1148|    That means that if you are going to load ES6 modules directly into a browser web application, you will be loading them individually, not as a large bundle in a single file as has been common in performance optimization efforts.
|1149|1149| 
|1150|1150|    It's expected that the contemporaneous advent of HTTP/2 will significantly mitigate any such performance concerns, as it operates on a persistent socket connection and thus can very efficiently load many smaller files in parallel and interleaved with one another.
|1151|    |-* The API of an ES6 module is static. That is, you define statically what all the top-level exports are on your module's public API, and those cannot be amended later.
|    |1151|+
|    |1152|+- The API of an ES6 module is static. That is, you define statically what all the top-level exports are on your module's public API, and those cannot be amended later.
|1152|1153| 
|1153|1154|    Some uses are accustomed to being able to provide dynamic API definitions, where methods can be added/removed/replaced in response to runtime conditions. Either these uses will have to change to fit with ES6 static APIs, or they will have to restrain the dynamic changes to properties/methods of a second-level object.
|1154|1155| * ES6 modules are singletons. That is, there's only one instance of the module, which maintains its state. Every time you import that module into another module, you get a reference to the one centralized instance. If you want to be able to produce multiple module instances, your module will need to provide some sort of factory to do it.
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/ch3.md
|    |++++| /app/es6 & beyond/ch3.md
|1151|1151| * The API of an ES6 module is static. That is, you define statically what all the top-level exports are on your module's public API, and those cannot be amended later.
|1152|1152| 
|1153|1153|    Some uses are accustomed to being able to provide dynamic API definitions, where methods can be added/removed/replaced in response to runtime conditions. Either these uses will have to change to fit with ES6 static APIs, or they will have to restrain the dynamic changes to properties/methods of a second-level object.
|1154|    |-* ES6 modules are singletons. That is, there's only one instance of the module, which maintains its state. Every time you import that module into another module, you get a reference to the one centralized instance. If you want to be able to produce multiple module instances, your module will need to provide some sort of factory to do it.
|1155|    |-* The properties and methods you expose on a module's public API are not just normal assignments of values or references. They are actual bindings (almost like pointers) to the identifiers in your inner module definition.
|    |1154|+
|    |1155|+- ES6 modules are singletons. That is, there's only one instance of the module, which maintains its state. Every time you import that module into another module, you get a reference to the one centralized instance. If you want to be able to produce multiple module instances, your module will need to provide some sort of factory to do it.
|    |1156|+- The properties and methods you expose on a module's public API are not just normal assignments of values or references. They are actual bindings (almost like pointers) to the identifiers in your inner module definition.
|1156|1157| 
|1157|1158|    In pre-ES6 modules, if you put a property on your public API that holds a primitive value like a number or string, that property assignment was by value-copy, and any internal update of a corresponding variable would be separate and not affect the public copy on the API object.
|1158|1159| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/ch3.md
|    |++++| /app/es6 & beyond/ch3.md
|1157|1157|    In pre-ES6 modules, if you put a property on your public API that holds a primitive value like a number or string, that property assignment was by value-copy, and any internal update of a corresponding variable would be separate and not affect the public copy on the API object.
|1158|1158| 
|1159|1159|    With ES6, exporting a local private variable, even if it currently holds a primitive string/number/etc, exports a binding to the variable. If the module changes the  variable's value, the external import binding now resolves to that new value.
|1160|    |-* Importing a module is the same thing as statically requesting it to load (if it hasn't already). If you're in a browser, that implies a blocking load over the network. If you're on a server (i.e., Node.js), it's a blocking load from the filesystem.
|    |1160|+
|    |1161|+- Importing a module is the same thing as statically requesting it to load (if it hasn't already). If you're in a browser, that implies a blocking load over the network. If you're on a server (i.e., Node.js), it's a blocking load from the filesystem.
|1161|1162| 
|1162|1163|    However, don't panic about the performance implications. Because ES6 modules have static definitions, the import requirements can be statically scanned, and loads will happen preemptively, even before you've used the module.
|1163|1164| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/ch3.md
|    |++++| /app/es6 & beyond/ch3.md
|1569|1569| 
|1570|1570| In a rough conceptual sense, this is how circular `import` dependencies are validated and resolved:
|1571|1571| 
|1572|    |-* If the `"A"` module is loaded first, the first step is to scan the file and analyze all the exports, so it can register all those bindings available for import. Then it processes the `import .. from "B"`, which signals that it needs to go fetch `"B"`.
|1573|    |-* Once the engine loads `"B"`, it does the same analysis of its export bindings. When it sees the `import .. from "A"`, it knows the API of `"A"` already, so it can verify the `import` is valid. Now that it knows the `"B"` API, it can also validate the `import .. from "B"` in the waiting `"A"` module.
|    |1572|+- If the `"A"` module is loaded first, the first step is to scan the file and analyze all the exports, so it can register all those bindings available for import. Then it processes the `import .. from "B"`, which signals that it needs to go fetch `"B"`.
|    |1573|+- Once the engine loads `"B"`, it does the same analysis of its export bindings. When it sees the `import .. from "A"`, it knows the API of `"A"` already, so it can verify the `import` is valid. Now that it knows the `"B"` API, it can also validate the `import .. from "B"` in the waiting `"A"` module.
|1574|1574| 
|1575|1575| In essence, the mutual imports, along with the static verification that's done to validate both `import` statements, virtually composes the two separate module scopes (via the bindings), such that `foo(..)` can call `bar(..)` and vice versa. This is symmetric to if they had originally been declared in the same scope.
|1576|1576| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/ch3.md
|    |++++| /app/es6 & beyond/ch3.md
|1614|1614| 
|1615|1615| Whatever the tag looks like, you can be sure that under the covers it will use the default loader (or a customized one you've pre-specified, as we'll discuss in the next section).
|1616|1616| 
|1617|    |-Just like the tag you'll use in markup, the module loader itself is not specified by ES6. It is a separate, parallel standard (http://whatwg.github.io/loader/) controlled currently by the WHATWG browser standards group.
|    |1617|+Just like the tag you'll use in markup, the module loader itself is not specified by ES6. It is a separate, parallel standard (<http://whatwg.github.io/loader/>) controlled currently by the WHATWG browser standards group.
|1618|1618| 
|1619|1619| At the time of this writing, the following discussions reflect an early pass at the API design, and things are likely to change.
|1620|1620| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/ch3.md
|    |++++| /app/es6 & beyond/ch3.md
|1644|1644| 
|1645|1645| Another use for directly interacting with the module loader is if you want to customize its behavior through configuration or even redefinition.
|1646|1646| 
|1647|    |-At the time of this writing, there's a polyfill for the module loader API being developed (https://github.com/ModuleLoader/es6-module-loader). While details are scarce and highly subject to change, we can explore what possibilities may eventually land.
|    |1647|+At the time of this writing, there's a polyfill for the module loader API being developed (<https://github.com/ModuleLoader/es6-module-loader>). While details are scarce and highly subject to change, we can explore what possibilities may eventually land.
|1648|1648| 
|1649|1649| The `Reflect.Loader.import(..)` call may support a second argument for specifying various options to customize the import/load task. For example:
|1650|1650| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/ch3.md
|    |++++| /app/es6 & beyond/ch3.md
|1690|1690| 
|1691|1691| Some things to note:
|1692|1692| 
|1693|    |-* `class Foo` implies creating a (special) function of the name `Foo`, much like you did pre-ES6.
|1694|    |-* `constructor(..)` identifies the signature of that `Foo(..)` function, as well as its body contents.
|1695|    |-* Class methods use the same "concise method" syntax available to object literals, as discussed in Chapter 2. This also includes the concise generator form as discussed earlier in this chapter, as well as the ES5 getter/setter syntax. However, class methods are non-enumerable whereas object methods are by default enumerable.
|1696|    |-* Unlike object literals, there are no commas separating members in a `class` body! In fact, they're not even allowed.
|    |1693|+- `class Foo` implies creating a (special) function of the name `Foo`, much like you did pre-ES6.
|    |1694|+- `constructor(..)` identifies the signature of that `Foo(..)` function, as well as its body contents.
|    |1695|+- Class methods use the same "concise method" syntax available to object literals, as discussed in Chapter 2. This also includes the concise generator form as discussed earlier in this chapter, as well as the ES5 getter/setter syntax. However, class methods are non-enumerable whereas object methods are by default enumerable.
|    |1696|+- Unlike object literals, there are no commas separating members in a `class` body! In fact, they're not even allowed.
|1697|1697| 
|1698|1698| The `class` syntax definition in the previous snippet can be roughly thought of as this pre-ES6 equivalent, which probably will look fairly familiar to those who've done prototype-style coding before:
|1699|1699| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/ch3.md
|    |++++| /app/es6 & beyond/ch3.md
|1720|1720| 
|1721|1721| Caution! Though `class Foo` seems much like `function Foo()`, there are important differences:
|1722|1722| 
|1723|    |-* A `Foo(..)` call of `class Foo` *must* be made with `new`, as the pre-ES6 option of `Foo.call( obj )` will *not* work.
|1724|    |-* While `function Foo` is "hoisted" (see the *Scope & Closures* title of this series), `class Foo` is not; the `extends ..` clause specifies an expression that cannot be "hoisted." So, you must declare a `class` before you can instantiate it.
|1725|    |-* `class Foo` in the top global scope creates a lexical `Foo` identifier in that scope, but unlike `function Foo` does not create a global object property of that name.
|    |1723|+- A `Foo(..)` call of `class Foo` *must* be made with `new`, as the pre-ES6 option of `Foo.call( obj )` will *not* work.
|    |1724|+- While `function Foo` is "hoisted" (see the *Scope & Closures* title of this series), `class Foo` is not; the `extends ..` clause specifies an expression that cannot be "hoisted." So, you must declare a `class` before you can instantiate it.
|    |1725|+- `class Foo` in the top global scope creates a lexical `Foo` identifier in that scope, but unlike `function Foo` does not create a global object property of that name.
|1726|1726| 
|1727|1727| The established `instanceof` operator still works with ES6 classes, because `class` just creates a constructor function of the same name. However, ES6 introduces a way to customize how `instanceof` works, using `Symbol.hasInstance` (see "Well-Known Symbols" in Chapter 7).
|1728|1728| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/ch3.md
|    |++++| /app/es6 & beyond/ch3.md
|2040|2040| 
|2041|2041| ES6 introduces several new features that aid in code organization:
|2042|2042| 
|2043|    |-* Iterators provide sequential access to data or operations. They can be consumed by new language features like `for..of` and `...`.
|2044|    |-* Generators are locally pause/resume capable functions controlled by an iterator. They can be used to programmatically (and interactively, through `yield`/`next(..)` message passing) *generate* values to be consumed via iteration.
|2045|    |-* Modules allow private encapsulation of implementation details with a publicly exported API. Module definitions are file-based, singleton instances, and statically resolved at compile time.
|2046|    |-* Classes provide cleaner syntax around prototype-based coding. The addition of `super` also solves tricky issues with relative references in the `[[Prototype]]` chain.
|    |2043|+- Iterators provide sequential access to data or operations. They can be consumed by new language features like `for..of` and `...`.
|    |2044|+- Generators are locally pause/resume capable functions controlled by an iterator. They can be used to programmatically (and interactively, through `yield`/`next(..)` message passing) *generate* values to be consumed via iteration.
|    |2045|+- Modules allow private encapsulation of implementation details with a publicly exported API. Module definitions are file-based, singleton instances, and statically resolved at compile time.
|    |2046|+- Classes provide cleaner syntax around prototype-based coding. The addition of `super` also solves tricky issues with relative references in the `[[Prototype]]` chain.
|2047|2047| 
|2048|2048| These new tools should be your first stop when trying to improve the architecture of your JS projects by embracing ES6.

es6 & beyond/ch3.md
|   4| It's•one•thing•to•write•JS•code,•but•it's•another•to•properly•organize•it.•Utilizing•common•patterns•for•organization•and•reuse•goes•a•long•way•to•improving•the•readability•and•understandability•of•your•code.•Remember:•code•is•at•least•as•much•about•communicating•to•other•developers•as•it•is•about•feeding•the•computer•instructions.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (333 > 79)

es6 & beyond/ch3.md
|   6| ES6•has•several•important•features•that•help•significantly•improve•these•patterns,•including:•iterators,•generators,•modules,•and•classes.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (138 > 79)

es6 & beyond/ch3.md
|  10| An•*iterator*•is•a•structured•pattern•for•pulling•information•from•a•source•in•one-at-a-time•fashion.•This•pattern•has•been•around•programming•for•a•long•time.•And•to•be•sure,•JS•developers•have•been•ad•hoc•designing•and•implementing•iterators•in•JS•programs•since•before•anyone•can•remember,•so•it's•not•at•all•a•new•topic.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (324 > 79)

es6 & beyond/ch3.md
|  12| What•ES6•has•done•is•introduce•an•implicit•standardized•interface•for•iterators.•Many•of•the•built-in•data•structures•in•JavaScript•will•now•expose•an•iterator•implementing•this•standard.•And•you•can•also•construct•your•own•iterators•adhering•to•the•same•standard,•for•maximal•interoperability.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (294 > 79)

es6 & beyond/ch3.md
|  14| Iterators•are•a•way•of•organizing•ordered,•sequential,•pull-based•consumption•of•data.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (86 > 79)

es6 & beyond/ch3.md
|  16| For•example,•you•may•implement•a•utility•that•produces•a•new•unique•identifier•each•time•it's•requested.•Or•you•may•produce•an•infinite•series•of•values•that•rotate•through•a•fixed•list,•in•round-robin•fashion.•Or•you•could•attach•an•iterator•to•a•database•query•result•to•pull•out•new•rows•one•at•a•time.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (305 > 79)

es6 & beyond/ch3.md
|  18| Although•they•have•not•commonly•been•used•in•JS•in•such•a•manner,•iterators•can•also•be•thought•of•as•controlling•behavior•one•step•at•a•time.•This•can•be•illustrated•quite•clearly•when•considering•generators•(see•"Generators"•later•in•this•chapter),•though•you•can•certainly•do•the•same•without•generators.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (307 > 79)

es6 & beyond/ch3.md
|  22| At•the•time•of•this•writing,•ES6•section•25.1.1.2•(https://people.mozilla.org/~jorendorff/es6-draft.html#sec-iterator-interface)•details•the•`Iterator`•interface•as•having•the•following•requirement:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (198 > 79)

es6 & beyond/ch3.md
|  46| **Note:**•I•call•these•interfaces•implicit•not•because•they're•not•explicitly•called•out•in•the•specification•--•they•are!•--•but•because•they're•not•exposed•as•direct•objects•accessible•to•code.•JavaScript•does•not,•in•ES6,•support•any•notion•of•"interfaces,"•so•adherence•for•your•own•code•is•purely•conventional.•However,•wherever•JS•expects•an•iterator•--•a•`for..of`•loop,•for•instance•--•what•you•provide•must•adhere•to•these•interfaces•or•the•code•will•fail.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (465 > 79)

es6 & beyond/ch3.md
|  48| There's•also•an•`Iterable`•interface,•which•describes•objects•that•must•be•able•to•produce•iterators:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (101 > 79)

es6 & beyond/ch3.md
|  55| If•you•recall•from•"Built-In•Symbols"•in•Chapter•2,•`@@iterator`•is•the•special•built-in•symbol•representing•the•method•that•can•produce•iterator(s)•for•the•object.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (164 > 79)

es6 & beyond/ch3.md
|  59| The•`IteratorResult`•interface•specifies•that•the•return•value•from•any•iterator•operation•will•be•an•object•of•the•form:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (121 > 79)

es6 & beyond/ch3.md
|  65| Built-in•iterators•will•always•return•values•of•this•form,•but•more•properties•are,•of•course,•allowed•to•be•present•on•the•return•value,•as•necessary.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (151 > 79)

es6 & beyond/ch3.md
|  67| For•example,•a•custom•iterator•may•add•additional•metadata•to•the•result•object•(e.g.,•where•the•data•came•from,•how•long•it•took•to•retrieve,•cache•expiration•length,•frequency•for•the•appropriate•next•request,•etc.).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (218 > 79)

es6 & beyond/ch3.md
|  69| **Note:**•Technically,•`value`•is•optional•if•it•would•otherwise•be•considered•absent•or•unset,•such•as•in•the•case•of•the•value•`undefined`.•Because•accessing•`res.value`•will•produce•`undefined`•whether•it's•present•with•that•value•or•absent•entirely,•the•presence/absence•of•the•property•is•more•an•implementation•detail•or•an•optimization•(or•both),•rather•than•a•functional•issue.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (385 > 79)

es6 & beyond/ch3.md
|  73| Let's•look•at•an•array,•which•is•an•iterable,•and•the•iterator•it•can•produce•to•consume•its•values:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (100 > 79)

es6 & beyond/ch3.md
|  87| Each•time•the•method•located•at•`Symbol.iterator`•(see•Chapters•2•and•7)•is•invoked•on•this•`arr`•value,•it•will•produce•a•new•fresh•iterator.•Most•structures•will•do•the•same,•including•all•the•built-in•data•structures•in•JS.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (226 > 79)

es6 & beyond/ch3.md
|  89| However,•a•structure•like•an•event•queue•consumer•might•only•ever•produce•a•single•iterator•(singleton•pattern).•Or•a•structure•might•only•allow•one•unique•iterator•at•a•time,•requiring•the•current•one•to•be•completed•before•a•new•one•can•be•created.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (250 > 79)

es6 & beyond/ch3.md
|  91| The•`it`•iterator•in•the•previous•snippet•doesn't•report•`done:•true`•when•you•receive•the•`3`•value.•You•have•to•call•`next()`•again,•in•essence•going•beyond•the•end•of•the•array's•values,•to•get•the•complete•signal•`done:•true`.•It•may•not•be•clear•why•until•later•in•this•section,•but•that•design•decision•will•typically•be•considered•a•best•practice.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (354 > 79)

es6 & beyond/ch3.md
| 105| **Note:**•Technically,•the•primitive•value•itself•isn't•iterable,•but•thanks•to•"boxing",•`"hello•world"`•is•coerced/converted•to•its•`String`•object•wrapper•form,•which•*is*•an•iterable.•See•the•*Types•&•Grammar*•title•of•this•series•for•more•information.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (256 > 79)

es6 & beyond/ch3.md
| 107| ES6•also•includes•several•new•data•structures,•called•collections•(see•Chapter•5).•These•collections•are•not•only•iterables•themselves,•but•they•also•provide•API•method(s)•to•generate•an•iterator,•such•as:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (205 > 79)

es6 & beyond/ch3.md
| 122| The•`next(..)`•method•of•an•iterator•can•optionally•take•one•or•more•arguments.•The•built-in•iterators•mostly•do•not•exercise•this•capability,•though•a•generator's•iterator•definitely•does•(see•"Generators"•later•in•this•chapter).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (230 > 79)

es6 & beyond/ch3.md
| 124| By•general•convention,•including•all•the•built-in•iterators,•calling•`next(..)`•on•an•iterator•that's•already•been•exhausted•is•not•an•error,•but•will•simply•continue•to•return•the•result•`{•value:•undefined,•done:•true•}`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (223 > 79)

es6 & beyond/ch3.md
| 128| The•optional•methods•on•the•iterator•interface•--•`return(..)`•and•`throw(..)`•--•are•not•implemented•on•most•of•the•built-in•iterators.•However,•they•definitely•do•mean•something•in•the•context•of•generators,•so•see•"Generators"•for•more•specific•information.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (260 > 79)

es6 & beyond/ch3.md
| 130| `return(..)`•is•defined•as•sending•a•signal•to•an•iterator•that•the•consuming•code•is•complete•and•will•not•be•pulling•any•more•values•from•it.•This•signal•can•be•used•to•notify•the•producer•(the•iterator•responding•to•`next(..)`•calls)•to•perform•any•cleanup•it•may•need•to•do,•such•as•releasing/closing•network,•database,•or•file•handle•resources.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (349 > 79)

es6 & beyond/ch3.md
| 132| If•an•iterator•has•a•`return(..)`•present•and•any•condition•occurs•that•can•automatically•be•interpreted•as•abnormal•or•early•termination•of•consuming•the•iterator,•`return(..)`•will•automatically•be•called.•You•can•call•`return(..)`•manually•as•well.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (251 > 79)

es6 & beyond/ch3.md
| 134| `return(..)`•will•return•an•`IteratorResult`•object•just•like•`next(..)`•does.•In•general,•the•optional•value•you•send•to•`return(..)`•would•be•sent•back•as•`value`•in•this•`IteratorResult`,•though•there•are•nuanced•cases•where•that•might•not•be•true.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (251 > 79)

es6 & beyond/ch3.md
| 136| `throw(..)`•is•used•to•signal•an•exception/error•to•an•iterator,•which•possibly•may•be•used•differently•by•the•iterator•than•the•completion•signal•implied•by•`return(..)`.•It•does•not•necessarily•imply•a•complete•stop•of•the•iterator•as•`return(..)`•generally•does.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (265 > 79)

es6 & beyond/ch3.md
| 138| For•example,•with•generator•iterators,•`throw(..)`•actually•injects•a•thrown•exception•into•the•generator's•paused•execution•context,•which•can•be•caught•with•a•`try..catch`.•An•uncaught•`throw(..)`•exception•would•end•up•abnormally•aborting•the•generator's•iterator.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (267 > 79)

es6 & beyond/ch3.md
| 140| **Note:**•By•general•convention,•an•iterator•should•not•produce•any•more•results•after•having•called•`return(..)`•or•`throw(..)`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (129 > 79)

es6 & beyond/ch3.md
| 144| As•we•covered•in•the•"`for..of`"•section•in•Chapter•2,•the•ES6•`for..of`•loop•directly•consumes•a•conforming•iterable.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (118 > 79)

es6 & beyond/ch3.md
| 146| If•an•iterator•is•also•an•iterable,•it•can•be•used•directly•with•the•`for..of`•loop.•You•make•an•iterator•an•iterable•by•giving•it•a•`Symbol.iterator`•method•that•simply•returns•the•iterator•itself:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (198 > 79)

es6 & beyond/ch3.md
| 168| To•fully•understand•how•such•a•loop•works,•recall•the•`for`•equivalent•of•a•`for..of`•loop•from•Chapter•2:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (106 > 79)

es6 & beyond/ch3.md
| 177| If•you•look•closely,•you'll•see•that•`it.next()`•is•called•before•each•iteration,•and•then•`res.done`•is•consulted.•If•`res.done`•is•`true`,•the•expression•evaluates•to•`false`•and•the•iteration•doesn't•occur.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (209 > 79)

es6 & beyond/ch3.md
| 179| Recall•earlier•that•we•suggested•iterators•should•in•general•not•return•`done:•true`•along•with•the•final•intended•value•from•the•iterator.•Now•you•can•see•why.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (160 > 79)

es6 & beyond/ch3.md
| 181| If•an•iterator•returned•`{•done:•true,•value:•42•}`,•the•`for..of`•loop•would•completely•discard•the•`42`•value•and•it'd•be•lost.•For•this•reason,•assuming•that•your•iterator•may•be•consumed•by•patterns•like•the•`for..of`•loop•or•its•manual•`for`•equivalent,•you•should•probably•wait•to•return•`done:•true`•for•signaling•completion•until•after•you've•already•returned•all•relevant•iteration•values.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (398 > 79)

es6 & beyond/ch3.md
| 183| **Warning:**•You•can,•of•course,•intentionally•design•your•iterator•to•return•some•relevant•`value`•at•the•same•time•as•returning•`done:•true`.•But•don't•do•this•unless•you've•documented•that•as•the•case,•and•thus•implicitly•forced•consumers•of•your•iterator•to•use•a•different•pattern•for•iteration•than•is•implied•by•`for..of`•or•its•manual•equivalent•we•depicted.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (366 > 79)

es6 & beyond/ch3.md
| 187| In•addition•to•the•standard•built-in•iterators,•you•can•make•your•own!•All•it•takes•to•make•them•interoperate•with•ES6's•consumption•facilities•(e.g.,•the•`for..of`•loop•and•the•`...`•operator)•is•to•adhere•to•the•proper•interface(s).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (234 > 79)

es6 & beyond/ch3.md
| 189| Let's•try•constructing•an•iterator•that•produces•the•infinite•series•of•numbers•in•the•Fibonacci•sequence:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (106 > 79)

es6 & beyond/ch3.md
| 226| **Warning:**•If•we•hadn't•inserted•the•`break`•condition,•this•`for..of`•loop•would•have•run•forever,•which•is•probably•not•the•desired•result•in•terms•of•breaking•your•program!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (177 > 79)

es6 & beyond/ch3.md
| 228| The•`Fib[Symbol.iterator]()`•method•when•called•returns•the•iterator•object•with•`next()`•and•`return(..)`•methods•on•it.•State•is•maintained•via•`n1`•and•`n2`•variables,•which•are•kept•by•the•closure.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (201 > 79)

es6 & beyond/ch3.md
| 230| Let's•*next*•consider•an•iterator•that•is•designed•to•run•through•a•series•(aka•a•queue)•of•actions,•one•item•at•a•time:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (120 > 79)

es6 & beyond/ch3.md
| 261| The•iterator•on•`tasks`•steps•through•functions•found•in•the•`actions`•array•property,•if•any,•and•executes•them•one•at•a•time,•passing•in•whatever•arguments•you•pass•to•`next(..)`,•and•returning•any•return•value•to•you•in•the•standard•`IteratorResult`•object.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (260 > 79)

es6 & beyond/ch3.md
| 295| This•particular•usage•reinforces•that•iterators•can•be•a•pattern•for•organizing•functionality,•not•just•data.•It's•also•reminiscent•of•what•we'll•see•with•generators•in•the•next•section.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (186 > 79)

es6 & beyond/ch3.md
| 297| You•could•even•get•creative•and•define•an•iterator•that•represents•meta•operations•on•a•single•piece•of•data.•For•example,•we•could•define•an•iterator•for•numbers•that•by•default•ranges•from•`0`•up•to•(or•down•to,•for•negative•numbers)•the•number•in•question.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (259 > 79)

es6 & beyond/ch3.md
| 362| Those•are•some•fun•tricks,•though•the•practical•utility•is•somewhat•debatable.•But•then•again,•one•might•wonder•why•ES6•didn't•just•ship•with•such•a•minor•but•delightful•feature•easter•egg!?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (190 > 79)

es6 & beyond/ch3.md
| 364| I'd•be•remiss•if•I•didn't•at•least•remind•you•that•extending•native•prototypes•as•I'm•doing•in•the•previous•snippet•is•something•you•should•only•do•with•caution•and•awareness•of•potential•hazards.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (196 > 79)

es6 & beyond/ch3.md
| 366| In•this•case,•the•chances•that•you'll•have•a•collision•with•other•code•or•even•a•future•JS•feature•is•probably•exceedingly•low.•But•just•beware•of•the•slight•possibility.•And•document•what•you're•doing•verbosely•for•posterity's•sake.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (233 > 79)

es6 & beyond/ch3.md
| 368| **Note:**•I've•expounded•on•this•particular•technique•in•this•blog•post•(http://blog.getify.com/iterating-es6-numbers/)•if•you•want•more•details.•And•this•comment•(http://blog.getify.com/iterating-es6-numbers/comment-page-1/#comment-535294)•even•suggests•a•similar•trick•but•for•making•string•character•ranges.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (310 > 79)

es6 & beyond/ch3.md
| 372| We've•already•shown•consuming•an•iterator•item•by•item•with•the•`for..of`•loop.•But•there•are•other•ES6•structures•that•can•consume•iterators.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (142 > 79)

es6 & beyond/ch3.md
| 374| Let's•consider•the•iterator•attached•to•this•array•(though•any•iterator•we•choose•would•have•the•following•behaviors):
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (118 > 79)

es6 & beyond/ch3.md
| 397| Array•destructuring•(see•"Destructuring"•in•Chapter•2)•can•partially•or•completely•(if•paired•with•a•`...`•rest/gather•operator)•consume•an•iterator:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (149 > 79)

es6 & beyond/ch3.md
| 416| All•functions•run•to•completion,•right?•In•other•words,•once•a•function•starts•running,•it•finishes•before•anything•else•can•interrupt.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (135 > 79)

es6 & beyond/ch3.md
| 418| At•least•that's•how•it's•been•for•the•whole•history•of•JavaScript•up•to•this•point.•As•of•ES6,•a•new•somewhat•exotic•form•of•function•is•being•introduced,•called•a•generator.•A•generator•can•pause•itself•in•mid-execution,•and•can•be•resumed•either•right•away•or•at•a•later•time.•So•it•clearly•does•not•hold•the•run-to-completion•guarantee•that•normal•functions•do.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (364 > 79)

es6 & beyond/ch3.md
| 420| Moreover,•each•pause/resume•cycle•in•mid-execution•is•an•opportunity•for•two-way•message•passing,•where•the•generator•can•return•a•value,•and•the•controlling•code•that•resumes•it•can•send•a•value•back•in.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (204 > 79)

es6 & beyond/ch3.md
| 422| As•with•iterators•in•the•previous•section,•there•are•multiple•ways•to•think•about•what•a•generator•is,•or•rather•what•it's•most•useful•for.•There's•no•one•right•answer,•but•we'll•try•to•consider•several•angles.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (210 > 79)

es6 & beyond/ch3.md
| 424| **Note:**•See•the•*Async•&•Performance*•title•of•this•series•for•more•information•about•generators,•and•also•see•Chapter•4•of•this•current•title.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (145 > 79)

es6 & beyond/ch3.md
| 436| The•position•of•the•`*`•is•not•functionally•relevant.•The•same•declaration•could•be•written•as•any•of•the•following:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (116 > 79)

es6 & beyond/ch3.md
| 446| The•*only*•difference•here•is•stylistic•preference.•Most•other•literature•seems•to•prefer•`function*•foo(..)•{•..•}`.•I•prefer•`function•*foo(..)•{•..•}`,•so•that's•how•I'll•present•them•for•the•rest•of•this•title.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (214 > 79)

es6 & beyond/ch3.md
| 448| My•reason•is•purely•didactic•in•nature.•In•this•text,•when•referring•to•a•generator•function,•I•will•use•`*foo(..)`,•as•opposed•to•`foo(..)`•for•a•normal•function.•I•observe•that•`*foo(..)`•more•closely•matches•the•`*`•positioning•of•`function•*foo(..)•{•..•}`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (261 > 79)

es6 & beyond/ch3.md
| 450| Moreover,•as•we•saw•in•Chapter•2•with•concise•methods,•there's•a•concise•generator•form•in•object•literals:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (107 > 79)

es6 & beyond/ch3.md
| 458| I•would•say•that•with•concise•generators,•`*foo()•{•..•}`•is•rather•more•natural•than•`*•foo()•{•..•}`.•So•that•further•argues•for•matching•the•consistency•with•`*foo()`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (170 > 79)

es6 & beyond/ch3.md
| 464| Though•a•generator•is•declared•with•`*`,•you•still•execute•it•like•a•normal•function:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (85 > 79)

es6 & beyond/ch3.md
| 480| The•major•difference•is•that•executing•a•generator,•like•`foo(5,10)`•doesn't•actually•run•the•code•in•the•generator.•Instead,•it•produces•an•iterator•that•will•control•the•generator•to•execute•its•code.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (202 > 79)

es6 & beyond/ch3.md
| 497| Generators•also•have•a•new•keyword•you•can•use•inside•them,•to•signal•the•pause•point:•`yield`.•Consider:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (105 > 79)

es6 & beyond/ch3.md
| 510| In•this•`*foo()`•generator,•the•operations•on•the•first•two•lines•would•run•at•the•beginning,•then•`yield`•would•pause•the•generator.•If•and•when•resumed,•the•last•line•of•`*foo()`•would•run.•`yield`•can•appear•any•number•of•times•(or•not•at•all,•technically!)•in•a•generator.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (276 > 79)

es6 & beyond/ch3.md
| 512| You•can•even•put•`yield`•inside•a•loop,•and•it•can•represent•a•repeated•pause•point.•In•fact,•a•loop•that•never•completes•just•means•a•generator•that•never•completes,•which•is•completely•valid,•and•sometimes•entirely•what•you•need.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (231 > 79)

es6 & beyond/ch3.md
| 514| `yield`•is•not•just•a•pause•point.•It's•an•expression•that•sends•out•a•value•when•pausing•the•generator.•Here's•a•`while..true`•loop•in•a•generator•that•for•each•iteration•`yield`s•a•new•random•number:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (201 > 79)

es6 & beyond/ch3.md
| 524| The•`yield•..`•expression•not•only•sends•a•value•--•`yield`•without•a•value•is•the•same•as•`yield•undefined`•--•but•also•receives•(e.g.,•is•replaced•by)•the•eventual•resumption•value.•Consider:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (193 > 79)

es6 & beyond/ch3.md
| 533| This•generator•will•first•`yield`•out•the•value•`10`•when•pausing•itself.•When•you•resume•the•generator•--•using•the•`it.next(..)`•we•referred•to•earlier•--•whatever•value•(if•any)•you•resume•with•will•replace/complete•the•whole•`yield•10`•expression,•meaning•that•value•will•be•assigned•to•the•`x`•variable.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (308 > 79)

es6 & beyond/ch3.md
| 535| A•`yield•..`•expression•can•appear•anywhere•a•normal•expression•can.•For•example:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (81 > 79)

es6 & beyond/ch3.md
| 544| `*foo()`•here•has•four•`yield•..`•expressions.•Each•`yield`•results•in•the•generator•pausing•to•wait•for•a•resumption•value•that's•then•used•in•the•various•expression•contexts.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (176 > 79)

es6 & beyond/ch3.md
| 546| `yield`•is•not•technically•an•operator,•though•when•used•like•`yield•1`•it•sure•looks•like•it.•Because•`yield`•can•be•used•all•by•itself•as•in•`var•x•=•yield;`,•thinking•of•it•as•an•operator•can•sometimes•be•confusing.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (218 > 79)

es6 & beyond/ch3.md
| 548| Technically,•`yield•..`•is•of•the•same•"expression•precedence"•--•similar•conceptually•to•operator•precedence•--•as•an•assignment•expression•like•`a•=•3`.•That•means•`yield•..`•can•basically•appear•anywhere•`a•=•3`•can•validly•appear.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (234 > 79)

es6 & beyond/ch3.md
| 564| **Note:**•If•you•think•about•it,•it•makes•a•sort•of•conceptual•sense•that•a•`yield•..`•expression•would•behave•similar•to•an•assignment•expression.•When•a•paused•`yield`•expression•is•resumed,•it's•completed/replaced•by•the•resumption•value•in•a•way•that's•not•terribly•dissimilar•from•being•"assigned"•that•value.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (314 > 79)

es6 & beyond/ch3.md
| 566| The•takeaway:•if•you•need•`yield•..`•to•appear•in•a•position•where•an•assignment•like•`a•=•3`•would•not•itself•be•allowed,•it•needs•to•be•wrapped•in•a•`(•)`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (157 > 79)

es6 & beyond/ch3.md
| 568| Because•of•the•low•precedence•of•the•`yield`•keyword,•almost•any•expression•after•a•`yield•..`•will•be•computed•first•before•being•sent•with•`yield`.•Only•the•`...`•spread•operator•and•the•`,`•comma•operator•have•lower•precedence,•meaning•they'd•bind•after•the•`yield`•has•been•evaluated.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (288 > 79)

es6 & beyond/ch3.md
| 570| So•just•like•with•multiple•operators•in•normal•statements,•another•case•where•`(•)`•might•be•needed•is•to•override•(elevate)•the•low•precedence•of•`yield`,•such•as•the•difference•between•these•expressions:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (205 > 79)

es6 & beyond/ch3.md
| 578| Just•like•`=`•assignment,•`yield`•is•also•"right-associative,"•which•means•that•multiple•`yield`•expressions•in•succession•are•treated•as•having•been•`(•..•)`•grouped•from•right•to•left.•So,•`yield•yield•yield•3`•is•treated•as•`yield•(yield•(yield•3))`.•A•"left-associative"•interpretation•like•`((yield)•yield)•yield•3`•would•make•no•sense.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (341 > 79)

es6 & beyond/ch3.md
| 580| Just•like•with•operators,•it's•a•good•idea•to•use•`(•..•)`•grouping,•even•if•not•strictly•required,•to•disambiguate•your•intent•if•`yield`•is•combined•with•other•operators•or•`yield`s.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (184 > 79)

es6 & beyond/ch3.md
| 582| **Note:**•See•the•*Types•&•Grammar*•title•of•this•series•for•more•information•about•operator•precedence•and•associativity.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (122 > 79)

es6 & beyond/ch3.md
| 586| In•the•same•way•that•the•`*`•makes•a•`function`•declaration•into•`function•*`•generator•declaration,•a•`*`•makes•`yield`•into•`yield•*`,•which•is•a•very•different•mechanism,•called•*yield•delegation*.•Grammatically,•`yield•*..`•will•behave•the•same•as•a•`yield•..`,•as•discussed•in•the•previous•section.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (303 > 79)

es6 & beyond/ch3.md
| 588| `yield•*•..`•requires•an•iterable;•it•then•invokes•that•iterable's•iterator,•and•delegates•its•own•host•generator's•control•to•that•iterator•until•it's•exhausted.•Consider:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (172 > 79)

es6 & beyond/ch3.md
| 596| **Note:**•As•with•the•`*`•position•in•a•generator's•declaration•(discussed•earlier),•the•`*`•positioning•in•`yield•*`•expressions•is•stylistically•up•to•you.•Most•other•literature•prefers•`yield*•..`,•but•I•prefer•`yield•*..`,•for•very•symmetrical•reasons•as•already•discussed.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (277 > 79)

es6 & beyond/ch3.md
| 598| The•`[1,2,3]`•value•produces•an•iterator•that•will•step•through•its•values,•so•the•`*foo()`•generator•will•yield•those•values•out•as•it's•consumed.•Another•way•to•illustrate•the•behavior•is•in•yield•delegating•to•another•generator:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (231 > 79)

es6 & beyond/ch3.md
| 612| The•iterator•produced•when•`*bar()`•calls•`*foo()`•is•delegated•to•via•`yield•*`,•meaning•whatever•value(s)•`*foo()`•produces•will•be•produced•by•`*bar()`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (155 > 79)

es6 & beyond/ch3.md
| 614| Whereas•with•`yield•..`•the•completion•value•of•the•expression•comes•from•resuming•the•generator•with•`it.next(..)`,•the•completion•value•of•the•`yield•*..`•expression•comes•from•the•return•value•(if•any)•from•the•delegated-to•iterator.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (236 > 79)

es6 & beyond/ch3.md
| 616| Built-in•iterators•generally•don't•have•return•values,•as•we•covered•at•the•end•of•the•"Iterator•Loop"•section•earlier•in•this•chapter.•But•if•you•define•your•own•custom•iterator•(or•generator),•you•can•design•it•to•`return`•a•value,•which•`yield•*..`•would•capture:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (266 > 79)

es6 & beyond/ch3.md
| 638| While•the•`1`,•`2`,•and•`3`•values•are•`yield`ed•out•of•`*foo()`•and•then•out•of•`*bar()`,•the•`4`•value•returned•from•`*foo()`•is•the•completion•value•of•the•`yield•*foo()`•expression,•which•then•gets•assigned•to•`x`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (218 > 79)

es6 & beyond/ch3.md
| 640| Because•`yield•*`•can•call•another•generator•(by•way•of•delegating•to•its•iterator),•it•can•also•perform•a•sort•of•generator•recursion•by•calling•itself:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (153 > 79)

es6 & beyond/ch3.md
| 653| The•result•from•`foo(1)`•and•then•calling•the•iterator's•`next()`•to•run•it•through•its•recursive•steps•will•be•`24`.•The•first•`*foo(..)`•run•has•`x`•at•value•`1`,•which•is•`x•<•3`.•`x•+•1`•is•passed•recursively•to•`*foo(..)`,•so•`x`•is•then•`2`.•One•more•recursive•call•results•in•`x`•of•`3`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (294 > 79)

es6 & beyond/ch3.md
| 655| Now,•because•`x•<•3`•fails,•the•recursion•stops,•and•`return•3•*•2`•gives•`6`•back•to•the•previous•call's•`yield•*..`•expression,•which•is•then•assigned•to•`x`.•Another•`return•6•*•2`•returns•`12`•back•to•the•previous•call's•`x`.•Finally•`12•*•2`,•or•`24`,•is•returned•from•the•completed•run•of•the•`*foo(..)`•generator.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (320 > 79)

es6 & beyond/ch3.md
| 659| Earlier,•we•briefly•introduced•the•concept•that•generators•are•controlled•by•iterators.•Let's•fully•dig•into•that•now.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (118 > 79)

es6 & beyond/ch3.md
| 661| Recall•the•recursive•`*foo(..)`•from•the•previous•section.•Here's•how•we'd•run•it:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (82 > 79)

es6 & beyond/ch3.md
| 675| In•this•case,•the•generator•doesn't•really•ever•pause,•as•there's•no•`yield•..`•expression.•Instead,•`yield•*`•just•keeps•the•current•iteration•step•going•via•the•recursive•call.•So,•just•one•call•to•the•iterator's•`next()`•function•fully•runs•the•generator.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (258 > 79)

es6 & beyond/ch3.md
| 677| Now•let's•consider•a•generator•that•will•have•multiple•steps•and•thus•multiple•produced•values:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (95 > 79)

es6 & beyond/ch3.md
| 687| We•already•know•we•can•consume•an•iterator,•even•one•attached•to•a•generator•like•`*foo()`,•with•a•`for..of`•loop:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (114 > 79)

es6 & beyond/ch3.md
| 696| **Note:**•The•`for..of`•loop•requires•an•iterable.•A•generator•function•reference•(like•`foo`)•by•itself•is•not•an•iterable;•you•must•execute•it•with•`foo()`•to•get•the•iterator•(which•is•also•an•iterable,•as•we•explained•earlier•in•this•chapter).•You•could•theoretically•extend•the•`GeneratorPrototype`•(the•prototype•of•all•generator•functions)•with•a•`Symbol.iterator`•function•that•essentially•just•does•`return•this()`.•That•would•make•the•`foo`•reference•itself•an•iterable,•which•means•`for•(var•v•of•foo)•{•..•}`•(notice•no•`()`•on•`foo`)•will•work.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (557 > 79)

es6 & beyond/ch3.md
| 716| If•you•look•closely,•there•are•three•`yield`•statements•and•four•`next()`•calls.•That•may•seem•like•a•strange•mismatch.•In•fact,•there•will•always•be•one•more•`next()`•call•than•`yield`•expression,•assuming•all•are•evaluated•and•the•generator•is•fully•run•to•completion.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (270 > 79)

es6 & beyond/ch3.md
| 718| But•if•you•look•at•it•from•the•opposite•perspective•(inside-out•instead•of•outside-in),•the•matching•between•`yield`•and•`next()`•makes•more•sense.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (147 > 79)

es6 & beyond/ch3.md
| 720| Recall•that•the•`yield•..`•expression•will•be•completed•by•the•value•you•resume•the•generator•with.•That•means•the•argument•you•pass•to•`next(..)`•completes•whatever•`yield•..`•expression•is•currently•paused•waiting•for•a•completion.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (233 > 79)

es6 & beyond/ch3.md
| 733| In•this•snippet,•each•`yield•..`•is•sending•a•value•out•(`1`,•`2`,•`3`),•but•more•directly,•it's•pausing•the•generator•to•wait•for•a•value.•In•other•words,•it's•almost•like•asking•the•question,•"What•value•should•I•use•here?•I'll•wait•to•hear•back."
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (249 > 79)

es6 & beyond/ch3.md
| 743| That•first•`next()`•call•is•starting•up•the•generator•from•its•initial•paused•state,•and•running•it•to•the•first•`yield`.•At•the•moment•you•call•that•first•`next()`,•there's•no•`yield•..`•expression•waiting•for•a•completion.•If•you•passed•a•value•to•that•first•`next()`•call,•it•would•currently•just•be•thrown•away,•because•no•`yield`•is•waiting•to•receive•such•a•value.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (370 > 79)

es6 & beyond/ch3.md
| 745| **Note:**•An•early•proposal•for•the•"beyond•ES6"•timeframe•*would*•let•you•access•a•value•passed•to•an•initial•`next(..)`•call•via•a•separate•meta•property•(see•Chapter•7)•inside•the•generator.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (193 > 79)

es6 & beyond/ch3.md
| 747| Now,•let's•answer•the•currently•pending•question,•"What•value•should•I•assign•to•`x`?"•We'll•answer•it•by•sending•a•value•to•the•*next*•`next(..)`•call:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (152 > 79)

es6 & beyond/ch3.md
| 753| Now,•the•`x`•will•have•the•value•`"foo"`,•but•we've•also•asked•a•new•question,•"What•value•should•I•assign•to•`y`?"•And•we•answer:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (130 > 79)

es6 & beyond/ch3.md
| 766| Now•it•should•be•clearer•how•each•`yield•..`•"question"•is•answered•by•the•*next*•`next(..)`•call,•and•so•the•"extra"•`next()`•call•we•observed•is•always•just•the•initial•one•that•starts•everything•going.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (204 > 79)

es6 & beyond/ch3.md
| 787| You•can•think•of•a•generator•as•a•producer•of•values,•in•which•case•each•iteration•is•simply•producing•a•value•to•be•consumed.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (126 > 79)

es6 & beyond/ch3.md
| 789| But•in•a•more•general•sense,•perhaps•it's•appropriate•to•think•of•generators•as•controlled,•progressive•code•execution,•much•like•the•`tasks`•queue•example•from•the•earlier•"Custom•Iterators"•section.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (200 > 79)

es6 & beyond/ch3.md
| 791| **Note:**•That•perspective•is•exactly•the•motivation•for•how•we'll•revisit•generators•in•Chapter•4.•Specifically,•there's•no•reason•that•`next(..)`•has•to•be•called•right•away•after•the•previous•`next(..)`•finishes.•While•the•generator's•inner•execution•context•is•paused,•the•rest•of•the•program•continues•unblocked,•including•the•ability•for•asynchronous•actions•to•control•when•the•generator•is•resumed.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (406 > 79)

es6 & beyond/ch3.md
| 795| As•we•covered•earlier•in•this•chapter,•the•iterator•attached•to•a•generator•supports•the•optional•`return(..)`•and•`throw(..)`•methods.•Both•of•them•have•the•effect•of•aborting•a•paused•generator•immediately.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (208 > 79)

es6 & beyond/ch3.md
| 815| `return(x)`•is•kind•of•like•forcing•a•`return•x`•to•be•processed•at•exactly•that•moment,•such•that•you•get•the•specified•value•right•back.•Once•a•generator•is•completed,•either•normally•or•early•as•shown,•it•no•longer•processes•any•code•or•returns•any•values.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (259 > 79)

es6 & beyond/ch3.md
| 817| In•addition•to•`return(..)`•being•callable•manually,•it's•also•called•automatically•at•the•end•of•iteration•by•any•of•the•ES6•constructs•that•consume•iterators,•such•as•the•`for..of`•loop•and•the•`...`•spread•operator.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (218 > 79)

es6 & beyond/ch3.md
| 819| The•purpose•for•this•capability•is•so•the•generator•can•be•notified•if•the•controlling•code•is•no•longer•going•to•iterate•over•it•anymore,•so•that•it•can•perhaps•do•any•cleanup•tasks•(freeing•up•resources,•resetting•status,•etc.).•Identical•to•a•normal•function•cleanup•pattern,•the•main•way•to•accomplish•this•is•to•use•a•`finally`•clause:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (340 > 79)

es6 & beyond/ch3.md
| 846| **Warning:**•Do•not•put•a•`yield`•statement•inside•the•`finally`•clause!•It's•valid•and•legal,•but•it's•a•really•terrible•idea.•It•acts•in•a•sense•as•deferring•the•completion•of•the•`return(..)`•call•you•made,•as•any•`yield•..`•expressions•in•the•`finally`•clause•are•respected•to•pause•and•send•messages;•you•don't•immediately•get•a•completed•generator•as•expected.•There's•basically•no•good•reason•to•opt•in•to•that•crazy•*bad•part*,•so•avoid•doing•so!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (454 > 79)

es6 & beyond/ch3.md
| 848| In•addition•to•the•previous•snippet•showing•how•`return(..)`•aborts•the•generator•while•still•triggering•the•`finally`•clause,•it•also•demonstrates•that•a•generator•produces•a•whole•new•iterator•each•time•it's•called.•In•fact,•you•can•use•multiple•iterators•attached•to•the•same•generator•concurrently:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (302 > 79)

es6 & beyond/ch3.md
| 875| Instead•of•calling•`return(..)`,•you•can•call•`throw(..)`.•Just•like•`return(x)`•is•essentially•injecting•a•`return•x`•into•the•generator•at•its•current•pause•point,•calling•`throw(x)`•is•essentially•like•injecting•a•`throw•x`•at•the•pause•point.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (246 > 79)

es6 & beyond/ch3.md
| 877| Other•than•the•exception•behavior•(we•cover•what•that•means•to•`try`•clauses•in•the•next•section),•`throw(..)`•produces•the•same•sort•of•early•completion•that•aborts•the•generator's•run•at•its•current•pause•point.•For•example:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (226 > 79)

es6 & beyond/ch3.md
| 900| Because•`throw(..)`•basically•injects•a•`throw•..`•in•replacement•of•the•`yield•1`•line•of•the•generator,•and•nothing•handles•this•exception,•it•immediately•propagates•back•out•to•the•calling•code,•which•handles•it•with•a•`try..catch`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (235 > 79)

es6 & beyond/ch3.md
| 902| Unlike•`return(..)`,•the•iterator's•`throw(..)`•method•is•never•called•automatically.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (85 > 79)

es6 & beyond/ch3.md
| 904| Of•course,•though•not•shown•in•the•previous•snippet,•if•a•`try..finally`•clause•was•waiting•inside•the•generator•when•you•call•`throw(..)`,•the•`finally`•clause•would•be•given•a•chance•to•complete•before•the•exception•is•propagated•back•to•the•calling•code.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (257 > 79)

es6 & beyond/ch3.md
| 908| As•we've•already•hinted,•error•handling•with•generators•can•be•expressed•with•`try..catch`,•which•works•in•both•inbound•and•outbound•directions:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (144 > 79)

es6 & beyond/ch3.md
| 985| When•`*foo()`•calls•`yield•1`,•the•`1`•value•passes•through•`*bar()`•untouched,•as•we've•already•seen.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (102 > 79)

es6 & beyond/ch3.md
| 987| But•what's•most•interesting•about•this•snippet•is•that•when•`*foo()`•calls•`throw•"foo:•e2"`,•this•error•propagates•to•`*bar()`•and•is•immediately•caught•by•`*bar()`'s•`try..catch`•block.•The•error•doesn't•pass•through•`*bar()`•like•the•`1`•value•did.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (251 > 79)

es6 & beyond/ch3.md
| 989| `*bar()`'s•`catch`•then•does•a•normal•output•of•`err`•(`"foo:•e2"`)•and•then•`*bar()`•finishes•normally,•which•is•why•the•`{•value:•undefined,•done:•true•}`•iterator•result•comes•back•from•`it.next()`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (201 > 79)

es6 & beyond/ch3.md
| 991| If•`*bar()`•didn't•have•a•`try..catch`•around•the•`yield•*..`•expression,•the•error•would•of•course•propagate•all•the•way•out,•and•on•the•way•through•it•still•would•complete•(abort)•`*bar()`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (191 > 79)

es6 & beyond/ch3.md
| 995| Is•it•possible•to•represent•a•generator's•capabilities•prior•to•ES6?•It•turns•out•it•is,•and•there•are•several•great•tools•that•do•so,•including•most•notably•Facebook's•Regenerator•tool•(https://facebook.github.io/regenerator/).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (228 > 79)

es6 & beyond/ch3.md
| 997| But•just•to•better•understand•generators,•let's•try•our•hand•at•manually•converting.•Basically,•we're•going•to•create•a•simple•closure-based•state•machine.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (155 > 79)

es6 & beyond/ch3.md
|1008| To•start,•we'll•need•a•function•called•`foo()`•that•we•can•execute,•which•needs•to•return•an•iterator:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (102 > 79)

es6 & beyond/ch3.md
|1024| Now,•we•need•some•inner•variable•to•keep•track•of•where•we•are•in•the•steps•of•our•"generator"'s•logic.•We'll•call•it•`state`.•There•will•be•three•states:•`0`•initially,•`1`•while•waiting•to•fulfill•the•`yield`•expression,•and•`2`•once•the•generator•is•complete.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (262 > 79)

es6 & beyond/ch3.md
|1026| Each•time•`next(..)`•is•called,•we•need•to•process•the•next•step,•and•then•increment•`state`.•For•convenience,•we'll•put•each•step•into•a•`case`•clause•of•a•`switch`•statement,•and•we'll•hold•that•in•an•inner•function•called•`nextState(..)`•that•`next(..)`•can•call.•Also,•because•`x`•is•a•variable•across•the•overall•scope•of•the•"generator,"•it•needs•to•live•outside•the•`nextState(..)`•function.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (398 > 79)

es6 & beyond/ch3.md
|1028| Here•it•is•all•together•(obviously•somewhat•simplified,•to•keep•the•conceptual•illustration•clearer):
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (101 > 79)

es6 & beyond/ch3.md
|1078| Not•bad,•huh?•Hopefully•this•exercise•solidifies•in•your•mind•that•generators•are•actually•just•simple•syntax•for•state•machine•logic.•That•makes•them•widely•applicable.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (169 > 79)

es6 & beyond/ch3.md
|1082| So,•now•that•we•much•more•deeply•understand•how•generators•work,•what•are•they•useful•for?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (90 > 79)

es6 & beyond/ch3.md
|1086| *•*Producing•a•series•of•values:*•This•usage•can•be•simple•(e.g.,•random•strings•or•incremented•numbers),•or•it•can•represent•more•structured•data•access•(e.g.,•iterating•over•rows•returned•from•a•database•query).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (213 > 79)

es6 & beyond/ch3.md
|1088| •••Either•way,•we•use•the•iterator•to•control•a•generator•so•that•some•logic•can•be•invoked•for•each•call•to•`next(..)`.•Normal•iterators•on•data•structures•merely•pull•values•without•any•controlling•logic.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (206 > 79)

es6 & beyond/ch3.md
|1089| *•*Queue•of•tasks•to•perform•serially:*•This•usage•often•represents•flow•control•for•the•steps•in•an•algorithm,•where•each•step•requires•retrieval•of•data•from•some•external•source.•The•fulfillment•of•each•piece•of•data•may•be•immediate,•or•may•be•asynchronously•delayed.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (271 > 79)

es6 & beyond/ch3.md
|1091| •••From•the•perspective•of•the•code•inside•the•generator,•the•details•of•sync•or•async•at•a•`yield`•point•are•entirely•opaque.•Moreover,•these•details•are•intentionally•abstracted•away,•such•as•not•to•obscure•the•natural•sequential•expression•of•steps•with•such•implementation•complications.•Abstraction•also•means•the•implementations•can•be•swapped/refactored•often•without•touching•the•code•in•the•generator•at•all.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (417 > 79)

es6 & beyond/ch3.md
|1093| When•generators•are•viewed•in•light•of•these•uses,•they•become•a•lot•more•than•just•a•different•or•nicer•syntax•for•a•manual•state•machine.•They•are•a•powerful•abstraction•tool•for•organizing•and•controlling•orderly•production•and•consumption•of•data.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (251 > 79)

es6 & beyond/ch3.md
|1097| I•don't•think•it's•an•exaggeration•to•suggest•that•the•single•most•important•code•organization•pattern•in•all•of•JavaScript•is,•and•always•has•been,•the•module.•For•myself,•and•I•think•for•a•large•cross-section•of•the•community,•the•module•pattern•drives•the•vast•majority•of•code.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (281 > 79)

es6 & beyond/ch3.md
|1101| The•traditional•module•pattern•is•based•on•an•outer•function•with•inner•variables•and•functions,•and•a•returned•"public•API"•with•methods•that•have•closure•over•the•inner•data•and•capabilities.•It's•often•expressed•like•this:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (225 > 79)

es6 & beyond/ch3.md
|1119| This•`Hello(..)`•module•can•produce•multiple•instances•by•being•called•subsequent•times.•Sometimes,•a•module•is•only•called•for•as•a•singleton•(i.e.,•it•just•needs•one•instance),•in•which•case•a•slight•variation•on•the•previous•snippet,•using•an•IIFE,•is•common:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (262 > 79)

es6 & beyond/ch3.md
|1136| This•pattern•is•tried•and•tested.•It's•also•flexible•enough•to•have•a•wide•assortment•of•variations•for•a•number•of•different•scenarios.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (136 > 79)

es6 & beyond/ch3.md
|1138| One•of•the•most•common•is•the•Asynchronous•Module•Definition•(AMD),•and•another•is•the•Universal•Module•Definition•(UMD).•We•won't•cover•the•particulars•of•these•patterns•and•techniques•here,•but•they're•explained•extensively•in•many•places•online.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (248 > 79)

es6 & beyond/ch3.md
|1142| As•of•ES6,•we•no•longer•need•to•rely•on•the•enclosing•function•and•closure•to•provide•us•with•module•support.•ES6•modules•have•first•class•syntactic•and•functional•support.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (172 > 79)

es6 & beyond/ch3.md
|1144| Before•we•get•into•the•specific•syntax,•it's•important•to•understand•some•fairly•significant•conceptual•differences•with•ES6•modules•compared•to•how•you•may•have•dealt•with•modules•in•the•past:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (193 > 79)

es6 & beyond/ch3.md
|1146| *•ES6•uses•file-based•modules,•meaning•one•module•per•file.•At•this•time,•there•is•no•standardized•way•of•combining•multiple•modules•into•a•single•file.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (152 > 79)

es6 & beyond/ch3.md
|1148| •••That•means•that•if•you•are•going•to•load•ES6•modules•directly•into•a•browser•web•application,•you•will•be•loading•them•individually,•not•as•a•large•bundle•in•a•single•file•as•has•been•common•in•performance•optimization•efforts.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (230 > 79)

es6 & beyond/ch3.md
|1150| •••It's•expected•that•the•contemporaneous•advent•of•HTTP/2•will•significantly•mitigate•any•such•performance•concerns,•as•it•operates•on•a•persistent•socket•connection•and•thus•can•very•efficiently•load•many•smaller•files•in•parallel•and•interleaved•with•one•another.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (266 > 79)

es6 & beyond/ch3.md
|1151| *•The•API•of•an•ES6•module•is•static.•That•is,•you•define•statically•what•all•the•top-level•exports•are•on•your•module's•public•API,•and•those•cannot•be•amended•later.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (167 > 79)

es6 & beyond/ch3.md
|1153| •••Some•uses•are•accustomed•to•being•able•to•provide•dynamic•API•definitions,•where•methods•can•be•added/removed/replaced•in•response•to•runtime•conditions.•Either•these•uses•will•have•to•change•to•fit•with•ES6•static•APIs,•or•they•will•have•to•restrain•the•dynamic•changes•to•properties/methods•of•a•second-level•object.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (321 > 79)

es6 & beyond/ch3.md
|1154| *•ES6•modules•are•singletons.•That•is,•there's•only•one•instance•of•the•module,•which•maintains•its•state.•Every•time•you•import•that•module•into•another•module,•you•get•a•reference•to•the•one•centralized•instance.•If•you•want•to•be•able•to•produce•multiple•module•instances,•your•module•will•need•to•provide•some•sort•of•factory•to•do•it.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (339 > 79)

es6 & beyond/ch3.md
|1155| *•The•properties•and•methods•you•expose•on•a•module's•public•API•are•not•just•normal•assignments•of•values•or•references.•They•are•actual•bindings•(almost•like•pointers)•to•the•identifiers•in•your•inner•module•definition.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (221 > 79)

es6 & beyond/ch3.md
|1157| •••In•pre-ES6•modules,•if•you•put•a•property•on•your•public•API•that•holds•a•primitive•value•like•a•number•or•string,•that•property•assignment•was•by•value-copy,•and•any•internal•update•of•a•corresponding•variable•would•be•separate•and•not•affect•the•public•copy•on•the•API•object.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (281 > 79)

es6 & beyond/ch3.md
|1159| •••With•ES6,•exporting•a•local•private•variable,•even•if•it•currently•holds•a•primitive•string/number/etc,•exports•a•binding•to•the•variable.•If•the•module•changes•the••variable's•value,•the•external•import•binding•now•resolves•to•that•new•value.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (246 > 79)

es6 & beyond/ch3.md
|1160| *•Importing•a•module•is•the•same•thing•as•statically•requesting•it•to•load•(if•it•hasn't•already).•If•you're•in•a•browser,•that•implies•a•blocking•load•over•the•network.•If•you're•on•a•server•(i.e.,•Node.js),•it's•a•blocking•load•from•the•filesystem.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (250 > 79)

es6 & beyond/ch3.md
|1162| •••However,•don't•panic•about•the•performance•implications.•Because•ES6•modules•have•static•definitions,•the•import•requirements•can•be•statically•scanned,•and•loads•will•happen•preemptively,•even•before•you've•used•the•module.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (227 > 79)

es6 & beyond/ch3.md
|1164| •••ES6•doesn't•actually•specify•or•handle•the•mechanics•of•how•these•load•requests•work.•There's•a•separate•notion•of•a•Module•Loader,•where•each•hosting•environment•(browser,•Node.js,•etc.)•provides•a•default•Loader•appropriate•to•the•environment.•The•importing•of•a•module•uses•a•string•value•to•represent•where•to•get•the•module•(URL,•file•path,•etc.),•but•this•value•is•opaque•in•your•program•and•only•meaningful•to•the•Loader•itself.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (438 > 79)

es6 & beyond/ch3.md
|1166| •••You•can•define•your•own•custom•Loader•if•you•want•more•fine-grained•control•than•the•default•Loader•affords•--•which•is•basically•none,•as•it's•totally•hidden•from•your•program's•code.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (187 > 79)

es6 & beyond/ch3.md
|1168| As•you•can•see,•ES6•modules•will•serve•the•overall•use•case•of•organizing•code•with•encapsulation,•controlling•public•APIs,•and•referencing•dependency•imports.•But•they•have•a•very•particular•way•of•doing•so,•and•that•may•or•may•not•fit•very•closely•with•how•you've•already•been•doing•modules•for•years.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (303 > 79)

es6 & beyond/ch3.md
|1172| There's•a•similar,•but•not•fully•compatible,•module•syntax•called•CommonJS,•which•is•familiar•to•those•in•the•Node.js•ecosystem.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (128 > 79)

es6 & beyond/ch3.md
|1174| For•lack•of•a•more•tactful•way•to•say•this,•in•the•long•run,•ES6•modules•essentially•are•bound•to•supersede•all•previous•formats•and•standards•for•modules,•even•CommonJS,•as•they•are•built•on•syntactic•support•in•the•language.•This•will,•in•time,•inevitably•win•out•as•the•superior•approach,•if•for•no•other•reason•than•ubiquity.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (329 > 79)

es6 & beyond/ch3.md
|1176| We•face•a•fairly•long•road•to•get•to•that•point,•though.•There•are•literally•hundreds•of•thousands•of•CommonJS•style•modules•in•the•server-side•JavaScript•world,•and•10•times•that•many•modules•of•varying•format•standards•(UMD,•AMD,•ad•hoc)•in•the•browser•world.•It•will•take•many•years•for•the•transitions•to•make•any•significant•progress.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (339 > 79)

es6 & beyond/ch3.md
|1178| In•the•interim,•module•transpilers/converters•will•be•an•absolute•necessity.•You•might•as•well•just•get•used•to•that•new•reality.•Whether•you•author•in•regular•modules,•AMD,•UMD,•CommonJS,•or•ES6,•these•tools•will•have•to•parse•and•convert•to•a•format•that•is•suitable•for•whatever•environment•your•code•will•run•in.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (316 > 79)

es6 & beyond/ch3.md
|1180| For•Node.js,•that•probably•means•(for•now)•that•the•target•is•CommonJS.•For•the•browser,•it's•probably•UMD•or•AMD.•Expect•lots•of•flux•on•this•over•the•next•few•years•as•these•tools•mature•and•best•practices•emerge.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (215 > 79)

es6 & beyond/ch3.md
|1182| From•here•on•out,•my•best•advice•on•modules•is•this:•whatever•format•you've•been•religiously•attached•to•with•strong•affinity,•also•develop•an•appreciation•for•and•understanding•of•ES6•modules,•such•as•they•are,•and•let•your•other•module•tendencies•fade.•They•*are*•the•future•of•modules•in•JS,•even•if•that•reality•is•a•bit•of•a•ways•off.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (339 > 79)

es6 & beyond/ch3.md
|1186| The•two•main•new•keywords•that•enable•ES6•modules•are•`import`•and•`export`.•There's•lots•of•nuance•to•the•syntax,•so•let's•take•a•deeper•look.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (143 > 79)

es6 & beyond/ch3.md
|1188| **Warning:**•An•important•detail•that's•easy•to•overlook:•both•`import`•and•`export`•must•always•appear•in•the•top-level•scope•of•their•respective•usage.•For•example,•you•cannot•put•either•an•`import`•or•`export`•inside•an•`if`•conditional;•they•must•appear•outside•of•all•blocks•and•functions.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (294 > 79)

es6 & beyond/ch3.md
|1192| The•`export`•keyword•is•either•put•in•front•of•a•declaration,•or•used•as•an•operator•(of•sorts)•with•a•special•list•of•bindings•to•export.•Consider:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (148 > 79)

es6 & beyond/ch3.md
|1218| These•are•all•called•*named•exports*,•as•you•are•in•effect•exporting•the•name•bindings•of•the•variables/functions/etc.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (118 > 79)

es6 & beyond/ch3.md
|1220| Anything•you•don't•*label*•with•`export`•stays•private•inside•the•scope•of•the•module.•That•is,•although•something•like•`var•bar•=•..`•looks•like•it's•declaring•at•the•top-level•global•scope,•the•top-level•scope•is•actually•the•module•itself;•there•is•no•global•scope•in•modules.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (279 > 79)

es6 & beyond/ch3.md
|1222| **Note:**•Modules•*do*•still•have•access•to•`window`•and•all•the•"globals"•that•hang•off•it,•just•not•as•lexical•top-level•scope.•However,•you•really•should•stay•away•from•the•globals•in•your•modules•if•at•all•possible.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (219 > 79)

es6 & beyond/ch3.md
|1232| When•this•module•is•imported,•only•the•`bar`•member•name•is•available•to•import;•`foo`•stays•hidden•inside•the•module.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (118 > 79)

es6 & beyond/ch3.md
|1234| Module•exports•are•not•just•normal•assignments•of•values•or•references,•as•you're•accustomed•to•with•the•`=`•assignment•operator.•Actually,•when•you•export•something,•you're•exporting•a•binding•(kinda•like•a•pointer)•to•that•thing•(variable,•etc.).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (248 > 79)

es6 & beyond/ch3.md
|1236| Within•your•module,•if•you•change•the•value•of•a•variable•you•already•exported•a•binding•to,•even•if•it's•already•been•imported•(see•the•next•section),•the•imported•binding•will•resolve•to•the•current•(updated)•value.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (217 > 79)

es6 & beyond/ch3.md
|1248| When•this•module•is•imported,•regardless•of•whether•that's•before•or•after•the•`awesome•=•100`•setting,•once•that•assignment•has•happened,•the•imported•binding•resolves•to•the•`100`•value,•not•`42`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (198 > 79)

es6 & beyond/ch3.md
|1250| That's•because•the•binding•is,•in•essence,•a•reference•to,•or•a•pointer•to,•the•`awesome`•variable•itself,•rather•than•a•copy•of•its•value.•This•is•a•mostly•unprecedented•concept•for•JS•introduced•with•ES6•module•bindings.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (222 > 79)

es6 & beyond/ch3.md
|1252| Though•you•can•clearly•use•`export`•multiple•times•inside•a•module's•definition,•ES6•definitely•prefers•the•approach•that•a•module•has•a•single•export,•which•is•known•as•a•*default•export*.•In•the•words•of•some•members•of•the•TC39•committee,•you're•"rewarded•with•simpler•`import`•syntax"•if•you•follow•that•pattern,•and•conversely•"penalized"•with•more•verbose•syntax•if•you•don't.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (382 > 79)

es6 & beyond/ch3.md
|1254| A•default•export•sets•a•particular•exported•binding•to•be•the•default•when•importing•the•module.•The•name•of•the•binding•is•literally•`default`.•As•you'll•see•later,•when•importing•module•bindings•you•can•also•rename•them,•as•you•commonly•will•with•a•default•export.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (266 > 79)

es6 & beyond/ch3.md
|1256| There•can•only•be•one•`default`•per•module•definition.•We'll•cover•`import`•in•the•next•section,•and•you'll•see•how•the•`import`•syntax•is•more•concise•if•the•module•has•a•default•export.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (187 > 79)

es6 & beyond/ch3.md
|1258| There's•a•subtle•nuance•to•default•export•syntax•that•you•should•pay•close•attention•to.•Compare•these•two•snippets:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (116 > 79)

es6 & beyond/ch3.md
|1278| In•the•first•snippet,•you•are•exporting•a•binding•to•the•function•expression•value•at•that•moment,•*not*•to•the•identifier•`foo`.•In•other•words,•`export•default•..`•takes•an•expression.•If•you•later•assign•`foo`•to•a•different•value•inside•your•module,•the•module•import•still•reveals•the•function•originally•exported,•not•the•new•value.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (338 > 79)

es6 & beyond/ch3.md
|1288| **Warning:**•Although•the•`function•foo..`•part•here•is•technically•a•function•expression,•for•the•purposes•of•the•internal•scope•of•the•module,•it's•treated•like•a•function•declaration,•in•that•the•`foo`•name•is•bound•in•the•module's•top-level•scope•(often•called•"hoisting").•The•same•is•true•for•`export•default•class•Foo..`.•However,•while•you•*can*•do•`export•var•foo•=•..`,•you•currently•cannot•do•`export•default•var•foo•=•..`•(or•`let`•or•`const`),•in•a•frustrating•case•of•inconsistency.•At•the•time•of•this•writing,•there's•already•discussion•of•adding•that•capability•in•soon,•post-ES6,•for•consistency•sake.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (619 > 79)

es6 & beyond/ch3.md
|1300| In•this•version•of•the•module•export,•the•default•export•binding•is•actually•to•the•`foo`•identifier•rather•than•its•value,•so•you•get•the•previously•described•binding•behavior•(i.e.,•if•you•later•change•`foo`'s•value,•the•value•seen•on•the•import•side•will•also•be•updated).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (275 > 79)

es6 & beyond/ch3.md
|1302| Be•very•careful•of•this•subtle•gotcha•in•default•export•syntax,•especially•if•your•logic•calls•for•export•values•to•be•updated.•If•you•never•plan•to•update•a•default•export's•value,•`export•default•..`•is•fine.•If•you•do•plan•to•update•the•value,•you•must•use•`export•{•..•as•default•}`.•Either•way,•make•sure•to•comment•your•code•to•explain•your•intent!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (354 > 79)

es6 & beyond/ch3.md
|1304| Because•there•can•only•be•one•`default`•per•module,•you•may•be•tempted•to•design•your•module•with•one•default•export•of•an•object•with•all•your•API•methods•on•it,•such•as:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (171 > 79)

es6 & beyond/ch3.md
|1314| That•pattern•seems•to•map•closely•to•how•a•lot•of•developers•have•already•structured•their•pre-ES6•modules,•so•it•seems•like•a•natural•approach.•Unfortunately,•it•has•some•downsides•and•is•officially•discouraged.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (212 > 79)

es6 & beyond/ch3.md
|1316| In•particular,•the•JS•engine•cannot•statically•analyze•the•contents•of•a•plain•object,•which•means•it•cannot•do•some•optimizations•for•static•`import`•performance.•The•advantage•of•having•each•member•individually•and•explicitly•exported•is•that•the•engine•*can*•do•the•static•analysis•and•optimization.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (302 > 79)

es6 & beyond/ch3.md
|1318| If•your•API•has•more•than•one•member•already,•it•seems•like•these•principles•--•one•default•export•per•module,•and•all•API•members•as•named•exports•--•are•in•conflict,•doesn't•it?•But•you•*can*•have•a•single•default•export•as•well•as•other•named•exports;•they•are•not•mutually•exclusive.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (287 > 79)

es6 & beyond/ch3.md
|1338| **Note:**•In•this•previous•snippet,•I•used•the•name•`foo`•for•the•function•that•`default`•labels.•That•`foo`•name,•however,•is•ignored•for•the•purposes•of•export•--•`default`•is•actually•the•exported•name.•When•you•import•this•default•binding,•you•can•give•it•whatever•name•you•want,•as•you'll•see•in•the•next•section.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (318 > 79)

es6 & beyond/ch3.md
|1350| The•effects•of•mixing•default•and•named•exports•will•be•more•clear•when•we•cover•`import`•shortly.•But•essentially•it•means•that•the•most•concise•default•import•form•would•only•retrieve•the•`foo()`•function.•The•user•could•additionally•manually•list•`bar`•and•`baz`•as•named•imports,•if•they•want•them.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (302 > 79)

es6 & beyond/ch3.md
|1352| You•can•probably•imagine•how•tedious•that's•going•to•be•for•consumers•of•your•module•if•you•have•lots•of•named•export•bindings.•There•is•a•wildcard•import•form•where•you•import•all•of•a•module's•exports•within•a•single•namespace•object,•but•there's•no•way•to•wildcard•import•to•top-level•bindings.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (297 > 79)

es6 & beyond/ch3.md
|1354| Again,•the•ES6•module•mechanism•is•intentionally•designed•to•discourage•modules•with•lots•of•exports;•relatively•speaking,•it's•desired•that•such•approaches•be•a•little•more•difficult,•as•a•sort•of•social•engineering•to•encourage•simple•module•design•in•favor•of•large/complex•module•design.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (291 > 79)

es6 & beyond/ch3.md
|1356| I•would•probably•recommend•you•not•mix•default•export•with•named•exports,•especially•if•you•have•a•large•API•and•refactoring•to•separate•modules•isn't•practical•or•desired.•In•that•case,•just•use•all•named•exports,•and•document•that•consumers•of•your•module•should•probably•use•the•`import•*•as•..`•(namespace•import,•discussed•in•the•next•section)•approach•to•bring•the•whole•API•in•at•once•on•a•single•namespace.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (414 > 79)

es6 & beyond/ch3.md
|1358| We•mentioned•this•earlier,•but•let's•come•back•to•it•in•more•detail.•Other•than•the•`export•default•...`•form•that•exports•an•expression•value•binding,•all•other•export•forms•are•exporting•bindings•to•local•identifiers.•For•those•bindings,•if•you•change•the•value•of•a•variable•inside•a•module•after•exporting,•the•external•imported•binding•will•access•the•updated•value:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (371 > 79)

es6 & beyond/ch3.md
|1370| When•you•import•this•module,•the•`default`•and•`bar`•exports•will•be•bound•to•the•local•variables•`foo`•and•`bar`,•meaning•they•will•reveal•the•updated•`10`•and•`"cool"`•values.•The•values•at•time•of•export•are•irrelevant.•The•values•at•time•of•import•are•irrelevant.•The•bindings•are•live•links,•so•all•that•matters•is•what•the•current•value•is•when•you•access•the•binding.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (374 > 79)

es6 & beyond/ch3.md
|1372| **Warning:**•Two-way•bindings•are•not•allowed.•If•you•import•a•`foo`•from•a•module,•and•try•to•change•the•value•of•your•imported•`foo`•variable,•an•error•will•be•thrown!•We'll•revisit•that•in•the•next•section.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (209 > 79)

es6 & beyond/ch3.md
|1382| Those•forms•are•similar•to•just•first•importing•from•the•`"baz"`•module•then•listing•its•members•explicitly•for•export•from•your•module.•However,•in•these•forms,•the•members•of•the•`"baz"`•module•are•never•imported•to•your•module's•local•scope;•they•sort•of•pass•through•untouched.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (281 > 79)

es6 & beyond/ch3.md
|1386| To•import•a•module,•unsurprisingly•you•use•the•`import`•statement.•Just•as•`export`•has•several•nuanced•variations,•so•does•`import`,•so•spend•plenty•of•time•considering•the•following•issues•and•experimenting•with•your•options.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (227 > 79)

es6 & beyond/ch3.md
|1388| If•you•want•to•import•certain•specific•named•members•of•a•module's•API•into•your•top-level•scope,•you•use•this•syntax:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (118 > 79)

es6 & beyond/ch3.md
|1394| **Warning:**•The•`{•..•}`•syntax•here•may•look•like•an•object•literal,•or•even•an•object•destructuring•syntax.•However,•its•form•is•special•just•for•modules,•so•be•careful•not•to•confuse•it•with•other•`{•..•}`•patterns•elsewhere.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (229 > 79)

es6 & beyond/ch3.md
|1396| The•`"foo"`•string•is•called•a•*module•specifier*.•Because•the•whole•goal•is•statically•analyzable•syntax,•the•module•specifier•must•be•a•string•literal;•it•cannot•be•a•variable•holding•the•string•value.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (203 > 79)

es6 & beyond/ch3.md
|1398| From•the•perspective•of•your•ES6•code•and•the•JS•engine•itself,•the•contents•of•this•string•literal•are•completely•opaque•and•meaningless.•The•module•loader•will•interpret•this•string•as•an•instruction•of•where•to•find•the•desired•module,•either•as•a•URL•path•or•a•local•filesystem•path.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (287 > 79)

es6 & beyond/ch3.md
|1400| The•`foo`,•`bar`,•and•`baz`•identifiers•listed•must•match•named•exports•on•the•module's•API•(static•analysis•and•error•assertion•apply).•They•are•bound•as•top-level•identifiers•in•your•current•scope:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (199 > 79)

es6 & beyond/ch3.md
|1416| If•the•module•has•just•a•default•export•that•you•want•to•import•and•bind•to•an•identifier,•you•can•opt•to•skip•the•`{•..•}`•surrounding•syntax•for•that•binding.•The•`import`•in•this•preferred•case•gets•the•nicest•and•most•concise•of•the•`import`•syntax•forms:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (259 > 79)

es6 & beyond/ch3.md
|1425| **Note:**•As•explained•in•the•previous•section,•the•`default`•keyword•in•a•module's•`export`•specifies•a•named•export•where•the•name•is•actually•`default`,•as•is•illustrated•by•the•second•more•verbose•syntax•option.•The•renaming•from•`default`•to,•in•this•case,•`foo`,•is•explicit•in•the•latter•syntax•and•is•identical•yet•implicit•in•the•former•syntax.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (353 > 79)

es6 & beyond/ch3.md
|1427| You•can•also•import•a•default•export•along•with•other•named•exports,•if•the•module•has•such•a•definition.•Recall•this•module•definition•from•earlier:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (149 > 79)

es6 & beyond/ch3.md
|1446| The•strongly•suggested•approach•from•ES6's•module•philosophy•is•that•you•only•import•the•specific•bindings•from•a•module•that•you•need.•If•a•module•provides•10•API•methods,•but•you•only•need•two•of•them,•some•believe•it•wasteful•to•bring•in•the•entire•set•of•API•bindings.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (272 > 79)

es6 & beyond/ch3.md
|1448| One•benefit,•besides•code•being•more•explicit,•is•that•narrow•imports•make•static•analysis•and•error•detection•(accidentally•using•the•wrong•binding•name,•for•instance)•more•robust.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (181 > 79)

es6 & beyond/ch3.md
|1450| Of•course,•that's•just•the•standard•position•influenced•by•ES6•design•philosophy;•there's•nothing•that•requires•adherence•to•that•approach.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (139 > 79)

es6 & beyond/ch3.md
|1452| Many•developers•would•be•quick•to•point•out•that•such•approaches•can•be•more•tedious,•requiring•you•to•regularly•revisit•and•update•your•`import`•statement(s)•each•time•you•realize•you•need•something•else•from•a•module.•The•trade-off•is•in•exchange•for•convenience.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (265 > 79)

es6 & beyond/ch3.md
|1454| In•that•light,•the•preference•might•be•to•import•everything•from•the•module•into•a•single•namespace,•rather•than•importing•individual•members,•each•directly•into•the•scope.•Fortunately,•the•`import`•statement•has•a•syntax•variation•that•can•support•this•style•of•module•consumption,•called•*namespace•import*.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (309 > 79)

es6 & beyond/ch3.md
|1474| **Note:**•The•`*•as•..`•clause•requires•the•`*`•wildcard.•In•other•words,•you•cannot•do•something•like•`import•{•bar,•x•}•as•foo•from•"foo"`•to•bring•in•only•part•of•the•API•but•still•bind•to•the•`foo`•namespace.•I•would•have•liked•something•like•that,•but•for•ES6•it's•all•or•nothing•with•the•namespace•import.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (311 > 79)

es6 & beyond/ch3.md
|1476| If•the•module•you're•importing•with•`*•as•..`•has•a•default•export,•it•is•named•`default`•in•the•namespace•specified.•You•can•additionally•name•the•default•import•outside•of•the•namespace•binding,•as•a•top-level•identifier.•Consider•a•`"world"`•module•exported•as:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (264 > 79)

es6 & beyond/ch3.md
|1495| While•this•syntax•is•valid,•it•can•be•rather•confusing•that•one•method•of•the•module•(the•default•export)•is•bound•at•the•top-level•of•your•scope,•whereas•the•rest•of•the•named•exports•(and•one•called•`default`)•are•bound•as•properties•on•a•differently•named•(`hello`)•identifier•namespace.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (290 > 79)

es6 & beyond/ch3.md
|1497| As•I•mentioned•earlier,•my•suggestion•would•be•to•avoid•designing•your•module•exports•in•this•way,•to•reduce•the•chances•that•your•module's•users•will•suffer•these•strange•quirks.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (179 > 79)

es6 & beyond/ch3.md
|1499| All•imported•bindings•are•immutable•and/or•read-only.•Consider•the•previous•import;•all•of•these•subsequent•assignment•attempts•will•throw•`TypeError`s:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (152 > 79)

es6 & beyond/ch3.md
|1510| Recall•earlier•in•the•"`export`ing•API•Members"•section•that•we•talked•about•how•the•`bar`•and•`baz`•bindings•are•bound•to•the•actual•identifiers•inside•the•`"world"`•module.•That•means•if•the•module•changes•those•values,•`hello.bar`•and•`hello.baz`•now•reference•the•updated•values.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (283 > 79)

es6 & beyond/ch3.md
|1512| But•the•immutable/read-only•nature•of•your•local•imported•bindings•enforces•that•you•cannot•change•them•from•the•imported•bindings,•hence•the•`TypeError`s.•That's•pretty•important,•because•without•those•protections,•your•changes•would•end•up•affecting•all•other•consumers•of•the•module•(remember:•singleton),•which•could•create•some•very•surprising•side•effects!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (362 > 79)

es6 & beyond/ch3.md
|1514| Moreover,•though•a•module•*can*•change•its•API•members•from•the•inside,•you•should•be•very•cautious•of•intentionally•designing•your•modules•in•that•fashion.•ES6•modules•are•*intended*•to•be•static,•so•deviations•from•that•principle•should•be•rare•and•should•be•carefully•and•verbosely•documented.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (296 > 79)

es6 & beyond/ch3.md
|1516| **Warning:**•There•are•module•design•philosophies•where•you•actually•intend•to•let•a•consumer•change•the•value•of•a•property•on•your•API,•or•module•APIs•are•designed•to•be•"extended"•by•having•other•"plug-ins"•add•to•the•API•namespace.•As•we•just•asserted,•ES6•module•APIs•should•be•thought•of•and•designed•as•static•and•unchangeable,•which•strongly•restricts•and•discourages•these•alternative•module•design•patterns.•You•can•get•around•these•limitations•by•exporting•a•plain•object,•which•of•course•can•then•be•changed•at•will.•But•be•careful•and•think•twice•before•going•down•that•road.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (588 > 79)

es6 & beyond/ch3.md
|1518| Declarations•that•occur•as•a•result•of•an•`import`•are•"hoisted"•(see•the•*Scope•&•Closures*•title•of•this•series).•Consider:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (125 > 79)

es6 & beyond/ch3.md
|1526| `foo()`•can•run•because•not•only•did•the•static•resolution•of•the•`import•..`•statement•figure•out•what•`foo`•is•during•compilation,•but•it•also•"hoisted"•the•declaration•to•the•top•of•the•module's•scope,•thus•making•it•available•throughout•the•module.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (252 > 79)

es6 & beyond/ch3.md
|1534| This•form•does•not•actually•import•any•of•the•module's•bindings•into•your•scope.•It•loads•(if•not•already•loaded),•compiles•(if•not•already•compiled),•and•evaluates•(if•not•already•run)•the•`"foo"`•module.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (205 > 79)

es6 & beyond/ch3.md
|1536| In•general,•that•sort•of•import•is•probably•not•going•to•be•terribly•useful.•There•may•be•niche•cases•where•a•module's•definition•has•side•effects•(such•as•assigning•things•to•the•`window`/global•object).•You•could•also•envision•using•`import•"foo"`•as•a•sort•of•preload•for•a•module•that•may•be•needed•later.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (309 > 79)

es6 & beyond/ch3.md
|1542| I'll•state•off•the•bat•that•designing•systems•with•intentional•circular•dependency•is•generally•something•I•try•to•avoid.•That•having•been•said,•I•recognize•there•are•reasons•people•do•this•and•it•can•solve•some•sticky•design•situations.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (237 > 79)

es6 & beyond/ch3.md
|1566| These•two•functions,•`foo(..)`•and•`bar(..)`,•would•work•as•standard•function•declarations•if•they•were•in•the•same•scope,•because•the•declarations•are•"hoisted"•to•the•whole•scope•and•thus•available•to•each•other•regardless•of•authoring•order.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (244 > 79)

es6 & beyond/ch3.md
|1568| With•modules,•you•have•declarations•in•entirely•different•scopes,•so•ES6•has•to•do•extra•work•to•help•make•these•circular•references•work.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (138 > 79)

es6 & beyond/ch3.md
|1570| In•a•rough•conceptual•sense,•this•is•how•circular•`import`•dependencies•are•validated•and•resolved:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (99 > 79)

es6 & beyond/ch3.md
|1572| *•If•the•`"A"`•module•is•loaded•first,•the•first•step•is•to•scan•the•file•and•analyze•all•the•exports,•so•it•can•register•all•those•bindings•available•for•import.•Then•it•processes•the•`import•..•from•"B"`,•which•signals•that•it•needs•to•go•fetch•`"B"`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (253 > 79)

es6 & beyond/ch3.md
|1573| *•Once•the•engine•loads•`"B"`,•it•does•the•same•analysis•of•its•export•bindings.•When•it•sees•the•`import•..•from•"A"`,•it•knows•the•API•of•`"A"`•already,•so•it•can•verify•the•`import`•is•valid.•Now•that•it•knows•the•`"B"`•API,•it•can•also•validate•the•`import•..•from•"B"`•in•the•waiting•`"A"`•module.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (302 > 79)

es6 & beyond/ch3.md
|1575| In•essence,•the•mutual•imports,•along•with•the•static•verification•that's•done•to•validate•both•`import`•statements,•virtually•composes•the•two•separate•module•scopes•(via•the•bindings),•such•that•`foo(..)`•can•call•`bar(..)`•and•vice•versa.•This•is•symmetric•to•if•they•had•originally•been•declared•in•the•same•scope.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (318 > 79)

es6 & beyond/ch3.md
|1591| By•the•time•either•the•`foo(25)`•or•`bar(25)`•calls•are•executed,•all•the•analysis/compilation•of•all•modules•has•completed.•That•means•`foo(..)`•internally•knows•directly•about•`bar(..)`•and•`bar(..)`•internally•knows•directly•about•`foo(..)`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (244 > 79)

es6 & beyond/ch3.md
|1593| If•all•we•need•is•to•interact•with•`foo(..)`,•then•we•only•need•to•import•the•`"foo"`•module.•Likewise•with•`bar(..)`•and•the•`"bar"`•module.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (141 > 79)

es6 & beyond/ch3.md
|1605| The•static•loading•semantics•of•the•`import`•statement•mean•that•a•`"foo"`•and•`"bar"`•that•mutually•depend•on•each•other•via•`import`•will•ensure•that•both•are•loaded,•parsed,•and•compiled•before•either•of•them•runs.•So•their•circular•dependency•is•statically•resolved•and•this•works•as•you'd•expect.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (301 > 79)

es6 & beyond/ch3.md
|1609| We•asserted•at•the•beginning•of•this•"Modules"•section•that•the•`import`•statement•uses•a•separate•mechanism,•provided•by•the•hosting•environment•(browser,•Node.js,•etc.),•to•actually•resolve•the•module•specifier•string•into•some•useful•instruction•for•finding•and•loading•the•desired•module.•That•mechanism•is•the•system•*Module•Loader*.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (338 > 79)

es6 & beyond/ch3.md
|1611| The•default•module•loader•provided•by•the•environment•will•interpret•a•module•specifier•as•a•URL•if•in•the•browser,•and•(generally)•as•a•local•filesystem•path•if•on•a•server•such•as•Node.js.•The•default•behavior•is•to•assume•the•loaded•file•is•authored•in•the•ES6•standard•module•format.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (287 > 79)

es6 & beyond/ch3.md
|1613| Moreover,•you•will•be•able•to•load•a•module•into•the•browser•via•an•HTML•tag,•similar•to•how•current•script•programs•are•loaded.•At•the•time•of•this•writing,•it's•not•fully•clear•if•this•tag•will•be•`<script•type="module">`•or•`<module>`.•ES6•doesn't•control•that•decision,•but•discussions•in•the•appropriate•standards•bodies•are•already•well•along•in•parallel•of•ES6.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (368 > 79)

es6 & beyond/ch3.md
|1615| Whatever•the•tag•looks•like,•you•can•be•sure•that•under•the•covers•it•will•use•the•default•loader•(or•a•customized•one•you've•pre-specified,•as•we'll•discuss•in•the•next•section).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (179 > 79)

es6 & beyond/ch3.md
|1617| Just•like•the•tag•you'll•use•in•markup,•the•module•loader•itself•is•not•specified•by•ES6.•It•is•a•separate,•parallel•standard•(http://whatwg.github.io/loader/)•controlled•currently•by•the•WHATWG•browser•standards•group.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (219 > 79)

es6 & beyond/ch3.md
|1619| At•the•time•of•this•writing,•the•following•discussions•reflect•an•early•pass•at•the•API•design,•and•things•are•likely•to•change.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (128 > 79)

es6 & beyond/ch3.md
|1623| One•use•for•interacting•directly•with•the•module•loader•is•if•a•non-module•needs•to•load•a•module.•Consider:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (108 > 79)

es6 & beyond/ch3.md
|1635| The•`Reflect.Loader.import(..)`•utility•imports•the•entire•module•onto•the•named•parameter•(as•a•namespace),•just•like•the•`import•*•as•foo•..`•namespace•import•we•discussed•earlier.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (182 > 79)

es6 & beyond/ch3.md
|1637| **Note:**•The•`Reflect.Loader.import(..)`•utility•returns•a•promise•that•is•fulfilled•once•the•module•is•ready.•To•import•multiple•modules,•you•can•compose•promises•from•multiple•`Reflect.Loader.import(..)`•calls•using•`Promise.all([•..•])`.•For•more•information•about•Promises,•see•"Promises"•in•Chapter•4.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (307 > 79)

es6 & beyond/ch3.md
|1639| You•can•also•use•`Reflect.Loader.import(..)`•in•a•real•module•to•dynamically/conditionally•load•a•module,•where•`import`•itself•would•not•work.•You•might,•for•instance,•choose•to•load•a•module•containing•a•polyfill•for•some•ES7+•feature•if•a•feature•test•reveals•it's•not•defined•by•the•current•engine.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (302 > 79)

es6 & beyond/ch3.md
|1641| For•performance•reasons,•you'll•want•to•avoid•dynamic•loading•whenever•possible,•as•it•hampers•the•ability•of•the•JS•engine•to•fire•off•early•fetches•from•its•static•analysis.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (175 > 79)

es6 & beyond/ch3.md
|1645| Another•use•for•directly•interacting•with•the•module•loader•is•if•you•want•to•customize•its•behavior•through•configuration•or•even•redefinition.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (144 > 79)

es6 & beyond/ch3.md
|1647| At•the•time•of•this•writing,•there's•a•polyfill•for•the•module•loader•API•being•developed•(https://github.com/ModuleLoader/es6-module-loader).•While•details•are•scarce•and•highly•subject•to•change,•we•can•explore•what•possibilities•may•eventually•land.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (252 > 79)

es6 & beyond/ch3.md
|1649| The•`Reflect.Loader.import(..)`•call•may•support•a•second•argument•for•specifying•various•options•to•customize•the•import/load•task.•For•example:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (145 > 79)

es6 & beyond/ch3.md
|1658| It's•also•expected•that•a•customization•will•be•provided•(through•some•means)•for•hooking•into•the•process•of•loading•a•module,•where•a•translation/transpilation•could•occur•after•load•but•before•the•engine•compiles•the•module.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (227 > 79)

es6 & beyond/ch3.md
|1660| For•example,•you•could•load•something•that's•not•already•an•ES6-compliant•module•format•(e.g.,•CoffeeScript,•TypeScript,•CommonJS,•AMD).•Your•translation•step•could•then•convert•it•to•an•ES6-compliant•module•for•the•engine•to•then•process.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (239 > 79)

es6 & beyond/ch3.md
|1664| From•nearly•the•beginning•of•JavaScript,•syntax•and•development•patterns•have•all•strived•(read:•struggled)•to•put•on•a•facade•of•supporting•class-oriented•development.•With•things•like•`new`•and•`instanceof`•and•a•`.constructor`•property,•who•couldn't•help•but•be•teased•that•JS•had•classes•hidden•somewhere•inside•its•prototype•system?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (337 > 79)

es6 & beyond/ch3.md
|1666| Of•course,•JS•"classes"•aren't•nearly•the•same•as•classical•classes.•The•differences•are•well•documented,•so•I•won't•belabor•that•point•any•further•here.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (153 > 79)

es6 & beyond/ch3.md
|1668| **Note:**•To•learn•more•about•the•patterns•used•in•JS•to•fake•"classes,"•and•an•alternative•view•of•prototypes•called•"delegation,"•see•the•second•half•of•the•*this•&•Object•Prototypes*•title•of•this•series.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (207 > 79)

es6 & beyond/ch3.md
|1672| Although•JS's•prototype•mechanism•doesn't•work•like•traditional•classes,•that•doesn't•stop•the•strong•tide•of•demand•on•the•language•to•extend•the•syntactic•sugar•so•that•expressing•"classes"•looks•more•like•real•classes.•Enter•the•ES6•`class`•keyword•and•its•associated•mechanism.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (281 > 79)

es6 & beyond/ch3.md
|1674| This•feature•is•the•result•of•a•highly•contentious•and•drawn-out•debate,•and•represents•a•smaller•subset•compromise•from•several•strongly•opposed•views•on•how•to•approach•JS•classes.•Most•developers•who•want•full•classes•in•JS•will•find•parts•of•the•new•syntax•quite•inviting,•but•will•find•important•bits•still•missing.•Don't•worry,•though.•TC39•is•already•working•on•additional•features•to•augment•classes•in•the•post-ES6•timeframe.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (434 > 79)

es6 & beyond/ch3.md
|1676| At•the•heart•of•the•new•ES6•class•mechanism•is•the•`class`•keyword,•which•identifies•a•*block*•where•the•contents•define•the•members•of•a•function's•prototype.•Consider:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (169 > 79)

es6 & beyond/ch3.md
|1693| *•`class•Foo`•implies•creating•a•(special)•function•of•the•name•`Foo`,•much•like•you•did•pre-ES6.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (97 > 79)

es6 & beyond/ch3.md
|1694| *•`constructor(..)`•identifies•the•signature•of•that•`Foo(..)`•function,•as•well•as•its•body•contents.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (102 > 79)

es6 & beyond/ch3.md
|1695| *•Class•methods•use•the•same•"concise•method"•syntax•available•to•object•literals,•as•discussed•in•Chapter•2.•This•also•includes•the•concise•generator•form•as•discussed•earlier•in•this•chapter,•as•well•as•the•ES5•getter/setter•syntax.•However,•class•methods•are•non-enumerable•whereas•object•methods•are•by•default•enumerable.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (326 > 79)

es6 & beyond/ch3.md
|1696| *•Unlike•object•literals,•there•are•no•commas•separating•members•in•a•`class`•body!•In•fact,•they're•not•even•allowed.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (118 > 79)

es6 & beyond/ch3.md
|1698| The•`class`•syntax•definition•in•the•previous•snippet•can•be•roughly•thought•of•as•this•pre-ES6•equivalent,•which•probably•will•look•fairly•familiar•to•those•who've•done•prototype-style•coding•before:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (200 > 79)

es6 & beyond/ch3.md
|1711| In•either•the•pre-ES6•form•or•the•new•ES6•`class`•form,•this•"class"•can•now•be•instantiated•and•used•just•as•you'd•expect:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (123 > 79)

es6 & beyond/ch3.md
|1721| Caution!•Though•`class•Foo`•seems•much•like•`function•Foo()`,•there•are•important•differences:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (94 > 79)

es6 & beyond/ch3.md
|1723| *•A•`Foo(..)`•call•of•`class•Foo`•*must*•be•made•with•`new`,•as•the•pre-ES6•option•of•`Foo.call(•obj•)`•will•*not*•work.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (120 > 79)

es6 & beyond/ch3.md
|1724| *•While•`function•Foo`•is•"hoisted"•(see•the•*Scope•&•Closures*•title•of•this•series),•`class•Foo`•is•not;•the•`extends•..`•clause•specifies•an•expression•that•cannot•be•"hoisted."•So,•you•must•declare•a•`class`•before•you•can•instantiate•it.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (242 > 79)

es6 & beyond/ch3.md
|1725| *•`class•Foo`•in•the•top•global•scope•creates•a•lexical•`Foo`•identifier•in•that•scope,•but•unlike•`function•Foo`•does•not•create•a•global•object•property•of•that•name.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (168 > 79)

es6 & beyond/ch3.md
|1727| The•established•`instanceof`•operator•still•works•with•ES6•classes,•because•`class`•just•creates•a•constructor•function•of•the•same•name.•However,•ES6•introduces•a•way•to•customize•how•`instanceof`•works,•using•`Symbol.hasInstance`•(see•"Well-Known•Symbols"•in•Chapter•7).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (272 > 79)

es6 & beyond/ch3.md
|1729| Another•way•of•thinking•about•`class`,•which•I•find•more•convenient,•is•as•a•*macro*•that•is•used•to•automatically•populate•a•`prototype`•object.•Optionally,•it•also•wires•up•the•`[[Prototype]]`•relationship•if•using•`extends`•(see•the•next•section).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (250 > 79)

es6 & beyond/ch3.md
|1731| An•ES6•`class`•isn't•really•an•entity•itself,•but•a•meta•concept•that•wraps•around•other•concrete•entities,•such•as•functions•and•properties,•and•ties•them•together.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (165 > 79)

es6 & beyond/ch3.md
|1733| **Tip:**•In•addition•to•the•declaration•form,•a•`class`•can•also•be•an•expression,•as•in:•`var•x•=•class•Y•{•..•}`.•This•is•primarily•useful•for•passing•a•class•definition•(technically,•the•constructor•itself)•as•a•function•argument•or•assigning•it•to•an•object•property.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (271 > 79)

es6 & beyond/ch3.md
|1737| ES6•classes•also•have•syntactic•sugar•for•establishing•the•`[[Prototype]]`•delegation•link•between•two•function•prototypes•--•commonly•mislabeled•"inheritance"•or•confusingly•labeled•"prototype•inheritance"•--•using•the•class-oriented•familiar•terminology•`extends`:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (266 > 79)

es6 & beyond/ch3.md
|1759| A•significant•new•addition•is•`super`,•which•is•actually•something•not•directly•possible•pre-ES6•(without•some•unfortunate•hack•trade-offs).•In•the•constructor,•`super`•automatically•refers•to•the•"parent•constructor,"•which•in•the•previous•example•is•`Foo(..)`.•In•a•method,•it•refers•to•the•"parent•object,"•such•that•you•can•then•make•a•property/method•access•off•it,•such•as•`super.gimmeXY()`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (397 > 79)

es6 & beyond/ch3.md
|1761| `Bar•extends•Foo`•of•course•means•to•link•the•`[[Prototype]]`•of•`Bar.prototype`•to•`Foo.prototype`.•So,•`super`•in•a•method•like•`gimmeXYZ()`•specifically•means•`Foo.prototype`,•whereas•`super`•means•`Foo`•when•used•in•the•`Bar`•constructor.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (242 > 79)

es6 & beyond/ch3.md
|1763| **Note:**•`super`•is•not•limited•to•`class`•declarations.•It•also•works•in•object•literals,•in•much•the•same•way•we're•discussing•here.•See•"Object•`super`"•in•Chapter•2•for•more•information.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (191 > 79)

es6 & beyond/ch3.md
|1767| It•is•not•insignificant•to•note•that•`super`•behaves•differently•depending•on•where•it•appears.•In•fairness,•most•of•the•time,•that•won't•be•a•problem.•But•surprises•await•if•you•deviate•from•a•narrow•norm.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (206 > 79)

es6 & beyond/ch3.md
|1769| There•may•be•cases•where•in•the•constructor•you•would•want•to•reference•the•`Foo.prototype`,•such•as•to•directly•access•one•of•its•properties/methods.•However,•`super`•in•the•constructor•cannot•be•used•in•that•way;•`super.prototype`•will•not•work.•`super(..)`•means•roughly•to•call•`new•Foo(..)`,•but•isn't•actually•a•usable•reference•to•`Foo`•itself.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (351 > 79)

es6 & beyond/ch3.md
|1771| Symmetrically,•you•may•want•to•reference•the•`Foo(..)`•function•from•inside•a•non-constructor•method.•`super.constructor`•will•point•at•`Foo(..)`•the•function,•but•beware•that•this•function•can•*only*•be•invoked•with•`new`.•`new•super.constructor(..)`•would•be•valid,•but•it•wouldn't•be•terribly•useful•in•most•cases,•because•you•can't•make•that•call•use•or•reference•the•current•`this`•object•context,•which•is•likely•what•you'd•want.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (435 > 79)

es6 & beyond/ch3.md
|1773| Also,•`super`•looks•like•it•might•be•driven•by•a•function's•context•just•like•`this`•--•that•is,•that•they'd•both•be•dynamically•bound.•However,•`super`•is•not•dynamic•like•`this`•is.•When•a•constructor•or•method•makes•a•`super`•reference•inside•it•at•declaration•time•(in•the•`class`•body),•that•`super`•is•statically•bound•to•that•specific•class•hierarchy,•and•cannot•be•overridden•(at•least•in•ES6).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (402 > 79)

es6 & beyond/ch3.md
|1775| What•does•that•mean?•It•means•that•if•you're•in•the•habit•of•taking•a•method•from•one•"class"•and•"borrowing"•it•for•another•class•by•overriding•its•`this`,•say•with•`call(..)`•or•`apply(..)`,•that•may•very•well•create•surprises•if•the•method•you're•borrowing•has•a•`super`•in•it.•Consider•this•class•hierarchy:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (311 > 79)

es6 & beyond/ch3.md
|1809| All•seems•fairly•natural•and•expected•in•this•previous•snippet.•However,•if•you•try•to•borrow•`b.foo()`•and•use•it•in•the•context•of•`a`•--•by•virtue•of•dynamic•`this`•binding,•such•borrowing•is•quite•common•and•used•in•many•different•ways,•including•mixins•most•notably•--•you•may•find•this•result•an•ugly•surprise:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (316 > 79)

es6 & beyond/ch3.md
|1817| As•you•can•see,•the•`this.id`•reference•was•dynamically•rebound•so•that•`:•a`•is•reported•in•both•cases•instead•of•`:•b`.•But•`b.foo()`'s•`super.foo()`•reference•wasn't•dynamically•rebound,•so•it•still•reported•`ParentB`•instead•of•the•expected•`ParentA`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (255 > 79)

es6 & beyond/ch3.md
|1819| Because•`b.foo()`•references•`super`,•it•is•statically•bound•to•the•`ChildB`/`ParentB`•hierarchy•and•cannot•be•used•against•the•`ChildA`/`ParentA`•hierarchy.•There•is•no•ES6•solution•to•this•limitation.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (202 > 79)

es6 & beyond/ch3.md
|1821| `super`•seems•to•work•intuitively•if•you•have•a•static•class•hierarchy•with•no•cross-pollination.•But•in•all•fairness,•one•of•the•main•benefits•of•doing•`this`-aware•coding•is•exactly•that•sort•of•flexibility.•Simply,•`class`•+•`super`•requires•you•to•avoid•such•techniques.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (274 > 79)

es6 & beyond/ch3.md
|1823| The•choice•boils•down•to•narrowing•your•object•design•to•these•static•hierarchies•--•`class`,•`extends`,•and•`super`•will•be•quite•nice•--•or•dropping•all•attempts•to•"fake"•classes•and•instead•embrace•dynamic•and•flexible,•classless•objects•and•`[[Prototype]]`•delegation•(see•the•*this•&•Object•Prototypes*•title•of•this•series).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (331 > 79)

es6 & beyond/ch3.md
|1827| Constructors•are•not•required•for•classes•or•subclasses;•a•default•constructor•is•substituted•in•both•cases•if•omitted.•However,•the•default•substituted•constructor•is•different•for•a•direct•class•versus•an•extended•class.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (222 > 79)

es6 & beyond/ch3.md
|1829| Specifically,•the•default•subclass•constructor•automatically•calls•the•parent•constructor,•and•passes•along•any•arguments.•In•other•words,•you•could•think•of•the•default•subclass•constructor•sort•of•like•this:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (209 > 79)

es6 & beyond/ch3.md
|1837| This•is•an•important•detail•to•note.•Not•all•class•languages•have•the•subclass•constructor•automatically•call•the•parent•constructor.•C++•does,•but•Java•does•not.•But•more•importantly,•in•pre-ES6•classes,•such•automatic•"parent•constructor"•calling•does•not•happen.•Be•careful•when•converting•to•ES6•`class`•if•you've•been•relying•on•such•calls•*not*•happening.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (361 > 79)

es6 & beyond/ch3.md
|1839| Another•perhaps•surprising•deviation/limitation•of•ES6•subclass•constructors:•in•a•constructor•of•a•subclass,•you•cannot•access•`this`•until•`super(..)`•has•been•called.•The•reason•is•nuanced•and•complicated,•but•it•boils•down•to•the•fact•that•the•parent•constructor•is•actually•the•one•creating/initializing•your•instance's•`this`.•Pre-ES6,•it•works•oppositely;•the•`this`•object•is•created•by•the•"subclass•constructor,"•and•then•you••call•a•"parent•constructor"•with•the•context•of•the•"subclass"•`this`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (507 > 79)

es6 & beyond/ch3.md
|1872| In•this•case,•the•fix•is•simple.•Just•swap•the•two•statements•in•the•subclass•`Bar`•constructor.•However,•if•you've•been•relying•pre-ES6•on•being•able•to•skip•calling•the•"parent•constructor,"•beware•because•that•won't•be•allowed•anymore.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (238 > 79)

es6 & beyond/ch3.md
|1876| One•of•the•most•heralded•benefits•to•the•new•`class`•and•`extend`•design•is•the•ability•to•(finally!)•subclass•the•built-in•natives,•like•`Array`.•Consider:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (156 > 79)

es6 & beyond/ch3.md
|1893| Prior•to•ES6,•a•fake•"subclass"•of•`Array`•using•manual•object•creation•and•linking•to•`Array.prototype`•only•partially•worked.•It•missed•out•on•the•special•behaviors•of•a•real•array,•such•as•the•automatically•updating•`length`•property.•ES6•subclasses•should•fully•work•with•"inherited"•and•augmented•behaviors•as•expected!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (324 > 79)

es6 & beyond/ch3.md
|1895| Another•common•pre-ES6•"subclass"•limitation•is•with•the•`Error`•object,•in•creating•custom•error•"subclasses."•When•genuine•`Error`•objects•are•created,•they•automatically•capture•special•`stack`•information,•including•the•line•number•and•file•where•the•error•is•created.•Pre-ES6•custom•error•"subclasses"•have•no•such•special•behavior,•which•severely•limits•their•usefulness.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (377 > 79)

es6 & beyond/ch3.md
|1912| The•`ouch`•custom•error•object•in•this•previous•snippet•will•behave•like•any•other•genuine•error•object,•including•capturing•`stack`.•That's•a•big•improvement!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (159 > 79)

es6 & beyond/ch3.md
|1916| ES6•introduces•a•new•concept•called•a•*meta•property*•(see•Chapter•7),•in•the•form•of•`new.target`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (99 > 79)

es6 & beyond/ch3.md
|1918| If•that•looks•strange,•it•is;•pairing•a•keyword•with•a•`.`•and•a•property•name•is•definitely•an•out-of-the-ordinary•pattern•for•JS.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (131 > 79)

es6 & beyond/ch3.md
|1920| `new.target`•is•a•new•"magical"•value•available•in•all•functions,•though•in•normal•functions•it•will•always•be•`undefined`.•In•any•constructor,•`new.target`•always•points•at•the•constructor•that•`new`•actually•directly•invoked,•even•if•the•constructor•is•in•a•parent•class•and•was•delegated•to•by•a•`super(..)`•call•from•a•child•constructor.•Consider:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (351 > 79)

es6 & beyond/ch3.md
|1950| The•`new.target`•meta•property•doesn't•have•much•purpose•in•class•constructors,•except•accessing•a•static•property/method•(see•the•next•section).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (145 > 79)

es6 & beyond/ch3.md
|1952| If•`new.target`•is•`undefined`,•you•know•the•function•was•not•called•with•`new`.•You•can•then•force•a•`new`•invocation•if•that's•necessary.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (139 > 79)

es6 & beyond/ch3.md
|1956| When•a•subclass•`Bar`•extends•a•parent•class•`Foo`,•we•already•observed•that•`Bar.prototype`•is•`[[Prototype]]`-linked•to•`Foo.prototype`.•But•additionally,•`Bar()`•is•`[[Prototype]]`-linked•to•`Foo()`.•That•part•may•not•have•such•an•obvious•reasoning.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (252 > 79)

es6 & beyond/ch3.md
|1958| However,•it's•quite•useful•in•the•case•where•you•declare•`static`•methods•(not•just•properties)•for•a•class,•as•these•are•added•directly•to•that•class's•function•object,•not•to•the•function•object's•`prototype`•object.•Consider:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (228 > 79)

es6 & beyond/ch3.md
|1990| Be•careful•not•to•get•confused•that•`static`•members•are•on•the•class's•prototype•chain.•They're•actually•on•the•dual/parallel•chain•between•the•function•constructors.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (167 > 79)

es6 & beyond/ch3.md
|1994| One•place•where•`static`•can•be•useful•is•in•setting•the•`Symbol.species`•getter•(known•internally•in•the•specification•as•`@@species`)•for•a•derived•(child)•class.•This•capability•allows•a•child•class•to•signal•to•a•parent•class•what•constructor•should•be•used•--•when•not•intending•the•child•class's•constructor•itself•--•if•any•parent•class•method•needs•to•vend•a•new•instance.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (380 > 79)

es6 & beyond/ch3.md
|1996| For•example,•many•methods•on•`Array`•create•and•return•a•new•`Array`•instance.•If•you•define•a•derived•class•from•`Array`,•but•you•want•those•methods•to•continue•to•vend•actual•`Array`•instances•instead•of•from•your•derived•class,•this•works:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (242 > 79)

es6 & beyond/ch3.md
|2011| To•illustrate•how•a•parent•class•method•can•use•a•child's•species•declaration•somewhat•like•`Array#map(..)`•is•doing,•consider:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (127 > 79)

es6 & beyond/ch3.md
|2037| The•parent•class•`Symbol.species`•does•`return•this`•to•defer•to•any•derived•class,•as•you'd•normally•expect.•`Bar`•then•overrides•to•manually•declare•`Foo`•to•be•used•for•such•instance•creation.•Of•course,•a•derived•class•can•still•vend•instances•of•itself•using•`new•this.constructor(..)`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (291 > 79)

es6 & beyond/ch3.md
|2043| *•Iterators•provide•sequential•access•to•data•or•operations.•They•can•be•consumed•by•new•language•features•like•`for..of`•and•`...`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (132 > 79)

es6 & beyond/ch3.md
|2044| *•Generators•are•locally•pause/resume•capable•functions•controlled•by•an•iterator.•They•can•be•used•to•programmatically•(and•interactively,•through•`yield`/`next(..)`•message•passing)•*generate*•values•to•be•consumed•via•iteration.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (231 > 79)

es6 & beyond/ch3.md
|2045| *•Modules•allow•private•encapsulation•of•implementation•details•with•a•publicly•exported•API.•Module•definitions•are•file-based,•singleton•instances,•and•statically•resolved•at•compile•time.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (190 > 79)

es6 & beyond/ch3.md
|2046| *•Classes•provide•cleaner•syntax•around•prototype-based•coding.•The•addition•of•`super`•also•solves•tricky•issues•with•relative•references•in•the•`[[Prototype]]`•chain.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (168 > 79)

es6 & beyond/ch3.md
|2048| These•new•tools•should•be•your•first•stop•when•trying•to•improve•the•architecture•of•your•JS•projects•by•embracing•ES6.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (119 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/async & performance/toc.md
|    |++++| /app/async & performance/toc.md
|   2|   2| 
|   3|   3| ## Table of Contents
|   4|   4| 
|   5|    |-* Foreword
|   6|    |-* Preface
|   7|    |-* Chapter 1: Asynchrony: Now & Later
|   8|    |-	* A Program In Chunks
|   9|    |-	* Event Loop
|  10|    |-	* Parallel Threading
|  11|    |-	* Concurrency
|  12|    |-	* Jobs
|  13|    |-	* Statement Ordering
|  14|    |-* Chapter 2: Callbacks
|  15|    |-	* Continuations
|  16|    |-	* Sequential Brain
|  17|    |-	* Trust Issues
|  18|    |-	* Trying To Save Callbacks
|  19|    |-* Chapter 3: Promises
|  20|    |-	* What is a Promise?
|  21|    |-	* Thenable Duck-Typing
|  22|    |-	* Promise Trust
|  23|    |-	* Chain Flow
|  24|    |-	* Error Handling
|  25|    |-	* Promise Patterns
|  26|    |-	* Promise API Recap
|  27|    |-	* Promise Limitations
|  28|    |-* Chapter 4: Generators
|  29|    |-	* Breaking Run-to-completion
|  30|    |-	* Generator'ing Values
|  31|    |-	* Iterating Generators Asynchronously
|  32|    |-	* Generators + Promises
|  33|    |-	* Generator Delegation
|  34|    |-	* Generator Concurrency
|  35|    |-	* Thunks
|  36|    |-	* Pre-ES6 Generators
|  37|    |-* Chapter 5: Program Performance
|  38|    |-	* Web Workers
|  39|    |-	* SIMD
|  40|    |-	* asm.js
|  41|    |-* Chapter 6: Benchmarking & Tuning
|  42|    |-	* Benchmarking
|  43|    |-	* Context Is King
|  44|    |-	* jsPerf.com
|  45|    |-	* Writing Good Tests
|  46|    |-	* Microperformance
|  47|    |-	* Tail Call Optimization (TCO)
|  48|    |-* Appendix A: *asynquence* Library
|  49|    |-* Appendix B: Advanced Async Patterns
|  50|    |-* Appendix C: Acknowledgments
|  51|    |-
|    |   5|+- Foreword
|    |   6|+- Preface
|    |   7|+- Chapter 1: Asynchrony: Now & Later
|    |   8|+  		* A Program In Chunks
|    |   9|+  		* Event Loop
|    |  10|+  		* Parallel Threading
|    |  11|+  		* Concurrency
|    |  12|+  		* Jobs
|    |  13|+  		* Statement Ordering
|    |  14|+- Chapter 2: Callbacks
|    |  15|+  		* Continuations
|    |  16|+  		* Sequential Brain
|    |  17|+  		* Trust Issues
|    |  18|+  		* Trying To Save Callbacks
|    |  19|+- Chapter 3: Promises
|    |  20|+  		* What is a Promise?
|    |  21|+  		* Thenable Duck-Typing
|    |  22|+  		* Promise Trust
|    |  23|+  		* Chain Flow
|    |  24|+  		* Error Handling
|    |  25|+  		* Promise Patterns
|    |  26|+  		* Promise API Recap
|    |  27|+  		* Promise Limitations
|    |  28|+- Chapter 4: Generators
|    |  29|+  		* Breaking Run-to-completion
|    |  30|+  		* Generator'ing Values
|    |  31|+  		* Iterating Generators Asynchronously
|    |  32|+  		* Generators + Promises
|    |  33|+  		* Generator Delegation
|    |  34|+  		* Generator Concurrency
|    |  35|+  		* Thunks
|    |  36|+  		* Pre-ES6 Generators
|    |  37|+- Chapter 5: Program Performance
|    |  38|+  		* Web Workers
|    |  39|+  		* SIMD
|    |  40|+  		\* asm.js
|    |  41|+- Chapter 6: Benchmarking & Tuning
|    |  42|+  		* Benchmarking
|    |  43|+  		* Context Is King
|    |  44|+  		* jsPerf.com
|    |  45|+  		* Writing Good Tests
|    |  46|+  		* Microperformance
|    |  47|+  		* Tail Call Optimization (TCO)
|    |  48|+- Appendix A: *asynquence* Library
|    |  49|+- Appendix B: Advanced Async Patterns
|    |  50|+- Appendix C: Acknowledgments

CONTRIBUTING.md
|   3| Please•feel•free•to•contribute•to•the•quality•of•this•content•by•submitting•PR's•for•improvements•to•code•snippets,•explanations,•etc.•If•there's•any•doubt•or•if•you•think•that•a•word/phrase•is•used•confusingly,•**before•submitting•a•PR,•open•an•issue•to•ask•about•it.**
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (270 > 79)

CONTRIBUTING.md
|   5| However,•if•you•choose•to•contribute•content•(not•just•typo•corrections)•to•this•repo,•you•agree•that•you're•giving•me•a•non-exclusive•license•to•use•that•content•for•the•book,•as•I•(and•my•publisher)•deem•appropriate.•You•probably•guessed•that•already,•but•I•just•have•to•make•sure•the•lawyers•are•happy•by•explicitly•stating•it.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (330 > 79)

CONTRIBUTING.md
|   9| I•understand•that•reading•one•long•.md•file,•with•no•relative•cross•links•to•other•sections/etc,•is•not•the•preferred•reading•experience•for•most•of•you.•As•such,•it's•totally•reasonable•to•want•to•file•an•issue/PR•to•add•those•kinds•of•features.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (246 > 79)

CONTRIBUTING.md
|  11| This•topic•has•been•brought•up•many•times,•and•I've•considered•it.•For•now,•I•**do•not**•accept•these•kinds•of•changes•into•the•repo.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (133 > 79)

CONTRIBUTING.md
|  13| The•main•purpose•of•my•book•repos•is•to•track•and•manage•the•content•for•the•purposes•of•publication•(paid-for•ebooks•and•print•books).•I•do•this•in•the•open•because•I•also•care•about•providing•free•and•early•access•to•the•content,•to•make•sure•there•is•no•paywall•barrier•to•learning.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (285 > 79)

CONTRIBUTING.md
|  17| The•primary•reading•experience,•likely•the•most•pleasant•one•for•many•of•you,•is•the•ebooks•or•print•books,•which•[are•available•for•sale](http://ssearch.oreilly.com/?q=%22you+don%27t+know+js%22&x=0&y=0).•The•balance•I'm•striking•here•is•releasing•the•content•for•free,•but•selling•the•reading•experience.•Other•authors•make•different•decisions•on•that•balance,•but•that's•what•I've•come•to•for•now.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (399 > 79)

CONTRIBUTING.md
|  19| I•hope•you•continue•to•enjoy•and•benefit•from•the•content,•and•I•also•hope•you•value•it•enough•to•[purchase•the•best•reading•experience](http://ssearch.oreilly.com/?q=%22you+don%27t+know+js%22&x=0&y=0)•in•the•ebook/print•form.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (226 > 79)

CONTRIBUTING.md
|  23| The•current•state•of•this•repo•is•the•1st•Edition•of•the•published•form•of•these•books.•That•means•that•you•should•have•almost•exactly•the•same•content•here•as•in•the•ebooks•or•printed•books,•with•only•minor•variances•in•typos,•formatting,•etc.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (244 > 79)

CONTRIBUTING.md
|  25| I•generally•am•not•accepting•any•changes•to•the•current•repo,•as•I•do•not•want•this•content•to•diverge•from•what's•in•the•published•books.•There•are•over•a•hundred•filed•issues/PRs•for•changes•that•are•being•collected•for•the•2nd•Edition,•but•work•has•not•yet•begun•on•that.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (274 > 79)

CONTRIBUTING.md
|  27| So,•if•you•find•something•that•should•be•fixed,•just•know•that•it•will•likely•sit•for•awhile•in•that•batch•until•it's•time•to•make•the•2nd•Edition•updates.•At•that•time,•my•plan•is•to•make•separate•branches•to•track•the•editions.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (229 > 79)

CONTRIBUTING.md
|  31| These•books•go•through•official•editing•with•the•publisher,•and•typos•are•likely•all•caught•at•that•stage.•As•such,•**typos•are•not•a•big•concern•for•this•repo**.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (162 > 79)

CONTRIBUTING.md
|  33| If•you're•going•to•submit•a•PR•for•typo•fixes,•please•be•measured•in•doing•so•by•collecting•several•small•changes•into•a•single•PR•(in•separate•commits).•Or,•**just•don't•even•worry•about•them•for•now,**•because•we'll•get•to•them•later.•I•promise.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (247 > 79)

CONTRIBUTING.md
|  37| Also,•if•you•have•any•questions•or•concerns,•please•make•sure•to•search•the•issues•(both•open•and•closed!)•first,•to•keep•the•churn•of•issues•to•a•minimum.•I•want•to•keep•my•focus•on•writing•these•books•as•much•as•possible.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (223 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/ch6.md
|    |++++| /app/es6 & beyond/ch6.md
|   1|   1| # You Don't Know JS: ES6 & Beyond
|    |   2|+
|   2|   3| # Chapter 6: API Additions
|   3|   4| 
|   4|   5| From conversions of values to mathematic calculations, ES6 adds many static properties and methods to various built-in natives and objects to help with common tasks. In addition, instances of some of the natives have new capabilities via various new prototype methods.
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/ch6.md
|    |++++| /app/es6 & beyond/ch6.md
|   3|   3| 
|   4|   4| From conversions of values to mathematic calculations, ES6 adds many static properties and methods to various built-in natives and objects to help with common tasks. In addition, instances of some of the natives have new capabilities via various new prototype methods.
|   5|   5| 
|   6|    |-**Note:** Most of these features can be faithfully polyfilled. We will not dive into such details here, but check out "ES6 Shim" (https://github.com/paulmillr/es6-shim/) for standards-compliant shims/polyfills.
|    |   6|+**Note:** Most of these features can be faithfully polyfilled. We will not dive into such details here, but check out "ES6 Shim" (<https://github.com/paulmillr/es6-shim/>) for standards-compliant shims/polyfills.
|   7|   7| 
|   8|   8| ## `Array`
|   9|   9| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/ch6.md
|    |++++| /app/es6 & beyond/ch6.md
| 566| 566| 
| 567| 567| Trigonometry:
| 568| 568| 
| 569|    |-* `cosh(..)` - Hyperbolic cosine
| 570|    |-* `acosh(..)` - Hyperbolic arccosine
| 571|    |-* `sinh(..)` - Hyperbolic sine
| 572|    |-* `asinh(..)` - Hyperbolic arcsine
| 573|    |-* `tanh(..)` - Hyperbolic tangent
| 574|    |-* `atanh(..)` - Hyperbolic arctangent
| 575|    |-* `hypot(..)` - The squareroot of the sum of the squares (i.e., the generalized Pythagorean theorem)
|    | 569|+- `cosh(..)` - Hyperbolic cosine
|    | 570|+- `acosh(..)` - Hyperbolic arccosine
|    | 571|+- `sinh(..)` - Hyperbolic sine
|    | 572|+- `asinh(..)` - Hyperbolic arcsine
|    | 573|+- `tanh(..)` - Hyperbolic tangent
|    | 574|+- `atanh(..)` - Hyperbolic arctangent
|    | 575|+- `hypot(..)` - The squareroot of the sum of the squares (i.e., the generalized Pythagorean theorem)
| 576| 576| 
| 577| 577| Arithmetic:
| 578| 578| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/ch6.md
|    |++++| /app/es6 & beyond/ch6.md
| 576| 576| 
| 577| 577| Arithmetic:
| 578| 578| 
| 579|    |-* `cbrt(..)` - Cube root
| 580|    |-* `clz32(..)` - Count leading zeros in 32-bit binary representation
| 581|    |-* `expm1(..)` - The same as `exp(x) - 1`
| 582|    |-* `log2(..)` - Binary logarithm (log base 2)
| 583|    |-* `log10(..)` - Log base 10
| 584|    |-* `log1p(..)` - The same as `log(x + 1)`
| 585|    |-* `imul(..)` - 32-bit integer multiplication of two numbers
|    | 579|+- `cbrt(..)` - Cube root
|    | 580|+- `clz32(..)` - Count leading zeros in 32-bit binary representation
|    | 581|+- `expm1(..)` - The same as `exp(x) - 1`
|    | 582|+- `log2(..)` - Binary logarithm (log base 2)
|    | 583|+- `log10(..)` - Log base 10
|    | 584|+- `log1p(..)` - The same as `log(x + 1)`
|    | 585|+- `imul(..)` - 32-bit integer multiplication of two numbers
| 586| 586| 
| 587| 587| Meta:
| 588| 588| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/ch6.md
|    |++++| /app/es6 & beyond/ch6.md
| 586| 586| 
| 587| 587| Meta:
| 588| 588| 
| 589|    |-* `sign(..)` - Returns the sign of the number
| 590|    |-* `trunc(..)` - Returns only the integer part of a number
| 591|    |-* `fround(..)` - Rounds to nearest 32-bit (single precision) floating-point value
|    | 589|+- `sign(..)` - Returns the sign of the number
|    | 590|+- `trunc(..)` - Returns only the integer part of a number
|    | 591|+- `fround(..)` - Rounds to nearest 32-bit (single precision) floating-point value
| 592| 592| 
| 593| 593| ## `Number`
| 594| 594| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/ch6.md
|    |++++| /app/es6 & beyond/ch6.md
| 600| 600| 
| 601| 601| ES6 adds some helpful numeric constants as static properties:
| 602| 602| 
| 603|    |-* `Number.EPSILON` - The minimum value between any two numbers: `2^-52` (see Chapter 2 of the *Types & Grammar* title of this series regarding using this value as a tolerance for imprecision in floating-point arithmetic)
| 604|    |-* `Number.MAX_SAFE_INTEGER` - The highest integer that can "safely" be represented unambiguously in a JS number value: `2^53 - 1`
| 605|    |-* `Number.MIN_SAFE_INTEGER` - The lowest integer that can "safely" be represented unambiguously in a JS number value: `-(2^53 - 1)` or `(-2)^53 + 1`.
|    | 603|+- `Number.EPSILON` - The minimum value between any two numbers: `2^-52` (see Chapter 2 of the *Types & Grammar* title of this series regarding using this value as a tolerance for imprecision in floating-point arithmetic)
|    | 604|+- `Number.MAX_SAFE_INTEGER` - The highest integer that can "safely" be represented unambiguously in a JS number value: `2^53 - 1`
|    | 605|+- `Number.MIN_SAFE_INTEGER` - The lowest integer that can "safely" be represented unambiguously in a JS number value: `-(2^53 - 1)` or `(-2)^53 + 1`.
| 606| 606| 
| 607| 607| **Note:** See Chapter 2 of the *Types & Grammar* title of this series for more information about "safe" integers.
| 608| 608| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/ch6.md
|    |++++| /app/es6 & beyond/ch6.md
| 732| 732| 
| 733| 733| `normalize(..)` takes an optional argument that specifies the normalization form to use. This argument must be one of the following four values: `"NFC"` (default), `"NFD"`, `"NFKC"`, or `"NFKD"`.
| 734| 734| 
| 735|    |-**Note:** Normalization forms and their effects on strings is well beyond the scope of what we'll discuss here. See "Unicode Normalization Forms" (http://www.unicode.org/reports/tr15/) for more information.
|    | 735|+**Note:** Normalization forms and their effects on strings is well beyond the scope of what we'll discuss here. See "Unicode Normalization Forms" (<http://www.unicode.org/reports/tr15/>) for more information.
| 736| 736| 
| 737| 737| ### `String.raw(..)` Static Function
| 738| 738| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/es6 & beyond/ch6.md
|    |++++| /app/es6 & beyond/ch6.md
| 790| 790| 
| 791| 791| ES6 adds many extra API helpers on the various built-in native objects:
| 792| 792| 
| 793|    |-* `Array` adds `of(..)` and `from(..)` static functions, as well as prototype functions like `copyWithin(..)` and `fill(..)`.
| 794|    |-* `Object` adds static functions like `is(..)` and `assign(..)`.
| 795|    |-* `Math` adds static functions like `acosh(..)` and `clz32(..)`.
| 796|    |-* `Number` adds static properties like `Number.EPSILON`, as well as static functions like `Number.isFinite(..)`.
| 797|    |-* `String` adds static functions like `String.fromCodePoint(..)` and `String.raw(..)`, as well as prototype functions like `repeat(..)` and `includes(..)`.
|    | 793|+- `Array` adds `of(..)` and `from(..)` static functions, as well as prototype functions like `copyWithin(..)` and `fill(..)`.
|    | 794|+- `Object` adds static functions like `is(..)` and `assign(..)`.
|    | 795|+- `Math` adds static functions like `acosh(..)` and `clz32(..)`.
|    | 796|+- `Number` adds static properties like `Number.EPSILON`, as well as static functions like `Number.isFinite(..)`.
|    | 797|+- `String` adds static functions like `String.fromCodePoint(..)` and `String.raw(..)`, as well as prototype functions like `repeat(..)` and `includes(..)`.
| 798| 798| 
| 799| 799| Most of these additions can be polyfilled (see ES6 Shim), and were inspired by utilities in common JS libraries/frameworks.

es6 & beyond/ch6.md
|   4| From•conversions•of•values•to•mathematic•calculations,•ES6•adds•many•static•properties•and•methods•to•various•built-in•natives•and•objects•to•help•with•common•tasks.•In•addition,•instances•of•some•of•the•natives•have•new•capabilities•via•various•new•prototype•methods.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (268 > 79)

es6 & beyond/ch6.md
|   6| **Note:**•Most•of•these•features•can•be•faithfully•polyfilled.•We•will•not•dive•into•such•details•here,•but•check•out•"ES6•Shim"•(https://github.com/paulmillr/es6-shim/)•for•standards-compliant•shims/polyfills.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (210 > 79)

es6 & beyond/ch6.md
|  10| One•of•the•most•commonly•extended•features•in•JS•by•various•user•libraries•is•the•Array•type.•It•should•be•no•surprise•that•ES6•adds•a•number•of•helpers•to•Array,•both•static•and•prototype•(instance).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (200 > 79)

es6 & beyond/ch6.md
|  14| There's•a•well•known•gotcha•with•the•`Array(..)`•constructor,•which•is•that•if•there's•only•one•argument•passed,•and•that•argument•is•a•number,•instead•of•making•an•array•of•one•element•with•that•number•value•in•it,•it•constructs•an•empty•array•with•a•`length`•property•equal•to•the•number.•This•action•produces•the•unfortunate•and•quirky•"empty•slots"•behavior•that's•reviled•about•JS•arrays.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (393 > 79)

es6 & beyond/ch6.md
|  16| `Array.of(..)`•replaces•`Array(..)`•as•the•preferred•function-form•constructor•for•arrays,•because•`Array.of(..)`•does•not•have•that•special•single-number-argument•case.•Consider:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (179 > 79)

es6 & beyond/ch6.md
|  32| Under•what•circumstances•would•you•want•to•use•`Array.of(..)`•instead•of•just•creating•an•array•with•literal•syntax,•like•`c•=•[1,2,3]`?•There's•two•possible•cases.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (164 > 79)

es6 & beyond/ch6.md
|  34| If•you•have•a•callback•that's•supposed•to•wrap•argument(s)•passed•to•it•in•an•array,•`Array.of(..)`•fits•the•bill•perfectly.•That's•probably•not•terribly•common,•but•it•may•scratch•an•itch•for•you.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (197 > 79)

es6 & beyond/ch6.md
|  36| The•other•scenario•is•if•you•subclass•`Array`•(see•"Classes"•in•Chapter•3)•and•want•to•be•able•to•create•and•initialize•elements•in•an•instance•of•your•subclass,•such•as:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (170 > 79)

es6 & beyond/ch6.md
|  60| You•can't•just•(easily)•create•a•constructor•for•`MyCoolArray`•that•overrides•the•behavior•of•the•`Array`•parent•constructor,•because•that•constructor•is•necessary•to•actually•create•a•well-behaving•array•value•(initializing•the•`this`).•The•"inherited"•static•`of(..)`•method•on•the•`MyCoolArray`•subclass•provides•a•nice•solution.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (332 > 79)

es6 & beyond/ch6.md
|  64| An•"array-like•object"•in•JavaScript•is•an•object•that•has•a•`length`•property•on•it,•specifically•with•an•integer•value•of•zero•or•higher.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (139 > 79)

es6 & beyond/ch6.md
|  66| These•values•have•been•notoriously•frustrating•to•work•with•in•JS;•it's•been•quite•common•to•need•to•transform•them•into•an•actual•array,•so•that•the•various•`Array.prototype`•methods•(`map(..)`,•`indexOf(..)`•etc.)•are•available•to•use•with•it.•That•process•usually•looks•like:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (278 > 79)

es6 & beyond/ch6.md
|  79| Another•common•task•where•`slice(..)`•is•often•used•is•in•duplicating•a•real•array:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (83 > 79)

es6 & beyond/ch6.md
|  85| In•both•cases,•the•new•ES6•`Array.from(..)`•method•can•be•a•more•understandable•and•graceful•--•if•also•less•verbose•--•approach:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (129 > 79)

es6 & beyond/ch6.md
|  93| `Array.from(..)`•looks•to•see•if•the•first•argument•is•an•iterable•(see•"Iterators"•in•Chapter•3),•and•if•so,•it•uses•the•iterator•to•produce•values•to•"copy"•into•the•returned•array.•Because•real•arrays•have•an•iterator•for•those•values,•that•iterator•is•automatically•used.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (275 > 79)

es6 & beyond/ch6.md
|  95| But•if•you•pass•an•array-like•object•as•the•first•argument•to•`Array.from(..)`,•it•behaves•basically•the•same•as•`slice()`•(no•arguments!)•or•`apply(..)`•does,•which•is•that•it•simply•loops•over•the•value,•accessing•numerically•named•properties•from•`0`•up•to•whatever•the•value•of•`length`•is.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (294 > 79)

es6 & beyond/ch6.md
| 109| Because•positions•`0`,•`1`,•and•`3`•didn't•exist•on•`arrLike`,•the•result•was•the•`undefined`•value•for•each•of•those•slots.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (124 > 79)

es6 & beyond/ch6.md
| 124| There's•a•subtle•but•important•difference•in•the•previous•snippet•between•the•`emptySlotsArr`•and•the•result•of•the•`Array.from(..)`•call.•`Array.from(..)`•never•produces•empty•slots.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (183 > 79)

es6 & beyond/ch6.md
| 126| Prior•to•ES6,•if•you•wanted•to•produce•an•array•initialized•to•a•certain•length•with•actual•`undefined`•values•in•each•slot•(no•empty•slots!),•you•had•to•do•extra•work:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (168 > 79)

es6 & beyond/ch6.md
| 140| **Warning:**•Using•an•empty•slot•array•like•`a`•in•the•previous•snippets•would•work•with•some•array•functions,•but•others•ignore•empty•slots•(like•`map(..)`,•etc.).•You•should•never•intentionally•work•with•empty•slots,•as•it•will•almost•certainly•lead•to•strange/unpredictable•behavior•in•your•programs.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (303 > 79)

es6 & beyond/ch6.md
| 144| The•`Array.from(..)`•utility•has•another•helpful•trick•up•its•sleeve.•The•second•argument,•if•provided,•is•a•mapping•callback•(almost•the•same•as•the•regular•`Array#map(..)`•expects)•which•is•called•to•map/transform•each•value•from•the•source•to•the•returned•target.•Consider:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (276 > 79)

es6 & beyond/ch6.md
| 163| **Note:**•As•with•other•array•methods•that•take•callbacks,•`Array.from(..)`•takes•an•optional•third•argument•that•if•set•will•specify•the•`this`•binding•for•the•callback•passed•as•the•second•argument.•Otherwise,•`this`•will•be•`undefined`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (239 > 79)

es6 & beyond/ch6.md
| 165| See•"TypedArrays"•in•Chapter•5•for•an•example•of•using•`Array.from(..)`•in•translating•values•from•an•array•of•8-bit•values•to•an•array•of•16-bit•values.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (153 > 79)

es6 & beyond/ch6.md
| 169| In•the•last•couple•of•sections,•we've•discussed•`Array.of(..)`•and•`Array.from(..)`,•both•of•which•create•a•new•array•in•a•similar•way•to•a•constructor.•But•what•do•they•do•in•subclasses?•Do•they•create•instances•of•the•base•`Array`•or•the•derived•subclass?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (257 > 79)

es6 & beyond/ch6.md
| 183| Both•`of(..)`•and•`from(..)`•use•the•constructor•that•they're•accessed•from•to•construct•the•array.•So•if•you•use•the•base•`Array.of(..)`•you'll•get•an•`Array`•instance,•but•if•you•use•`MyCoolArray.of(..)`,•you'll•get•a•`MyCoolArray`•instance.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (243 > 79)

es6 & beyond/ch6.md
| 185| In•"Classes"•in•Chapter•3,•we•covered•the•`@@species`•setting•which•all•the•built-in•classes•(like•`Array`)•have•defined,•which•is•used•by•any•prototype•methods•if•they•create•a•new•instance.•`slice(..)`•is•a•great•example:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (223 > 79)

es6 & beyond/ch6.md
| 193| Generally,•that•default•behavior•will•probably•be•desired,•but•as•we•discussed•in•Chapter•3,•you•*can*•override•if•you•want:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (124 > 79)

es6 & beyond/ch6.md
| 207| It's•important•to•note•that•the•`@@species`•setting•is•only•used•for•the•prototype•methods,•like•`slice(..)`.•It's•not•used•by•`of(..)`•and•`from(..)`;•they•both•just•use•the•`this`•binding•(whatever•constructor•is•used•to•make•the•reference).•Consider:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (253 > 79)

es6 & beyond/ch6.md
| 223| `Array#copyWithin(..)`•is•a•new•mutator•method•available•to•all•arrays•(including•Typed•Arrays;•see•Chapter•5).•`copyWithin(..)`•copies•a•portion•of•an•array•to•another•location•in•the•same•array,•overwriting•whatever•was•there•before.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (235 > 79)

es6 & beyond/ch6.md
| 225| The•arguments•are•*target*•(the•index•to•copy•to),•*start*•(the•inclusive•index•to•start•the•copying•from),•and•optionally•*end*•(the•exclusive•index•to•stop•copying).•If•any•of•the•arguments•are•negative,•they're•taken•to•be•relative•from•the•end•of•the•array.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (261 > 79)

es6 & beyond/ch6.md
| 239| The•`copyWithin(..)`•method•does•not•extend•the•array's•length,•as•the•first•example•in•the•previous•snippet•shows.•Copying•simply•stops•when•the•end•of•the•array•is•reached.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (174 > 79)

es6 & beyond/ch6.md
| 241| Contrary•to•what•you•might•think,•the•copying•doesn't•always•go•in•left-to-right•(ascending•index)•order.•It's•possible•this•would•result•in•repeatedly•copying•an•already•copied•value•if•the•from•and•target•ranges•overlap,•which•is•presumably•not•desired•behavior.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (264 > 79)

es6 & beyond/ch6.md
| 243| So•internally,•the•algorithm•avoids•this•case•by•copying•in•reverse•order•to•avoid•that•gotcha.•Consider:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (105 > 79)

es6 & beyond/ch6.md
| 249| If•the•algorithm•was•strictly•moving•left•to•right,•then•the•`2`•should•be•copied•to•overwrite•the•`3`,•then•*that*•copied•`2`•should•be•copied•to•overwrite•`4`,•then•*that*•copied•`2`•should•be•copied•to•overwrite•`5`,•and•you'd•end•up•with•`[1,2,2,2,2]`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (256 > 79)

es6 & beyond/ch6.md
| 251| Instead,•the•copying•algorithm•reverses•direction•and•copies•`4`•to•overwrite•`5`,•then•copies•`3`•to•overwrite•`4`,•then•copies•`2`•to•overwrite•`3`,•and•the•final•result•is•`[1,2,2,3,4]`.•That's•probably•more•"correct"•in•terms•of•expectation,•but•it•can•be•confusing•if•you're•only•thinking•about•the•copying•algorithm•in•a•naive•left-to-right•fashion.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (355 > 79)

es6 & beyond/ch6.md
| 255| Filling•an•existing•array•entirely•(or•partially)•with•a•specified•value•is•natively•supported•as•of•ES6•with•the•`Array#fill(..)`•method:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (138 > 79)

es6 & beyond/ch6.md
| 263| `fill(..)`•optionally•takes•*start*•and•*end*•parameters,•which•indicate•a•subset•portion•of•the•array•to•fill,•such•as:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (120 > 79)

es6 & beyond/ch6.md
| 273| The•most•common•way•to•search•for•a•value•in•an•array•has•generally•been•the•`indexOf(..)`•method,•which•returns•the•index•the•value•is•found•at•or•`-1`•if•not•found:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (166 > 79)

es6 & beyond/ch6.md
| 284| The•`indexOf(..)`•comparison•requires•a•strict•`===`•match,•so•a•search•for•`"2"`•fails•to•find•a•value•of•`2`,•and•vice•versa.•There's•no•way•to•override•the•matching•algorithm•for•`indexOf(..)`.•It's•also•unfortunate/ungraceful•to•have•to•make•the•manual•comparison•to•the•`-1`•value.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (286 > 79)

es6 & beyond/ch6.md
| 286| **Tip:**•See•the•*Types•&•Grammar*•title•of•this•series•for•an•interesting•(and•controversially•confusing)•technique•to•work•around•the•`-1`•ugliness•with•the•`~`•operator.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (172 > 79)

es6 & beyond/ch6.md
| 288| Since•ES5,•the•most•common•workaround•to•have•control•over•the•matching•logic•has•been•the•`some(..)`•method.•It•works•by•calling•a•function•callback•for•each•element,•until•one•of•those•calls•returns•a•`true`/truthy•value,•and•then•it•stops.•Because•you•get•to•define•the•callback•function,•you•have•full•control•over•how•a•match•is•made:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (339 > 79)

es6 & beyond/ch6.md
| 302| But•the•downside•to•this•approach•is•that•you•only•get•the•`true`/`false`•indicating•if•a•suitably•matched•value•was•found,•but•not•what•the•actual•matched•value•was.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (166 > 79)

es6 & beyond/ch6.md
| 304| ES6's•`find(..)`•addresses•this.•It•works•basically•the•same•as•`some(..)`,•except•that•once•the•callback•returns•a•`true`/truthy•value,•the•actual•array•value•is•returned:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (172 > 79)

es6 & beyond/ch6.md
| 318| Using•a•custom•`matcher(..)`•function•also•lets•you•match•against•complex•values•like•objects:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (94 > 79)

es6 & beyond/ch6.md
| 337| **Note:**•As•with•other•array•methods•that•take•callbacks,•`find(..)`•takes•an•optional•second•argument•that•if•set•will•specify•the•`this`•binding•for•the•callback•passed•as•the•first•argument.•Otherwise,•`this`•will•be•`undefined`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (233 > 79)

es6 & beyond/ch6.md
| 341| While•the•previous•section•illustrates•how•`some(..)`•yields•a•boolean•result•for•a•search•of•an•array,•and•`find(..)`•yields•the•matched•value•itself•from•the•array•search,•there's•also•a•need•for•finding•the•positional•index•of•the•matched•value.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (248 > 79)

es6 & beyond/ch6.md
| 343| `indexOf(..)`•does•that,•but•there's•no•control•over•its•matching•logic;•it•always•uses•`===`•strict•equality.•So•ES6's•`findIndex(..)`•is•the•answer:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (150 > 79)

es6 & beyond/ch6.md
| 369| Don't•use•`findIndex(..)•!=•-1`•(the•way•it's•always•been•done•with•`indexOf(..)`)•to•get•a•boolean•from•the•search,•because•`some(..)`•already•yields•the•`true`/`false`•you•want.•And•don't•do•`a[•a.findIndex(..)•]`•to•get•the•matched•value,•because•that's•what•`find(..)`•accomplishes.•And•finally,•use•`indexOf(..)`•if•you•need•the•index•of•a•strict•match,•or•`findIndex(..)`•if•you•need•the•index•of•a•more•customized•match.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (427 > 79)

es6 & beyond/ch6.md
| 371| **Note:**•As•with•other•array•methods•that•take•callbacks,•`findIndex(..)`•takes•an•optional•second•argument•that•if•set•will•specify•the•`this`•binding•for•the•callback•passed•as•the•first•argument.•Otherwise,•`this`•will•be•`undefined`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (238 > 79)

es6 & beyond/ch6.md
| 375| In•Chapter•3,•we•illustrated•how•data•structures•can•provide•a•patterned•item-by-item•enumeration•of•their•values,•via•an•iterator.•We•then•expounded•on•this•approach•in•Chapter•5,•as•we•explored•how•the•new•ES6•collections•(Map,•Set,•etc.)•provide•several•methods•for•producing•different•kinds•of•iterations.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (309 > 79)

es6 & beyond/ch6.md
| 377| Because•it's•not•new•to•ES6,•`Array`•might•not•be•thought•of•traditionally•as•a•"collection,"•but•it•is•one•in•the•sense•that•it•provides•these•same•iterator•methods:•`entries()`,•`values()`,•and•`keys()`.•Consider:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (215 > 79)

es6 & beyond/ch6.md
| 389| Just•like•with•`Set`,•the•default•`Array`•iterator•is•the•same•as•what•`values()`•returns.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (90 > 79)

es6 & beyond/ch6.md
| 391| In•"Avoiding•Empty•Slots"•earlier•in•this•chapter,•we•illustrated•how•`Array.from(..)`•treats•empty•slots•in•an•array•as•just•being•present•slots•with•`undefined`•in•them.•That's•actually•because•under•the•covers,•the•array•iterators•behave•that•way:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (250 > 79)

es6 & beyond/ch6.md
| 405| A•few•additional•static•helpers•have•been•added•to•`Object`.•Traditionally,•functions•of•this•sort•have•been•seen•as•focused•on•the•behaviors/capabilities•of•object•values.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (172 > 79)

es6 & beyond/ch6.md
| 407| However,•starting•with•ES6,•`Object`•static•functions•will•also•be•for•general-purpose•global•APIs•of•any•sort•that•don't•already•belong•more•naturally•in•some•other•location•(i.e.,•`Array.from(..)`).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (200 > 79)

es6 & beyond/ch6.md
| 411| The•`Object.is(..)`•static•function•makes•value•comparisons•in•an•even•more•strict•fashion•than•the•`===`•comparison.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (117 > 79)

es6 & beyond/ch6.md
| 413| `Object.is(..)`•invokes•the•underlying•`SameValue`•algorithm•(ES6•spec,•section•7.2.9).•The•`SameValue`•algorithm•is•basically•the•same•as•the•`===`•Strict•Equality•Comparison•Algorithm•(ES6•spec,•section•7.2.13),•with•two•important•exceptions.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (244 > 79)

es6 & beyond/ch6.md
| 427| You•should•continue•to•use•`===`•for•strict•equality•comparisons;•`Object.is(..)`•shouldn't•be•thought•of•as•a•replacement•for•the•operator.•However,•in•cases•where•you're•trying•to•strictly•identify•a•`NaN`•or•`-0`•value,•`Object.is(..)`•is•now•the•preferred•option.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (267 > 79)

es6 & beyond/ch6.md
| 429| **Note:**•ES6•also•adds•a•`Number.isNaN(..)`•utility•(discussed•later•in•this•chapter)•which•may•be•a•slightly•more•convenient•test;•you•may•prefer•`Number.isNaN(x)`•over•`Object.is(x,NaN)`.•You•*can*•accurately•test•for•`-0`•with•a•clumsy•`x•==•0•&&•1•/•x•===•-Infinity`,•but•in•this•case•`Object.is(x,-0)`•is•much•better.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (323 > 79)

es6 & beyond/ch6.md
| 433| The•"Symbols"•section•in•Chapter•2•discusses•the•new•Symbol•primitive•value•type•in•ES6.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (88 > 79)

es6 & beyond/ch6.md
| 435| Symbols•are•likely•going•to•be•mostly•used•as•special•(meta)•properties•on•objects.•So•the•`Object.getOwnPropertySymbols(..)`•utility•was•introduced,•which•retrieves•only•the•symbol•properties•directly•on•an•object:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (215 > 79)

es6 & beyond/ch6.md
| 449| Also•in•Chapter•2,•we•mentioned•the•`Object.setPrototypeOf(..)`•utility,•which•(unsurprisingly)•sets•the•`[[Prototype]]`•of•an•object•for•the•purposes•of•*behavior•delegation*•(see•the•*this•&•Object•Prototypes*•title•of•this•series).•Consider:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (244 > 79)

es6 & beyond/ch6.md
| 480| In•both•previous•snippets,•the•relationship•between•`o2`•and•`o1`•appears•at•the•end•of•the•`o2`•definition.•More•commonly,•the•relationship•between•an•`o2`•and•`o1`•is•specified•at•the•top•of•the•`o2`•definition,•as•it•is•with•classes,•and•also•with•`__proto__`•in•object•literals•(see•"Setting•`[[Prototype]]`"•in•Chapter•2).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (327 > 79)

es6 & beyond/ch6.md
| 482| **Warning:**•Setting•a•`[[Prototype]]`•right•after•object•creation•is•reasonable,•as•shown.•But•changing•it•much•later•is•generally•not•a•good•idea•and•will•usually•lead•to•more•confusion•than•clarity.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (201 > 79)

es6 & beyond/ch6.md
| 486| Many•JavaScript•libraries/frameworks•provide•utilities•for•copying/mixing•one•object's•properties•into•another•(e.g.,•jQuery's•`extend(..)`).•There•are•various•nuanced•differences•between•these•different•utilities,•such•as•whether•a•property•with•value•`undefined`•is•ignored•or•not.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (283 > 79)

es6 & beyond/ch6.md
| 488| ES6•adds•`Object.assign(..)`,•which•is•a•simplified•version•of•these•algorithms.•The•first•argument•is•the•*target*,•and•any•other•arguments•passed•are•the•*sources*,•which•will•be•processed•in•listed•order.•For•each•source,•its•enumerable•and•own•(e.g.,•not•"inherited")•keys,•including•symbols,•are•copied•as•if•by•plain•`=`•assignment.•`Object.assign(..)`•returns•the•target•object.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (385 > 79)

es6 & beyond/ch6.md
| 522| Only•the•properties•`a`,•`b`,•`c`,•`e`,•and•`Symbol("g")`•will•be•copied•to•`target`:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (85 > 79)

es6 & beyond/ch6.md
| 539| The•`d`,•`f`,•and•`Symbol("h")`•properties•are•omitted•from•copying;•non-enumerable•properties•and•non-owned•properties•are•all•excluded•from•the•assignment.•Also,•`e`•is•copied•as•a•normal•property•assignment,•not•duplicated•as•a•read-only•property.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (250 > 79)

es6 & beyond/ch6.md
| 541| In•an•earlier•section,•we•showed•using•`setPrototypeOf(..)`•to•set•up•a•`[[Prototype]]`•relationship•between•an•`o2`•and•`o1`•object.•There's•another•form•that•leverages•`Object.assign(..)`:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (190 > 79)

es6 & beyond/ch6.md
| 559| **Note:**•`Object.create(..)`•is•the•ES5•standard•utility•that•creates•an•empty•object•that•is•`[[Prototype]]`-linked.•See•the•*this•&•Object•Prototypes*•title•of•this•series•for•more•information.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (196 > 79)

es6 & beyond/ch6.md
| 563| ES6•adds•several•new•mathematic•utilities•that•fill•in•holes•or•aid•with•common•operations.•All•of•these•can•be•manually•calculated,•but•most•of•them•are•now•defined•natively•so•that•in•some•cases•the•JS•engine•can•either•more•optimally•perform•the•calculations,•or•perform•them•with•better•decimal•precision•than•their•manual•counterparts.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (340 > 79)

es6 & beyond/ch6.md
| 565| It's•likely•that•asm.js/transpiled•JS•code•(see•the•*Async•&•Performance*•title•of•this•series)•is•the•more•likely•consumer•of•many•of•these•utilities•rather•than•direct•developers.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (181 > 79)

es6 & beyond/ch6.md
| 575| *•`hypot(..)`•-•The•squareroot•of•the•sum•of•the•squares•(i.e.,•the•generalized•Pythagorean•theorem)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (100 > 79)

es6 & beyond/ch6.md
| 591| *•`fround(..)`•-•Rounds•to•nearest•32-bit•(single•precision)•floating-point•value
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (81 > 79)

es6 & beyond/ch6.md
| 595| Importantly,•for•your•program•to•properly•work,•it•must•accurately•handle•numbers.•ES6•adds•some•additional•properties•and•functions•to•assist•with•common•numeric•operations.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (174 > 79)

es6 & beyond/ch6.md
| 597| Two•additions•to•`Number`•are•just•references•to•the•preexisting•globals:•`Number.parseInt(..)`•and•`Number.parseFloat(..)`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (124 > 79)

es6 & beyond/ch6.md
| 603| *•`Number.EPSILON`•-•The•minimum•value•between•any•two•numbers:•`2^-52`•(see•Chapter•2•of•the•*Types•&•Grammar*•title•of•this•series•regarding•using•this•value•as•a•tolerance•for•imprecision•in•floating-point•arithmetic)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (220 > 79)

es6 & beyond/ch6.md
| 604| *•`Number.MAX_SAFE_INTEGER`•-•The•highest•integer•that•can•"safely"•be•represented•unambiguously•in•a•JS•number•value:•`2^53•-•1`
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (129 > 79)

es6 & beyond/ch6.md
| 605| *•`Number.MIN_SAFE_INTEGER`•-•The•lowest•integer•that•can•"safely"•be•represented•unambiguously•in•a•JS•number•value:•`-(2^53•-•1)`•or•`(-2)^53•+•1`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (149 > 79)

es6 & beyond/ch6.md
| 607| **Note:**•See•Chapter•2•of•the•*Types•&•Grammar*•title•of•this•series•for•more•information•about•"safe"•integers.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (113 > 79)

es6 & beyond/ch6.md
| 611| The•standard•global•`isNaN(..)`•utility•has•been•broken•since•its•inception,•in•that•it•returns•`true`•for•things•that•are•not•numbers,•not•just•for•the•actual•`NaN`•value,•because•it•coerces•the•argument•to•a•number•type•(which•can•falsely•result•in•a•NaN).•ES6•adds•a•fixed•utility•`Number.isNaN(..)`•that•works•as•it•should:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (327 > 79)

es6 & beyond/ch6.md
| 627| There's•a•temptation•to•look•at•a•function•name•like•`isFinite(..)`•and•assume•it's•simply•"not•infinite".•That's•not•quite•correct,•though.•There's•more•nuance•to•this•new•ES6•utility.•Consider:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (195 > 79)

es6 & beyond/ch6.md
| 638| The•standard•global•`isFinite(..)`•coerces•its•argument,•but•`Number.isFinite(..)`•omits•the•coercive•behavior:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (111 > 79)

es6 & beyond/ch6.md
| 647| You•may•still•prefer•the•coercion,•in•which•case•using•the•global•`isFinite(..)`•is•a•valid•choice.•Alternatively,•and•perhaps•more•sensibly,•you•can•use•`Number.isFinite(+x)`,•which•explicitly•coerces•`x`•to•a•number•before•passing•it•in•(see•Chapter•4•of•the•*Types•&•Grammar*•title•of•this•series).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (301 > 79)

es6 & beyond/ch6.md
| 651| JavaScript•number•values•are•always•floating•point•(IEEE-754).•So•the•notion•of•determining•if•a•number•is•an•"integer"•is•not•about•checking•its•type,•because•JS•makes•no•such•distinction.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (189 > 79)

es6 & beyond/ch6.md
| 653| Instead,•you•need•to•check•if•there's•any•non-zero•decimal•portion•of•the•value.•The•easiest•way•to•do•that•has•commonly•been:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (126 > 79)

es6 & beyond/ch6.md
| 659| ES6•adds•a•`Number.isInteger(..)`•helper•utility•that•potentially•can•determine•this•quality•slightly•more•efficiently:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (119 > 79)

es6 & beyond/ch6.md
| 666| **Note:**•In•JavaScript,•there's•no•difference•between•`4`,•`4.`,•`4.0`,•or•`4.0000`.•All•of•these•would•be•considered•an•"integer",•and•would•thus•yield•`true`•from•`Number.isInteger(..)`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (189 > 79)

es6 & beyond/ch6.md
| 668| In•addition,•`Number.isInteger(..)`•filters•out•some•clearly•not-integer•values•that•`x•===•Math.floor(x)`•could•potentially•mix•up:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (132 > 79)

es6 & beyond/ch6.md
| 675| Working•with•"integers"•is•sometimes•an•important•bit•of•information,•as•it•can•simplify•certain•kinds•of•algorithms.•JS•code•by•itself•will•not•run•faster•just•from•filtering•for•only•integers,•but•there•are•optimization•techniques•the•engine•can•take•(e.g.,•asm.js)•when•only•integers•are•being•used.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (302 > 79)

es6 & beyond/ch6.md
| 677| Because•of•`Number.isInteger(..)`'s•handling•of•`NaN`•and•`Infinity`•values,•defining•a•`isFloat(..)`•utility•would•not•be•just•as•simple•as•`!Number.isInteger(..)`.•You'd•need•to•do•something•like:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (198 > 79)

es6 & beyond/ch6.md
| 691| **Note:**•It•may•seem•strange,•but•Infinity•should•neither•be•considered•an•integer•nor•a•float.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (96 > 79)

es6 & beyond/ch6.md
| 693| ES6•also•defines•a•`Number.isSafeInteger(..)`•utility,•which•checks•to•make•sure•the•value•is•both•an•integer•and•within•the•range•of•`Number.MIN_SAFE_INTEGER`-`Number.MAX_SAFE_INTEGER`•(inclusive).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (198 > 79)

es6 & beyond/ch6.md
| 708| Strings•already•have•quite•a•few•helpers•prior•to•ES6,•but•even•more•have•been•added•to•the•mix.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (96 > 79)

es6 & beyond/ch6.md
| 712| "Unicode-Aware•String•Operations"•in•Chapter•2•discusses•`String.fromCodePoint(..)`,•`String#codePointAt(..)`,•and•`String#normalize(..)`•in•detail.•They•have•been•added•to•improve•Unicode•support•in•JS•string•values.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (217 > 79)

es6 & beyond/ch6.md
| 720| The•`normalize(..)`•string•prototype•method•is•used•to•perform•Unicode•normalizations•that•either•combine•characters•with•adjacent•"combining•marks"•or•decompose•combined•characters.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (182 > 79)

es6 & beyond/ch6.md
| 722| Generally,•the•normalization•won't•create•a•visible•effect•on•the•contents•of•the•string,•but•will•change•the•contents•of•the•string,•which•can•affect•how•things•like•the•`length`•property•are•reported,•as•well•as•how•character•access•by•position•behave:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (254 > 79)

es6 & beyond/ch6.md
| 733| `normalize(..)`•takes•an•optional•argument•that•specifies•the•normalization•form•to•use.•This•argument•must•be•one•of•the•following•four•values:•`"NFC"`•(default),•`"NFD"`,•`"NFKC"`,•or•`"NFKD"`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (195 > 79)

es6 & beyond/ch6.md
| 735| **Note:**•Normalization•forms•and•their•effects•on•strings•is•well•beyond•the•scope•of•what•we'll•discuss•here.•See•"Unicode•Normalization•Forms"•(http://www.unicode.org/reports/tr15/)•for•more•information.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (206 > 79)

es6 & beyond/ch6.md
| 739| The•`String.raw(..)`•utility•is•provided•as•a•built-in•tag•function•to•use•with•template•string•literals•(see•Chapter•2)•for•obtaining•the•raw•string•value•without•any•processing•of•escape•sequences.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (199 > 79)

es6 & beyond/ch6.md
| 741| This•function•will•almost•never•be•called•manually,•but•will•be•used•with•tagged•template•literals:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (99 > 79)

es6 & beyond/ch6.md
| 750| In•the•resultant•string,•`\`•and•`t`•are•separate•raw•characters,•not•the•one•escape•sequence•character•`\t`.•The•same•is•true•with•the•Unicode•escape•sequence.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (160 > 79)

es6 & beyond/ch6.md
| 760| That•doesn't•work•in•JS,•because•`*`•multiplication•is•only•defined•for•numbers,•and•thus•`"foo"`•coerces•to•the•`NaN`•number.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (126 > 79)

es6 & beyond/ch6.md
| 762| However,•ES6•defines•a•string•prototype•method•`repeat(..)`•to•accomplish•the•task:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (83 > 79)

es6 & beyond/ch6.md
| 770| In•addition•to•`String#indexOf(..)`•and•`String#lastIndexOf(..)`•from•prior•to•ES6,•three•new•methods•for•searching/inspection•have•been•added:•`startsWith(..)`,•`endsWith(..)`,•and•`includes(..)`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (197 > 79)

es6 & beyond/ch6.md
| 785| For•all•the•string•search/inspection•methods,•if•you•look•for•an•empty•string•`""`,•it•will•either•be•found•at•the•beginning•or•the•end•of•the•string.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (150 > 79)

es6 & beyond/ch6.md
| 787| **Warning:**•These•methods•will•not•by•default•accept•a•regular•expression•for•the•search•string.•See•"Regular•Expression•Symbols"•in•Chapter•7•for•information•about•disabling•the•`isRegExp`•check•that•is•performed•on•this•first•argument.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (238 > 79)

es6 & beyond/ch6.md
| 793| *•`Array`•adds•`of(..)`•and•`from(..)`•static•functions,•as•well•as•prototype•functions•like•`copyWithin(..)`•and•`fill(..)`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (125 > 79)

es6 & beyond/ch6.md
| 796| *•`Number`•adds•static•properties•like•`Number.EPSILON`,•as•well•as•static•functions•like•`Number.isFinite(..)`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (112 > 79)

es6 & beyond/ch6.md
| 797| *•`String`•adds•static•functions•like•`String.fromCodePoint(..)`•and•`String.raw(..)`,•as•well•as•prototype•functions•like•`repeat(..)`•and•`includes(..)`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (155 > 79)

es6 & beyond/ch6.md
| 799| Most•of•these•additions•can•be•polyfilled•(see•ES6•Shim),•and•were•inspired•by•utilities•in•common•JS•libraries/frameworks.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (123 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/types & grammar/ch4.md
|    |++++| /app/types & grammar/ch4.md
|   1|   1| # You Don't Know JS: Types & Grammar
|    |   2|+
|   2|   3| # Chapter 4: Coercion
|   3|   4| 
|   4|   5| Now that we much more fully understand JavaScript's types and values, we turn our attention to a very controversial topic: coercion.
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/types & grammar/ch4.md
|    |++++| /app/types & grammar/ch4.md
|  37|  37| 
|  38|  38| Both approaches accomplish the same effect: `"42"` comes from `42`. But it's the *how* that is at the heart of the heated debates over JavaScript coercion.
|  39|  39| 
|  40|    |-**Note:** Technically, there's some nuanced behavioral difference here beyond the stylistic difference. We cover that in more detail later in the chapter, in the "Implicitly: Strings <--> Numbers" section.
|    |  40|+**Note:** Technically, there's some nuanced behavioral difference here beyond the stylistic difference. We cover that in more detail later in the chapter, in the "Implicitly: Strings <--> Numbers" section.
|  41|  41| 
|  42|  42| The terms "explicit" and "implicit," or "obvious" and "hidden side effect," are *relative*.
|  43|  43| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/types & grammar/ch4.md
|    |++++| /app/types & grammar/ch4.md
| 309| 309| 
| 310| 310| From that table, we get the following as the so-called "falsy" values list:
| 311| 311| 
| 312|    |-* `undefined`
| 313|    |-* `null`
| 314|    |-* `false`
| 315|    |-* `+0`, `-0`, and `NaN`
| 316|    |-* `""`
|    | 312|+- `undefined`
|    | 313|+- `null`
|    | 314|+- `false`
|    | 315|+- `+0`, `-0`, and `NaN`
|    | 316|+- `""`
| 317| 317| 
| 318| 318| That's it. If a value is on that list, it's a "falsy" value, and it will coerce to `false` if you force a `boolean` coercion on it.
| 319| 319| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/types & grammar/ch4.md
|    |++++| /app/types & grammar/ch4.md
| 373| 373| 
| 374| 374| So, we can't remove `document.all` completely, but IE doesn't want `if (document.all) { .. }` code to work anymore, so that users in modern IE get new, standards-compliant code logic.
| 375| 375| 
| 376|    |-"What should we do?" **"I've got it! Let's bastardize the JS type system and pretend that `document.all` is falsy!"
|    | 376|+"What should we do?" \*\*"I've got it! Let's bastardize the JS type system and pretend that `document.all` is falsy!"
| 377| 377| 
| 378| 378| Ugh. That sucks. It's a crazy gotcha that most JS developers don't understand. But the alternative (doing nothing about the above no-win problems) sucks *just a little bit more*.
| 379| 379| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/types & grammar/ch4.md
|    |++++| /app/types & grammar/ch4.md
| 427| 427| 
| 428| 428| It would be hard to find any salient disagreements with *explicit* coercion, as it most closely aligns with how the commonly accepted practice of type conversion works in statically typed languages. As such, we'll take for granted (for now) that *explicit* coercion can be agreed upon to not be evil or controversial. We'll revisit this later, though.
| 429| 429| 
| 430|    |-### Explicitly: Strings <--> Numbers
|    | 430|+### Explicitly: Strings <--> Numbers
| 431| 431| 
| 432| 432| We'll start with the simplest and perhaps most common coercion operation: coercing values between `string` and `number` representation.
| 433| 433| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/types & grammar/ch4.md
|    |++++| /app/types & grammar/ch4.md
| 644| 644| 
| 645| 645| How `~~` works is that the first `~` applies the `ToInt32` "coercion" and does the bitwise flip, and then the second `~` does another bitwise flip, flipping all the bits back to the original state. The end result is just the `ToInt32` "coercion" (aka truncation).
| 646| 646| 
| 647|    |-**Note:** The bitwise double-flip of `~~` is very similar to the parity double-negate `!!` behavior, explained in the "Explicitly: * --> Boolean" section later.
|    | 647|+**Note:** The bitwise double-flip of `~~` is very similar to the parity double-negate `!!` behavior, explained in the "Explicitly: \* --> Boolean" section later.
| 648| 648| 
| 649| 649| However, `~~` needs some caution/clarification. First, it only works reliably on 32-bit values. But more importantly, it doesn't work the same on negative numbers as `Math.floor(..)` does!
| 650| 650| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/types & grammar/ch4.md
|    |++++| /app/types & grammar/ch4.md
| 778| 778| 
| 779| 779| `parseInt(..)` is actually pretty predictable and consistent in its behavior. If you use it correctly, you'll get sensible results. If you use it incorrectly, the crazy results you get are not the fault of JavaScript.
| 780| 780| 
| 781|    |-### Explicitly: * --> Boolean
|    | 781|+### Explicitly: \* --> Boolean
| 782| 782| 
| 783| 783| Now, let's examine coercing from any non-`boolean` value to a `boolean`.
| 784| 784| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/types & grammar/ch4.md
|    |++++| /app/types & grammar/ch4.md
| 920| 920| 
| 921| 921| My encouragement to you is: don't settle for that. Don't "throw the baby out with the bathwater." Don't assume *implicit* coercion is all bad because all you think you've ever seen is its "bad parts." I think there are "good parts" here, and I want to help and inspire more of you to find and embrace them!
| 922| 922| 
| 923|    |-### Implicitly: Strings <--> Numbers
|    | 923|+### Implicitly: Strings <--> Numbers
| 924| 924| 
| 925| 925| Earlier in this chapter, we explored *explicitly* coercing between `string` and `number` values. Now, let's explore the same task but with *implicit* coercion approaches. But before we do, we have to examine some nuances of operations that will *implicitly* force coercion.
| 926| 926| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/types & grammar/ch4.md
|    |++++| /app/types & grammar/ch4.md
| 952| 952| 
| 953| 953| (**Warning:** deeply nitty gritty spec-speak coming, so skip the next two paragraphs if that intimidates you!)
| 954| 954| 
|----|    | --
|    | 955|+***
| 955| 956| 
| 956| 957| According to ES5 spec section 11.6.1, the `+` algorithm (when an `object` value is an operand) will concatenate if either operand is either already a `string`, or if the following steps produce a `string` representation. So, when `+` receives an `object` (including `array`) for either operand, it first calls the `ToPrimitive` abstract operation (section 9.1) on the value, which then calls the `[[DefaultValue]]` algorithm (section 8.12.8) with a context hint of `number`.
| 957| 958| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/types & grammar/ch4.md
|    |++++| /app/types & grammar/ch4.md
| 958| 958| 
| 959| 959| If you're paying close attention, you'll notice that this operation is now identical to how the `ToNumber` abstract operation handles `object`s (see the "`ToNumber`"" section earlier). The `valueOf()` operation on the `array` will fail to produce a simple primitive, so it then falls to a `toString()` representation. The two `array`s thus become `"1,2"` and `"3,4"`, respectively. Now, `+` concatenates the two `string`s as you'd normally expect: `"1,23,4"`.
| 960| 960| 
|----|    | --
|    | 961|+***
| 961| 962| 
| 962| 963| Let's set aside those messy details and go back to an earlier, simplified explanation: if either operand to `+` is a `string` (or becomes one with the above steps!), the operation will be `string` concatenation. Otherwise, it's always numeric addition.
| 963| 964| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/types & grammar/ch4.md
|    |++++| /app/types & grammar/ch4.md
|1102|1102| 
|1103|1103| **Note:** Regardless of *implicit* or *explicit* approaches, you could easily make `onlyTwo(..)` or `onlyFive(..)` variations by simply changing the final comparison from `1`, to `2` or `5`, respectively. That's drastically easier than adding a bunch of `&&` and `||` expressions. So, generally, coercion is very helpful in this case.
|1104|1104| 
|1105|    |-### Implicitly: * --> Boolean
|    |1105|+### Implicitly: \* --> Boolean
|1106|1106| 
|1107|1107| Now, let's turn our attention to *implicit* coercion to `boolean` values, as it's by far the most common and also by far the most potentially troublesome.
|1108|1108| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/types & grammar/ch4.md
|    |++++| /app/types & grammar/ch4.md
|1150|1150| 
|1151|1151| There's some very little known, but very important, nuance here.
|1152|1152| 
|1153|    |-In fact, I would argue these operators shouldn't even be called "logical ___ operators", as that name is incomplete in describing what they do. If I were to give them a more accurate (if more clumsy) name, I'd call them "selector operators," or more completely, "operand selector operators."
|    |1153|+In fact, I would argue these operators shouldn't even be called "logical \_\_\_ operators", as that name is incomplete in describing what they do. If I were to give them a more accurate (if more clumsy) name, I'd call them "selector operators," or more completely, "operand selector operators."
|1154|1154| 
|1155|1155| Why? Because they don't actually result in a *logic* value (aka `boolean`) in JavaScript, as they do in some other languages.
|1156|1156| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/types & grammar/ch4.md
|    |++++| /app/types & grammar/ch4.md
|1336|1336| 
|1337|1337| Some minor exceptions to normal expectation to be aware of:
|1338|1338| 
|1339|    |-* `NaN` is never equal to itself (see Chapter 2)
|1340|    |-* `+0` and `-0` are equal to each other (see Chapter 2)
|    |1339|+- `NaN` is never equal to itself (see Chapter 2)
|    |1340|+- `+0` and `-0` are equal to each other (see Chapter 2)
|1341|1341| 
|1342|1342| The final provision in clause 11.9.3.1 is for `==` loose equality comparison with `object`s (including `function`s and `array`s). Two such values are only *equal* if they are both references to *the exact same value*. No coercion occurs here.
|1343|1343| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/types & grammar/ch4.md
|    |++++| /app/types & grammar/ch4.md
|1815|1815| 
|1816|1816| <img src="fig1.png" width="600">
|1817|1817| 
|1818|    |-Source: https://github.com/dorey/JavaScript-Equality-Table
|    |1818|+Source: <https://github.com/dorey/JavaScript-Equality-Table>
|1819|1819| 
|1820|1820| ## Abstract Relational Comparison
|1821|1821| 

types & grammar/ch4.md
|   4| Now•that•we•much•more•fully•understand•JavaScript's•types•and•values,•we•turn•our•attention•to•a•very•controversial•topic:•coercion.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (132 > 79)

types & grammar/ch4.md
|   6| As•we•mentioned•in•Chapter•1,•the•debates•over•whether•coercion•is•a•useful•feature•or•a•flaw•in•the•design•of•the•language•(or•somewhere•in•between!)•have•raged•since•day•one.•If•you've•read•other•popular•books•on•JS,•you•know•that•the•overwhelmingly•prevalent•*message*•out•there•is•that•coercion•is•magical,•evil,•confusing,•and•just•downright•a•bad•idea.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (358 > 79)

types & grammar/ch4.md
|   8| In•the•same•overall•spirit•of•this•book•series,•rather•than•running•away•from•coercion•because•everyone•else•does,•or•because•you•get•bitten•by•some•quirk,•I•think•you•should•run•toward•that•which•you•don't•understand•and•seek•to•*get•it*•more•fully.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (250 > 79)

types & grammar/ch4.md
|  10| Our•goal•is•to•fully•explore•the•pros•and•cons•(yes,•there•*are*•pros!)•of•coercion,•so•that•you•can•make•an•informed•decision•on•its•appropriateness•in•your•program.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (166 > 79)

types & grammar/ch4.md
|  14| Converting•a•value•from•one•type•to•another•is•often•called•"type•casting,"•when•done•explicitly,•and•"coercion"•when•done•implicitly•(forced•by•the•rules•of•how•a•value•is•used).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (179 > 79)

types & grammar/ch4.md
|  16| **Note:**•It•may•not•be•obvious,•but•JavaScript•coercions•always•result•in•one•of•the•scalar•primitive•(see•Chapter•2)•values,•like•`string`,•`number`,•or•`boolean`.•There•is•no•coercion•that•results•in•a•complex•value•like•`object`•or•`function`.•Chapter•3•covers•"boxing,"•which•wraps•scalar•primitive•values•in•their•`object`•counterparts,•but•this•is•not•really•coercion•in•an•accurate•sense.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (396 > 79)

types & grammar/ch4.md
|  18| Another•way•these•terms•are•often•distinguished•is•as•follows:•"type•casting"•(or•"type•conversion")•occur•in•statically•typed•languages•at•compile•time,•while•"type•coercion"•is•a•runtime•conversion•for•dynamically•typed•languages.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (232 > 79)

types & grammar/ch4.md
|  20| However,•in•JavaScript,•most•people•refer•to•all•these•types•of•conversions•as•*coercion*,•so•the•way•I•prefer•to•distinguish•is•to•say•"implicit•coercion"•vs.•"explicit•coercion."
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (180 > 79)

types & grammar/ch4.md
|  22| The•difference•should•be•obvious:•"explicit•coercion"•is•when•it•is•obvious•from•looking•at•the•code•that•a•type•conversion•is•intentionally•occurring,•whereas•"implicit•coercion"•is•when•the•type•conversion•will•occur•as•a•less•obvious•side•effect•of•some•other•intentional•operation.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (285 > 79)

types & grammar/ch4.md
|  34| For•`b`,•the•coercion•that•occurs•happens•implicitly,•because•the•`+`•operator•combined•with•one•of•the•operands•being•a•`string`•value•(`""`)•will•insist•on•the•operation•being•a•`string`•concatenation•(adding•two•strings•together),•which•*as•a•(hidden)•side•effect*•will•force•the•`42`•value•in•`a`•to•be•coerced•to•its•`string`•equivalent:•`"42"`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (350 > 79)

types & grammar/ch4.md
|  36| By•contrast,•the•`String(..)`•function•makes•it•pretty•obvious•that•it's•explicitly•taking•the•value•in•`a`•and•coercing•it•to•a•`string`•representation.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (153 > 79)

types & grammar/ch4.md
|  38| Both•approaches•accomplish•the•same•effect:•`"42"`•comes•from•`42`.•But•it's•the•*how*•that•is•at•the•heart•of•the•heated•debates•over•JavaScript•coercion.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (155 > 79)

types & grammar/ch4.md
|  40| **Note:**•Technically,•there's•some•nuanced•behavioral•difference•here•beyond•the•stylistic•difference.•We•cover•that•in•more•detail•later•in•the•chapter,•in•the•"Implicitly:•Strings•<-->•Numbers"•section.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (205 > 79)

types & grammar/ch4.md
|  42| The•terms•"explicit"•and•"implicit,"•or•"obvious"•and•"hidden•side•effect,"•are•*relative*.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (91 > 79)

types & grammar/ch4.md
|  44| If•you•know•exactly•what•`a•+•""`•is•doing•and•you're•intentionally•doing•that•to•coerce•to•a•`string`,•you•might•feel•the•operation•is•sufficiently•"explicit."•Conversely,•if•you've•never•seen•the•`String(..)`•function•used•for•`string`•coercion,•its•behavior•might•seem•hidden•enough•as•to•feel•"implicit"•to•you.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (315 > 79)

types & grammar/ch4.md
|  46| But•we're•having•this•discussion•of•"explicit"•vs.•"implicit"•based•on•the•likely•opinions•of•an•*average,•reasonably•informed,•but•not•expert•or•JS•specification•devotee*•developer.•To•whatever•extent•you•do•or•do•not•find•yourself•fitting•neatly•in•that•bucket,•you•will•need•to•adjust•your•perspective•on•our•observations•here•accordingly.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (342 > 79)

types & grammar/ch4.md
|  48| Just•remember:•it's•often•rare•that•we•write•our•code•and•are•the•only•ones•who•ever•read•it.•Even•if•you're•an•expert•on•all•the•ins•and•outs•of•JS,•consider•how•a•less•experienced•teammate•of•yours•will•feel•when•they•read•your•code.•Will•it•be•"explicit"•or•"implicit"•to•them•in•the•same•way•it•is•for•you?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (310 > 79)

types & grammar/ch4.md
|  52| Before•we•can•explore•*explicit*•vs•*implicit*•coercion,•we•need•to•learn•the•basic•rules•that•govern•how•values•*become*•either•a•`string`,•`number`,•or•`boolean`.•The•ES5•spec•in•section•9•defines•several•"abstract•operations"•(fancy•spec-speak•for•"internal-only•operation")•with•the•rules•of•value•conversion.•We•will•specifically•pay•attention•to:•`ToString`,•`ToNumber`,•and•`ToBoolean`,•and•to•a•lesser•extent,•`ToPrimitive`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (432 > 79)

types & grammar/ch4.md
|  56| When•any•non-`string`•value•is•coerced•to•a•`string`•representation,•the•conversion•is•handled•by•the•`ToString`•abstract•operation•in•section•9.8•of•the•specification.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (168 > 79)

types & grammar/ch4.md
|  58| Built-in•primitive•values•have•natural•stringification:•`null`•becomes•`"null"`,•`undefined`•becomes•`"undefined"`•and•`true`•becomes•`"true"`.•`number`s•are•generally•expressed•in•the•natural•way•you'd•expect,•but•as•we•discussed•in•Chapter•2,•very•small•or•very•large•`numbers`•are•represented•in•exponent•form:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (313 > 79)

types & grammar/ch4.md
|  68| For•regular•objects,•unless•you•specify•your•own,•the•default•`toString()`•(located•in•`Object.prototype.toString()`)•will•return•the•*internal•`[[Class]]`*•(see•Chapter•3),•like•for•instance•`"[object•Object]"`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (212 > 79)

types & grammar/ch4.md
|  70| But•as•shown•earlier,•if•an•object•has•its•own•`toString()`•method•on•it,•and•you•use•that•object•in•a•`string`-like•way,•its•`toString()`•will•automatically•be•called,•and•the•`string`•result•of•that•call•will•be•used•instead.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (227 > 79)

types & grammar/ch4.md
|  72| **Note:**•The•way•an•object•is•coerced•to•a•`string`•technically•goes•through•the•`ToPrimitive`•abstract•operation•(ES5•spec,•section•9.1),•but•those•nuanced•details•are•covered•in•more•detail•in•the•`ToNumber`•section•later•in•this•chapter,•so•we•will•skip•over•them•here.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (273 > 79)

types & grammar/ch4.md
|  74| Arrays•have•an•overridden•default•`toString()`•that•stringifies•as•the•(string)•concatenation•of•all•its•values•(each•stringified•themselves),•with•`","`•in•between•each•value:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (176 > 79)

types & grammar/ch4.md
|  82| Again,•`toString()`•can•either•be•called•explicitly,•or•it•will•automatically•be•called•if•a•non-`string`•is•used•in•a•`string`•context.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (136 > 79)

types & grammar/ch4.md
|  86| Another•task•that•seems•awfully•related•to•`ToString`•is•when•you•use•the•`JSON.stringify(..)`•utility•to•serialize•a•value•to•a•JSON-compatible•`string`•value.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (160 > 79)

types & grammar/ch4.md
|  88| It's•important•to•note•that•this•stringification•is•not•exactly•the•same•thing•as•coercion.•But•since•it's•related•to•the•`ToString`•rules•above,•we'll•take•a•slight•diversion•to•cover•JSON•stringification•behaviors•here.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (221 > 79)

types & grammar/ch4.md
|  90| For•most•simple•values,•JSON•stringification•behaves•basically•the•same•as•`toString()`•conversions,•except•that•the•serialization•result•is•*always•a•`string`*:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (161 > 79)

types & grammar/ch4.md
|  99| Any•*JSON-safe*•value•can•be•stringified•by•`JSON.stringify(..)`.•But•what•is•*JSON-safe*?•Any•value•that•can•be•represented•validly•in•a•JSON•representation.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (158 > 79)

types & grammar/ch4.md
| 101| It•may•be•easier•to•consider•values•that•are•**not**•JSON-safe.•Some•examples:•`undefined`s,•`function`s,•(ES6+)•`symbol`s,•and•`object`s•with•circular•references•(where•property•references•in•an•object•structure•create•a•never-ending•cycle•through•each•other).•These•are•all•illegal•values•for•a•standard•JSON•structure,•mostly•because•they•aren't•portable•to•other•languages•that•consume•JSON•values.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (402 > 79)

types & grammar/ch4.md
| 103| The•`JSON.stringify(..)`•utility•will•automatically•omit•`undefined`,•`function`,•and•`symbol`•values•when•it•comes•across•them.•If•such•a•value•is•found•in•an•`array`,•that•value•is•replaced•by•`null`•(so•that•the•array•position•information•isn't•altered).•If•found•as•a•property•of•an•`object`,•that•property•will•simply•be•excluded.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (335 > 79)

types & grammar/ch4.md
| 115| But•if•you•try•to•`JSON.stringify(..)`•an•`object`•with•circular•reference(s)•in•it,•an•error•will•be•thrown.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (109 > 79)

types & grammar/ch4.md
| 117| JSON•stringification•has•the•special•behavior•that•if•an•`object`•value•has•a•`toJSON()`•method•defined,•this•method•will•be•called•first•to•get•a•value•to•use•for•serialization.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (178 > 79)

types & grammar/ch4.md
| 119| If•you•intend•to•JSON•stringify•an•object•that•may•contain•illegal•JSON•value(s),•or•if•you•just•have•values•in•the•`object`•that•aren't•appropriate•for•the•serialization,•you•should•define•a•`toJSON()`•method•for•it•that•returns•a•*JSON-safe*•version•of•the•`object`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (268 > 79)

types & grammar/ch4.md
| 147| It's•a•very•common•misconception•that•`toJSON()`•should•return•a•JSON•stringification•representation.•That's•probably•incorrect,•unless•you're•wanting•to•actually•stringify•the•`string`•itself•(usually•not!).•`toJSON()`•should•return•the•actual•regular•value•(of•whatever•type)•that's•appropriate,•and•`JSON.stringify(..)`•itself•will•handle•the•stringification.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (362 > 79)

types & grammar/ch4.md
| 149| In•other•words,•`toJSON()`•should•be•interpreted•as•"to•a•JSON-safe•value•suitable•for•stringification,"•not•"to•a•JSON•string"•as•many•developers•mistakenly•assume.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (165 > 79)

types & grammar/ch4.md
| 179| In•the•second•call,•we•stringified•the•returned•`string`•rather•than•the•`array`•itself,•which•was•probably•not•what•we•wanted•to•do.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (133 > 79)

types & grammar/ch4.md
| 181| While•we're•talking•about•`JSON.stringify(..)`,•let's•discuss•some•lesser-known•functionalities•that•can•still•be•very•useful.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (126 > 79)

types & grammar/ch4.md
| 183| An•optional•second•argument•can•be•passed•to•`JSON.stringify(..)`•that•is•called•*replacer*.•This•argument•can•either•be•an•`array`•or•a•`function`.•It's•used•to•customize•the•recursive•serialization•of•an•`object`•by•providing•a•filtering•mechanism•for•which•properties•should•and•should•not•be•included,•in•a•similar•way•to•how•`toJSON()`•can•prepare•a•value•for•serialization.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (379 > 79)

types & grammar/ch4.md
| 185| If•*replacer*•is•an•`array`,•it•should•be•an•`array`•of•`string`s,•each•of•which•will•specify•a•property•name•that•is•allowed•to•be•included•in•the•serialization•of•the•`object`.•If•a•property•exists•that•isn't•in•this•list,•it•will•be•skipped.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (244 > 79)

types & grammar/ch4.md
| 187| If•*replacer*•is•a•`function`,•it•will•be•called•once•for•the•`object`•itself,•and•then•once•for•each•property•in•the•`object`,•and•each•time•is•passed•two•arguments,•*key*•and•*value*.•To•skip•a•*key*•in•the•serialization,•return•`undefined`.•Otherwise,•return•the•*value*•provided.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (283 > 79)

types & grammar/ch4.md
| 204| **Note:**•In•the•`function`•*replacer*•case,•the•key•argument•`k`•is•`undefined`•for•the•first•call•(where•the•`a`•object•itself•is•being•passed•in).•The•`if`•statement•**filters•out**•the•property•named•`"c"`.•Stringification•is•recursive,•so•the•`[1,2,3]`•array•has•each•of•its•values•(`1`,•`2`,•and•`3`)•passed•as•`v`•to•*replacer*,•with•indexes•(`0`,•`1`,•and•`2`)•as•`k`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (376 > 79)

types & grammar/ch4.md
| 206| A•third•optional•argument•can•also•be•passed•to•`JSON.stringify(..)`,•called•*space*,•which•is•used•as•indentation•for•prettier•human-friendly•output.•*space*•can•be•a•positive•integer•to•indicate•how•many•space•characters•should•be•used•at•each•indentation•level.•Or,•*space*•can•be•a•`string`,•in•which•case•up•to•the•first•ten•characters•of•its•value•will•be•used•for•each•indentation•level.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (394 > 79)

types & grammar/ch4.md
| 238| Remember,•`JSON.stringify(..)`•is•not•directly•a•form•of•coercion.•We•covered•it•here,•however,•for•two•reasons•that•relate•its•behavior•to•`ToString`•coercion:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (160 > 79)

types & grammar/ch4.md
| 240| 1.•`string`,•`number`,•`boolean`,•and•`null`•values•all•stringify•for•JSON•basically•the•same•as•how•they•coerce•to•`string`•values•via•the•rules•of•the•`ToString`•abstract•operation.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (183 > 79)

types & grammar/ch4.md
| 241| 2.•If•you•pass•an•`object`•value•to•`JSON.stringify(..)`,•and•that•`object`•has•a•`toJSON()`•method•on•it,•`toJSON()`•is•automatically•called•to•(sort•of)•"coerce"•the•value•to•be•*JSON-safe*•before•stringification.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (215 > 79)

types & grammar/ch4.md
| 245| If•any•non-`number`•value•is•used•in•a•way•that•requires•it•to•be•a•`number`,•such•as•a•mathematical•operation,•the•ES5•spec•defines•the•`ToNumber`•abstract•operation•in•section•9.3.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (182 > 79)

types & grammar/ch4.md
| 247| For•example,•`true`•becomes•`1`•and•`false`•becomes•`0`.•`undefined`•becomes•`NaN`,•but•(curiously)•`null`•becomes•`0`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (119 > 79)

types & grammar/ch4.md
| 249| `ToNumber`•for•a•`string`•value•essentially•works•for•the•most•part•like•the•rules/syntax•for•numeric•literals•(see•Chapter•3).•If•it•fails,•the•result•is•`NaN`•(instead•of•a•syntax•error•as•with•`number`•literals).•One•example•difference•is•that•`0`-prefixed•octal•numbers•are•not•handled•as•octals•(just•as•normal•base-10•decimals)•in•this•operation,•though•such•octals•are•valid•as•`number`•literals•(see•Chapter•2).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (419 > 79)

types & grammar/ch4.md
| 251| **Note:**•The•differences•between•`number`•literal•grammar•and•`ToNumber`•on•a•`string`•value•are•subtle•and•highly•nuanced,•and•thus•will•not•be•covered•further•here.•Consult•section•9.3.1•of•the•ES5•spec•for•more•information.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (227 > 79)

types & grammar/ch4.md
| 253| Objects•(and•arrays)•will•first•be•converted•to•their•primitive•value•equivalent,•and•the•resulting•value•(if•a•primitive•but•not•already•a•`number`)•is•coerced•to•a•`number`•according•to•the•`ToNumber`•rules•just•mentioned.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (224 > 79)

types & grammar/ch4.md
| 255| To•convert•to•this•primitive•value•equivalent,•the•`ToPrimitive`•abstract•operation•(ES5•spec,•section•9.1)•will•consult•the•value•(using•the•internal•`DefaultValue`•operation•--•ES5•spec,•section•8.12.8)•in•question•to•see•if•it•has•a•`valueOf()`•method.•If•`valueOf()`•is•available•and•it•returns•a•primitive•value,•*that*•value•is•used•for•the•coercion.•If•not,•but•`toString()`•is•available,•it•will•provide•the•value•for•the•coercion.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (439 > 79)

types & grammar/ch4.md
| 259| As•of•ES5,•you•can•create•such•a•noncoercible•object•--•one•without•`valueOf()`•and•`toString()`•--•if•it•has•a•`null`•value•for•its•`[[Prototype]]`,•typically•created•with•`Object.create(null)`.•See•the•*this•&•Object•Prototypes*•title•of•this•series•for•more•information•on•`[[Prototype]]`s.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (293 > 79)

types & grammar/ch4.md
| 261| **Note:**•We•cover•how•to•coerce•to•`number`s•later•in•this•chapter•in•detail,•but•for•this•next•code•snippet,•just•assume•the•`Number(..)`•function•does•so.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (157 > 79)

types & grammar/ch4.md
| 293| Next,•let's•have•a•little•chat•about•how•`boolean`s•behave•in•JS.•There's•**lots•of•confusion•and•misconception**•floating•out•there•around•this•topic,•so•pay•close•attention!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (175 > 79)

types & grammar/ch4.md
| 295| First•and•foremost,•JS•has•actual•keywords•`true`•and•`false`,•and•they•behave•exactly•as•you'd•expect•of•`boolean`•values.•It's•a•common•misconception•that•the•values•`1`•and•`0`•are•identical•to•`true`/`false`.•While•that•may•be•true•in•other•languages,•in•JS•the•`number`s•are•`number`s•and•the•`boolean`s•are•`boolean`s.•You•can•coerce•`1`•to•`true`•(and•vice•versa)•or•`0`•to•`false`•(and•vice•versa).•But•they're•not•the•same.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (432 > 79)

types & grammar/ch4.md
| 299| But•that's•not•the•end•of•the•story.•We•need•to•discuss•how•values•other•than•the•two•`boolean`s•behave•whenever•you•coerce•*to*•their•`boolean`•equivalent.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (156 > 79)

types & grammar/ch4.md
| 306| I'm•not•just•being•facetious.•The•JS•spec•defines•a•specific,•narrow•list•of•values•that•will•coerce•to•`false`•when•coerced•to•a•`boolean`•value.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (146 > 79)

types & grammar/ch4.md
| 308| How•do•we•know•what•the•list•of•values•is?•In•the•ES5•spec,•section•9.2•defines•a•`ToBoolean`•abstract•operation,•which•says•exactly•what•happens•for•all•the•possible•values•when•you•try•to•coerce•them•"to•boolean."
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (215 > 79)

types & grammar/ch4.md
| 318| That's•it.•If•a•value•is•on•that•list,•it's•a•"falsy"•value,•and•it•will•coerce•to•`false`•if•you•force•a•`boolean`•coercion•on•it.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (131 > 79)

types & grammar/ch4.md
| 320| By•logical•conclusion,•if•a•value•is•*not*•on•that•list,•it•must•be•on•*another•list*,•which•we•call•the•"truthy"•values•list.•But•JS•doesn't•really•define•a•"truthy"•list•per•se.•It•gives•some•examples,•such•as•saying•explicitly•that•all•objects•are•truthy,•but•mostly•the•spec•just•implies:•**anything•not•explicitly•on•the•falsy•list•is•therefore•truthy.**
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (359 > 79)

types & grammar/ch4.md
| 324| Wait•a•minute,•that•section•title•even•sounds•contradictory.•I•literally•*just•said*•the•spec•calls•all•objects•truthy,•right?•There•should•be•no•such•thing•as•a•"falsy•object."
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (177 > 79)

types & grammar/ch4.md
| 328| You•might•be•tempted•to•think•it•means•an•object•wrapper•(see•Chapter•3)•around•a•falsy•value•(such•as•`""`,•`0`•or•`false`).•But•don't•fall•into•that•*trap*.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (158 > 79)

types & grammar/ch4.md
| 340| We•know•all•three•values•here•are•objects•(see•Chapter•3)•wrapped•around•obviously•falsy•values.•But•do•these•objects•behave•as•`true`•or•as•`false`?•That's•easy•to•answer:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (172 > 79)

types & grammar/ch4.md
| 348| So,•all•three•behave•as•`true`,•as•that's•the•only•way•`d`•could•end•up•as•`true`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (82 > 79)

types & grammar/ch4.md
| 350| **Tip:**•Notice•the•`Boolean(•..•)`•wrapped•around•the•`a•&&•b•&&•c`•expression•--•you•might•wonder•why•that's•there.•We'll•come•back•to•that•later•in•this•chapter,•so•make•a•mental•note•of•it.•For•a•sneak-peek•(trivia-wise),•try•for•yourself•what•`d`•will•be•if•you•just•do•`d•=•a•&&•b•&&•c`•without•the•`Boolean(•..•)`•call!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (326 > 79)

types & grammar/ch4.md
| 352| So,•if•"falsy•objects"•are•**not•just•objects•wrapped•around•falsy•values**,•what•the•heck•are•they?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (100 > 79)

types & grammar/ch4.md
| 354| The•tricky•part•is•that•they•can•show•up•in•your•JS•program,•but•they're•not•actually•part•of•JavaScript•itself.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (112 > 79)

types & grammar/ch4.md
| 358| There•are•certain•cases•where•browsers•have•created•their•own•sort•of•*exotic*•values•behavior,•namely•this•idea•of•"falsy•objects,"•on•top•of•regular•JS•semantics.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (164 > 79)

types & grammar/ch4.md
| 360| A•"falsy•object"•is•a•value•that•looks•and•acts•like•a•normal•object•(properties,•etc.),•but•when•you•coerce•it•to•a•`boolean`,•it•coerces•to•a•`false`•value.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (158 > 79)

types & grammar/ch4.md
| 364| The•most•well-known•case•is•`document.all`:•an•array-like•(object)•provided•to•your•JS•program•*by•the•DOM*•(not•the•JS•engine•itself),•which•exposes•elements•in•your•page•to•your•JS•program.•It•*used*•to•behave•like•a•normal•object--it•would•act•truthy.•But•not•anymore.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (271 > 79)

types & grammar/ch4.md
| 366| `document.all`•itself•was•never•really•"standard"•and•has•long•since•been•deprecated/abandoned.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (95 > 79)

types & grammar/ch4.md
| 368| "Can't•they•just•remove•it,•then?"•Sorry,•nice•try.•Wish•they•could.•But•there's•far•too•many•legacy•JS•code•bases•out•there•that•rely•on•using•it.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (147 > 79)

types & grammar/ch4.md
| 370| So,•why•make•it•act•falsy?•Because•coercions•of•`document.all`•to•`boolean`•(like•in•`if`•statements)•were•almost•always•used•as•a•means•of•detecting•old,•nonstandard•IE.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (170 > 79)

types & grammar/ch4.md
| 372| IE•has•long•since•come•up•to•standards•compliance,•and•in•many•cases•is•pushing•the•web•forward•as•much•or•more•than•any•other•browser.•But•all•that•old•`if•(document.all)•{•/*•it's•IE•*/•}`•code•is•still•out•there,•and•much•of•it•is•probably•never•going•away.•All•this•legacy•code•is•still•assuming•it's•running•in•decade-old•IE,•which•just•leads•to•bad•browsing•experience•for•IE•users.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (388 > 79)

types & grammar/ch4.md
| 374| So,•we•can't•remove•`document.all`•completely,•but•IE•doesn't•want•`if•(document.all)•{•..•}`•code•to•work•anymore,•so•that•users•in•modern•IE•get•new,•standards-compliant•code•logic.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (183 > 79)

types & grammar/ch4.md
| 376| "What•should•we•do?"•**"I've•got•it!•Let's•bastardize•the•JS•type•system•and•pretend•that•`document.all`•is•falsy!"
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (115 > 79)

types & grammar/ch4.md
| 378| Ugh.•That•sucks.•It's•a•crazy•gotcha•that•most•JS•developers•don't•understand.•But•the•alternative•(doing•nothing•about•the•above•no-win•problems)•sucks•*just•a•little•bit•more*.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (178 > 79)

types & grammar/ch4.md
| 380| So...•that's•what•we've•got:•crazy,•nonstandard•"falsy•objects"•added•to•JavaScript•by•the•browsers.•Yay!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (105 > 79)

types & grammar/ch4.md
| 384| Back•to•the•truthy•list.•What•exactly•are•the•truthy•values?•Remember:•**a•value•is•truthy•if•it's•not•on•the•falsy•list.**
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (123 > 79)

types & grammar/ch4.md
| 398| What•value•do•you•expect•`d`•to•have•here?•It's•gotta•be•either•`true`•or•`false`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (82 > 79)

types & grammar/ch4.md
| 400| It's•`true`.•Why?•Because•despite•the•contents•of•those•`string`•values•looking•like•falsy•values,•the•`string`•values•themselves•are•all•truthy,•because•`""`•is•the•only•`string`•value•on•the•falsy•list.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (204 > 79)

types & grammar/ch4.md
| 414| Yep,•you•guessed•it,•`d`•is•still•`true`•here.•Why?•Same•reason•as•before.•Despite•what•it•may•seem•like,•`[]`,•`{}`,•and•`function(){}`•are•*not*•on•the•falsy•list,•and•thus•are•truthy•values.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (193 > 79)

types & grammar/ch4.md
| 416| In•other•words,•the•truthy•list•is•infinitely•long.•It's•impossible•to•make•such•a•list.•You•can•only•make•a•finite•falsy•list•and•consult•*it*.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (144 > 79)

types & grammar/ch4.md
| 418| Take•five•minutes,•write•the•falsy•list•on•a•post-it•note•for•your•computer•monitor,•or•memorize•it•if•you•prefer.•Either•way,•you'll•easily•be•able•to•construct•a•virtual•truthy•list•whenever•you•need•it•by•simply•asking•if•it's•on•the•falsy•list•or•not.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (255 > 79)

types & grammar/ch4.md
| 420| The•importance•of•truthy•and•falsy•is•in•understanding•how•a•value•will•behave•if•you•coerce•it•(either•explicitly•or•implicitly)•to•a•`boolean`•value.•Now•that•you•have•those•two•lists•in•mind,•we•can•dive•into•coercion•examples•themselves.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (241 > 79)

types & grammar/ch4.md
| 424| *Explicit*•coercion•refers•to•type•conversions•that•are•obvious•and•explicit.•There's•a•wide•range•of•type•conversion•usage•that•clearly•falls•under•the•*explicit*•coercion•category•for•most•developers.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (202 > 79)

types & grammar/ch4.md
| 426| The•goal•here•is•to•identify•patterns•in•our•code•where•we•can•make•it•clear•and•obvious•that•we're•converting•a•value•from•one•type•to•another,•so•as•to•not•leave•potholes•for•future•developers•to•trip•into.•The•more•explicit•we•are,•the•more•likely•someone•later•will•be•able•to•read•our•code•and•understand•without•undue•effort•what•our•intent•was.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (351 > 79)

types & grammar/ch4.md
| 428| It•would•be•hard•to•find•any•salient•disagreements•with•*explicit*•coercion,•as•it•most•closely•aligns•with•how•the•commonly•accepted•practice•of•type•conversion•works•in•statically•typed•languages.•As•such,•we'll•take•for•granted•(for•now)•that•*explicit*•coercion•can•be•agreed•upon•to•not•be•evil•or•controversial.•We'll•revisit•this•later,•though.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (351 > 79)

types & grammar/ch4.md
| 432| We'll•start•with•the•simplest•and•perhaps•most•common•coercion•operation:•coercing•values•between•`string`•and•`number`•representation.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (135 > 79)

types & grammar/ch4.md
| 434| To•coerce•between•`string`s•and•`number`s,•we•use•the•built-in•`String(..)`•and•`Number(..)`•functions•(which•we•referred•to•as•"native•constructors"•in•Chapter•3),•but•**very•importantly**,•we•do•not•use•the•`new`•keyword•in•front•of•them.•As•such,•we're•not•creating•object•wrappers.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (285 > 79)

types & grammar/ch4.md
| 449| `String(..)`•coerces•from•any•other•value•to•a•primitive•`string`•value,•using•the•rules•of•the•`ToString`•operation•discussed•earlier.•`Number(..)`•coerces•from•any•other•value•to•a•primitive•`number`•value,•using•the•rules•of•the•`ToNumber`•operation•discussed•earlier.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (271 > 79)

types & grammar/ch4.md
| 451| I•call•this•*explicit*•coercion•because•in•general,•it's•pretty•obvious•to•most•developers•that•the•end•result•of•these•operations•is•the•applicable•type•conversion.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (165 > 79)

types & grammar/ch4.md
| 453| In•fact,•this•usage•actually•looks•a•lot•like•it•does•in•some•other•statically•typed•languages.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (95 > 79)

types & grammar/ch4.md
| 455| For•example,•in•C/C++,•you•can•say•either•`(int)x`•or•`int(x)`,•and•both•will•convert•the•value•in•`x`•to•an•integer.•Both•forms•are•valid,•but•many•prefer•the•latter,•which•kinda•looks•like•a•function•call.•In•JavaScript,•when•you•say•`Number(x)`,•it•looks•awfully•similar.•Does•it•matter•that•it's•*actually*•a•function•call•in•JS?•Not•really.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (345 > 79)

types & grammar/ch4.md
| 457| Besides•`String(..)`•and•`Number(..)`,•there•are•other•ways•to•"explicitly"•convert•these•values•between•`string`•and•`number`:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (127 > 79)

types & grammar/ch4.md
| 470| Calling•`a.toString()`•is•ostensibly•explicit•(pretty•clear•that•"toString"•means•"to•a•string"),•but•there's•some•hidden•implicitness•here.•`toString()`•cannot•be•called•on•a•*primitive*•value•like•`42`.•So•JS•automatically•"boxes"•(see•Chapter•3)•`42`•in•an•object•wrapper,•so•that•`toString()`•can•be•called•against•the•object.•In•other•words,•you•might•call•it•"explicitly•implicit."
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (387 > 79)

types & grammar/ch4.md
| 472| `+c`•here•is•showing•the•*unary•operator*•form•(operator•with•only•one•operand)•of•the•`+`•operator.•Instead•of•performing•mathematic•addition•(or•string•concatenation•--•see•below),•the•unary•`+`•explicitly•coerces•its•operand•(`c`)•to•a•`number`•value.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (254 > 79)

types & grammar/ch4.md
| 474| Is•`+c`•*explicit*•coercion?•Depends•on•your•experience•and•perspective.•If•you•know•(which•you•do,•now!)•that•unary•`+`•is•explicitly•intended•for•`number`•coercion,•then•it's•pretty•explicit•and•obvious.•However,•if•you've•never•seen•it•before,•it•can•seem•awfully•confusing,•implicit,•with•hidden•side•effects,•etc.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (318 > 79)

types & grammar/ch4.md
| 476| **Note:**•The•generally•accepted•perspective•in•the•open-source•JS•community•is•that•unary•`+`•is•an•accepted•form•of•*explicit*•coercion.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (138 > 79)

types & grammar/ch4.md
| 478| Even•if•you•really•like•the•`+c`•form,•there•are•definitely•places•where•it•can•look•awfully•confusing.•Consider:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (113 > 79)

types & grammar/ch4.md
| 487| The•unary•`-`•operator•also•coerces•like•`+`•does,•but•it•also•flips•the•sign•of•the•number.•However,•you•cannot•put•two•`--`•next•to•each•other•to•unflip•the•sign,•as•that's•parsed•as•the•decrement•operator.•Instead,•you•would•need•to•do:•`-•-"3.14"`•with•a•space•in•between,•and•that•would•result•in•coercion•to•`3.14`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (321 > 79)

types & grammar/ch4.md
| 489| You•can•probably•dream•up•all•sorts•of•hideous•combinations•of•binary•operators•(like•`+`•for•addition)•next•to•the•unary•form•of•an•operator.•Here's•another•crazy•example:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (172 > 79)

types & grammar/ch4.md
| 495| You•should•strongly•consider•avoiding•unary•`+`•(or•`-`)•coercion•when•it's•immediately•adjacent•to•other•operators.•While•the•above•works,•it•would•almost•universally•be•considered•a•bad•idea.•Even•`d•=•+c`•(or•`d•=+•c`•for•that•matter!)•can•far•too•easily•be•confused•for•`d•+=•c`,•which•is•entirely•different!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (312 > 79)

types & grammar/ch4.md
| 497| **Note:**•Another•extremely•confusing•place•for•unary•`+`•to•be•used•adjacent•to•another•operator•would•be•the•`++`•increment•operator•and•`--`•decrement•operator.•For•example:•`a•+++b`,•`a•+•++b`,•and•`a•+•+•+b`.•See•"Expression•Side-Effects"•in•Chapter•5•for•more•about•`++`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (277 > 79)

types & grammar/ch4.md
| 499| Remember,•we're•trying•to•be•explicit•and•**reduce**•confusion,•not•make•it•much•worse!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (87 > 79)

types & grammar/ch4.md
| 503| Another•common•usage•of•the•unary•`+`•operator•is•to•coerce•a•`Date`•object•into•a•`number`,•because•the•result•is•the•unix•timestamp•(milliseconds•elapsed•since•1•January•1970•00:00:00•UTC)•representation•of•the•date/time•value:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (229 > 79)

types & grammar/ch4.md
| 511| The•most•common•usage•of•this•idiom•is•to•get•the•current•*now*•moment•as•a•timestamp,•such•as:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (95 > 79)

types & grammar/ch4.md
| 517| **Note:**•Some•developers•are•aware•of•a•peculiar•syntactic•"trick"•in•JavaScript,•which•is•that•the•`()`•set•on•a•constructor•call•(a•function•called•with•`new`)•is•*optional*•if•there•are•no•arguments•to•pass.•So•you•may•run•across•the•`var•timestamp•=•+new•Date;`•form.•However,•not•all•developers•agree•that•omitting•the•`()`•improves•readability,•as•it's•an•uncommon•syntax•exception•that•only•applies•to•the•`new•fn()`•call•form•and•not•the•regular•`fn()`•call•form.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (472 > 79)

types & grammar/ch4.md
| 519| But•coercion•is•not•the•only•way•to•get•the•timestamp•out•of•a•`Date`•object.•A•noncoercion•approach•is•perhaps•even•preferable,•as•it's•even•more•explicit:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (156 > 79)

types & grammar/ch4.md
| 527| But•an•*even•more*•preferable•noncoercion•option•is•to•use•the•ES5•added•`Date.now()`•static•function:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (102 > 79)

types & grammar/ch4.md
| 533| And•if•you•want•to•polyfill•`Date.now()`•into•older•browsers,•it's•pretty•simple:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (81 > 79)

types & grammar/ch4.md
| 543| I'd•recommend•skipping•the•coercion•forms•related•to•dates.•Use•`Date.now()`•for•current•*now*•timestamps,•and•`new•Date(•..•).getTime()`•for•getting•a•timestamp•of•a•specific•*non-now*•date/time•that•you•need•to•specify.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (221 > 79)

types & grammar/ch4.md
| 547| One•coercive•JS•operator•that•is•often•overlooked•and•usually•very•confused•is•the•tilde•`~`•operator•(aka•"bitwise•NOT").•Many•of•those•who•even•understand•what•it•does•will•often•times•still•want•to•avoid•it.•But•sticking•to•the•spirit•of•our•approach•in•this•book•and•series,•let's•dig•into•it•to•find•out•if•`~`•has•anything•useful•to•give•us.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (347 > 79)

types & grammar/ch4.md
| 549| In•the•"32-bit•(Signed)•Integers"•section•of•Chapter•2,•we•covered•how•bitwise•operators•in•JS•are•defined•only•for•32-bit•operations,•which•means•they•force•their•operands•to•conform•to•32-bit•value•representations.•The•rules•for•how•this•happens•are•controlled•by•the•`ToInt32`•abstract•operation•(ES5•spec,•section•9.5).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (323 > 79)

types & grammar/ch4.md
| 551| `ToInt32`•first•does•a•`ToNumber`•coercion,•which•means•if•the•value•is•`"123"`,•it's•going•to•first•become•`123`•before•the•`ToInt32`•rules•are•applied.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (153 > 79)

types & grammar/ch4.md
| 553| While•not•*technically*•coercion•itself•(since•the•type•doesn't•change!),•using•bitwise•operators•(like•`|`•or•`~`)•with•certain•special•`number`•values•produces•a•coercive•effect•that•results•in•a•different•`number`•value.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (223 > 79)

types & grammar/ch4.md
| 555| For•example,•let's•first•consider•the•`|`•"bitwise•OR"•operator•used•in•the•otherwise•no-op•idiom•`0•|•x`,•which•(as•Chapter•2•showed)•essentially•only•does•the•`ToInt32`•conversion:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (182 > 79)

types & grammar/ch4.md
| 564| These•special•numbers•aren't•32-bit•representable•(since•they•come•from•the•64-bit•IEEE•754•standard•--•see•Chapter•2),•so•`ToInt32`•just•specifies•`0`•as•the•result•from•these•values.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (184 > 79)

types & grammar/ch4.md
| 566| It's•debatable•if•`0•|•__`•is•an•*explicit*•form•of•this•coercive•`ToInt32`•operation•or•if•it's•more•*implicit*.•From•the•spec•perspective,•it's•unquestionably•*explicit*,•but•if•you•don't•understand•bitwise•operations•at•this•level,•it•can•seem•a•bit•more•*implicitly*•magical.•Nevertheless,•consistent•with•other•assertions•in•this•chapter,•we•will•call•it•*explicit*.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (371 > 79)

types & grammar/ch4.md
| 568| So,•let's•turn•our•attention•back•to•`~`.•The•`~`•operator•first•"coerces"•to•a•32-bit•`number`•value,•and•then•performs•a•bitwise•negation•(flipping•each•bit's•parity).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (169 > 79)

types & grammar/ch4.md
| 570| **Note:**•This•is•very•similar•to•how•`!`•not•only•coerces•its•value•to•`boolean`•but•also•flips•its•parity•(see•discussion•of•the•"unary•`!`"•later).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (150 > 79)

types & grammar/ch4.md
| 572| But...•what!?•Why•do•we•care•about•bits•being•flipped?•That's•some•pretty•specialized,•nuanced•stuff.•It's•pretty•rare•for•JS•developers•to•need•to•reason•about•individual•bits.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (177 > 79)

types & grammar/ch4.md
| 574| Another•way•of•thinking•about•the•definition•of•`~`•comes•from•old-school•computer•science/discrete•Mathematics:•`~`•performs•two's-complement.•Great,•thanks,•that's•totally•clearer!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (182 > 79)

types & grammar/ch4.md
| 576| Let's•try•again:•`~x`•is•roughly•the•same•as•`-(x+1)`.•That's•weird,•but•slightly•easier•to•reason•about.•So:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (109 > 79)

types & grammar/ch4.md
| 582| You're•probably•still•wondering•what•the•heck•all•this•`~`•stuff•is•about,•or•why•it•really•matters•for•a•coercion•discussion.•Let's•quickly•get•to•the•point.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (158 > 79)

types & grammar/ch4.md
| 584| Consider•`-(x+1)`.•What's•the•only•value•that•you•can•perform•that•operation•on•that•will•produce•a•`0`•(or•`-0`•technically!)•result?•`-1`.•In•other•words,•`~`•used•with•a•range•of•`number`•values•will•produce•a•falsy•(easily•coercible•to•`false`)•`0`•value•for•the•`-1`•input•value,•and•any•other•truthy•`number`•otherwise.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (325 > 79)

types & grammar/ch4.md
| 588| `-1`•is•commonly•called•a•"sentinel•value,"•which•basically•means•a•value•that's•given•an•arbitrary•semantic•meaning•within•the•greater•set•of•values•of•its•same•type•(`number`s).•The•C-language•uses•`-1`•sentinel•values•for•many•functions•that•return•`>=•0`•values•for•"success"•and•`-1`•for•"failure."
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (303 > 79)

types & grammar/ch4.md
| 590| JavaScript•adopted•this•precedent•when•defining•the•`string`•operation•`indexOf(..)`,•which•searches•for•a•substring•and•if•found•returns•its•zero-based•index•position,•or•`-1`•if•not•found.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (190 > 79)

types & grammar/ch4.md
| 592| It's•pretty•common•to•try•to•use•`indexOf(..)`•not•just•as•an•operation•to•get•the•position,•but•as•a•`boolean`•check•of•presence/absence•of•a•substring•in•another•`string`.•Here's•how•developers•usually•perform•such•checks:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (224 > 79)

types & grammar/ch4.md
| 612| I•find•it•kind•of•gross•to•look•at•`>=•0`•or•`==•-1`.•It's•basically•a•"leaky•abstraction,"•in•that•it's•leaking•underlying•implementation•behavior•--•the•usage•of•sentinel•`-1`•for•"failure"•--•into•my•code.•I•would•prefer•to•hide•such•a•detail.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (246 > 79)

types & grammar/ch4.md
| 614| And•now,•finally,•we•see•why•`~`•could•help•us!•Using•`~`•with•`indexOf()`•"coerces"•(actually•just•transforms)•the•value•**to•be•appropriately•`boolean`-coercible**:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (166 > 79)

types & grammar/ch4.md
| 633| `~`•takes•the•return•value•of•`indexOf(..)`•and•transforms•it:•for•the•"failure"•`-1`•we•get•the•falsy•`0`,•and•every•other•value•is•truthy.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (140 > 79)

types & grammar/ch4.md
| 635| **Note:**•The•`-(x+1)`•pseudo-algorithm•for•`~`•would•imply•that•`~-1`•is•`-0`,•but•actually•it•produces•`0`•because•the•underlying•operation•is•actually•bitwise,•not•mathematic.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (178 > 79)

types & grammar/ch4.md
| 637| Technically,•`if•(~a.indexOf(..))`•is•still•relying•on•*implicit*•coercion•of•its•resultant•`0`•to•`false`•or•nonzero•to•`true`.•But•overall,•`~`•still•feels•to•me•more•like•an•*explicit*•coercion•mechanism,•as•long•as•you•know•what•it's•intended•to•do•in•this•idiom.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (267 > 79)

types & grammar/ch4.md
| 643| There's•one•more•place•`~`•may•show•up•in•code•you•run•across:•some•developers•use•the•double•tilde•`~~`•to•truncate•the•decimal•part•of•a•`number`•(i.e.,•"coerce"•it•to•a•whole•number•"integer").•It's•commonly•(though•mistakingly)•said•this•is•the•same•result•as•calling•`Math.floor(..)`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (289 > 79)

types & grammar/ch4.md
| 645| How•`~~`•works•is•that•the•first•`~`•applies•the•`ToInt32`•"coercion"•and•does•the•bitwise•flip,•and•then•the•second•`~`•does•another•bitwise•flip,•flipping•all•the•bits•back•to•the•original•state.•The•end•result•is•just•the•`ToInt32`•"coercion"•(aka•truncation).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (263 > 79)

types & grammar/ch4.md
| 647| **Note:**•The•bitwise•double-flip•of•`~~`•is•very•similar•to•the•parity•double-negate•`!!`•behavior,•explained•in•the•"Explicitly:•*•-->•Boolean"•section•later.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (160 > 79)

types & grammar/ch4.md
| 649| However,•`~~`•needs•some•caution/clarification.•First,•it•only•works•reliably•on•32-bit•values.•But•more•importantly,•it•doesn't•work•the•same•on•negative•numbers•as•`Math.floor(..)`•does!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (188 > 79)

types & grammar/ch4.md
| 656| Setting•the•`Math.floor(..)`•difference•aside,•`~~x`•can•truncate•to•a•(32-bit)•integer.•But•so•does•`x•|•0`,•and•seemingly•with•(slightly)•*less•effort*.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (154 > 79)

types & grammar/ch4.md
| 658| So,•why•might•you•choose•`~~x`•over•`x•|•0`,•then?•Operator•precedence•(see•Chapter•5):
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (87 > 79)

types & grammar/ch4.md
| 667| Just•as•with•all•other•advice•here,•use•`~`•and•`~~`•as•explicit•mechanisms•for•"coercion"•and•value•transformation•only•if•everyone•who•reads/writes•such•code•is•properly•aware•of•how•these•operators•work!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (206 > 79)

types & grammar/ch4.md
| 671| A•similar•outcome•to•coercing•a•`string`•to•a•`number`•can•be•achieved•by•parsing•a•`number`•out•of•a•`string`'s•character•contents.•There•are,•however,•distinct•differences•between•this•parsing•and•the•type•conversion•we•examined•above.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (237 > 79)

types & grammar/ch4.md
| 686| Parsing•a•numeric•value•out•of•a•string•is•*tolerant*•of•non-numeric•characters•--•it•just•stops•parsing•left-to-right•when•encountered•--•whereas•coercion•is•*not•tolerant*•and•fails•resulting•in•the•`NaN`•value.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (213 > 79)

types & grammar/ch4.md
| 688| Parsing•should•not•be•seen•as•a•substitute•for•coercion.•These•two•tasks,•while•similar,•have•different•purposes.•Parse•a•`string`•as•a•`number`•when•you•don't•know/care•what•other•non-numeric•characters•there•may•be•on•the•right-hand•side.•Coerce•a•`string`•(to•a•`number`)•when•the•only•acceptable•values•are•numeric•and•something•like•`"42px"`•should•be•rejected•as•a•`number`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (380 > 79)

types & grammar/ch4.md
| 690| **Tip:**•`parseInt(..)`•has•a•twin,•`parseFloat(..)`,•which•(as•it•sounds)•pulls•out•a•floating-point•number•from•a•string.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (123 > 79)

types & grammar/ch4.md
| 692| Don't•forget•that•`parseInt(..)`•operates•on•`string`•values.•It•makes•absolutely•no•sense•to•pass•a•`number`•value•to•`parseInt(..)`.•Nor•would•it•make•sense•to•pass•any•other•type•of•value,•like•`true`,•`function(){..}`•or•`[1,2,3]`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (235 > 79)

types & grammar/ch4.md
| 694| If•you•pass•a•non-`string`,•the•value•you•pass•will•automatically•be•coerced•to•a•`string`•first•(see•"`ToString`"•earlier),•which•would•clearly•be•a•kind•of•hidden•*implicit*•coercion.•It's•a•really•bad•idea•to•rely•upon•such•a•behavior•in•your•program,•so•never•use•`parseInt(..)`•with•a•non-`string`•value.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (309 > 79)

types & grammar/ch4.md
| 696| Prior•to•ES5,•another•gotcha•existed•with•`parseInt(..)`,•which•was•the•source•of•many•JS•programs'•bugs.•If•you•didn't•pass•a•second•argument•to•indicate•which•numeric•base•(aka•radix)•to•use•for•interpreting•the•numeric•`string`•contents,•`parseInt(..)`•would•look•at•the•beginning•character(s)•to•make•a•guess.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (313 > 79)

types & grammar/ch4.md
| 698| If•the•first•two•characters•were•`"0x"`•or•`"0X"`,•the•guess•(by•convention)•was•that•you•wanted•to•interpret•the•`string`•as•a•hexadecimal•(base-16)•`number`.•Otherwise,•if•the•first•character•was•`"0"`,•the•guess•(again,•by•convention)•was•that•you•wanted•to•interpret•the•`string`•as•an•octal•(base-8)•`number`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (314 > 79)

types & grammar/ch4.md
| 700| Hexadecimal•`string`s•(with•the•leading•`0x`•or•`0X`)•aren't•terribly•easy•to•get•mixed•up.•But•the•octal•number•guessing•proved•devilishly•common.•For•example:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (160 > 79)

types & grammar/ch4.md
| 709| Seems•harmless,•right?•Try•selecting•`08`•for•the•hour•and•`09`•for•the•minute.•You'll•get•`0:0`.•Why?•because•neither•`8`•nor•`9`•are•valid•characters•in•octal•base-8.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (168 > 79)

types & grammar/ch4.md
| 711| The•pre-ES5•fix•was•simple,•but•so•easy•to•forget:•**always•pass•`10`•as•the•second•argument**.•This•was•totally•safe:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (118 > 79)

types & grammar/ch4.md
| 718| As•of•ES5,•`parseInt(..)`•no•longer•guesses•octal.•Unless•you•say•otherwise,•it•assumes•base-10•(or•base-16•for•`"0x"`•prefixes).•That's•much•nicer.•Just•be•careful•if•your•code•has•to•run•in•pre-ES5•environments,•in•which•case•you•still•need•to•pass•`10`•for•the•radix.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (270 > 79)

types & grammar/ch4.md
| 722| One•somewhat•infamous•example•of•`parseInt(..)`'s•behavior•is•highlighted•in•a•sarcastic•joke•post•a•few•years•ago,•poking•fun•at•this•JS•behavior:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (147 > 79)

types & grammar/ch4.md
| 728| The•assumptive•(but•totally•invalid)•assertion•was,•"If•I•pass•in•Infinity,•and•parse•an•integer•out•of•that,•I•should•get•Infinity•back,•not•18."•Surely,•JS•must•be•crazy•for•this•outcome,•right?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (196 > 79)

types & grammar/ch4.md
| 730| Though•this•example•is•obviously•contrived•and•unreal,•let's•indulge•the•madness•for•a•moment•and•examine•whether•JS•really•is•that•crazy.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (138 > 79)

types & grammar/ch4.md
| 732| First•off,•the•most•obvious•sin•committed•here•is•to•pass•a•non-`string`•to•`parseInt(..)`.•That's•a•no-no.•Do•it•and•you're•asking•for•trouble.•But•even•if•you•do,•JS•politely•coerces•what•you•pass•in•into•a•`string`•that•it•can•try•to•parse.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (243 > 79)

types & grammar/ch4.md
| 734| Some•would•argue•that•this•is•unreasonable•behavior,•and•that•`parseInt(..)`•should•refuse•to•operate•on•a•non-`string`•value.•Should•it•perhaps•throw•an•error?•That•would•be•very•Java-like,•frankly.•I•shudder•at•thinking•JS•should•start•throwing•errors•all•over•the•place•so•that•`try..catch`•is•needed•around•almost•every•line.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (329 > 79)

types & grammar/ch4.md
| 742| Should•that•fail,•too?•It's•a•non-`string`•value.•If•you•want•that•`String`•object•wrapper•to•be•unboxed•to•`"42"`,•then•is•it•really•so•unusual•for•`42`•to•first•become•`"42"`•so•that•`42`•can•be•parsed•back•out?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (213 > 79)

types & grammar/ch4.md
| 744| I•would•argue•that•this•half-*explicit*,•half-*implicit*•coercion•that•can•occur•can•often•be•a•very•helpful•thing.•For•example:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (128 > 79)

types & grammar/ch4.md
| 755| The•fact•that•`parseInt(..)`•forcibly•coerces•its•value•to•a•`string`•to•perform•the•parse•on•is•quite•sensible.•If•you•pass•in•garbage,•and•you•get•garbage•back•out,•don't•blame•the•trash•can•--•it•just•did•its•job•faithfully.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (227 > 79)

types & grammar/ch4.md
| 757| So,•if•you•pass•in•a•value•like•`Infinity`•(the•result•of•`1•/•0`•obviously),•what•sort•of•`string`•representation•would•make•the•most•sense•for•its•coercion?•Only•two•reasonable•choices•come•to•mind:•`"Infinity"`•and•`"∞"`.•JS•chose•`"Infinity"`.•I'm•glad•it•did.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (264 > 79)

types & grammar/ch4.md
| 759| I•think•it's•a•good•thing•that•**all•values**•in•JS•have•some•sort•of•default•`string`•representation,•so•that•they•aren't•mysterious•black•boxes•that•we•can't•debug•and•reason•about.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (183 > 79)

types & grammar/ch4.md
| 761| Now,•what•about•base-19?•Obviously,•completely•bogus•and•contrived.•No•real•JS•programs•use•base-19.•It's•absurd.•But•again,•let's•indulge•the•ridiculousness.•In•base-19,•the•valid•numeric•characters•are•`0`•-•`9`•and•`a`•-•`i`•(case•insensitive).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (247 > 79)

types & grammar/ch4.md
| 763| So,•back•to•our•`parseInt(•1/0,•19•)`•example.•It's•essentially•`parseInt(•"Infinity",•19•)`.•How•does•it•parse?•The•first•character•is•`"I"`,•which•is•value•`18`•in•the•silly•base-19.•The•second•character•`"n"`•is•not•in•the•valid•set•of•numeric•characters,•and•as•such•the•parsing•simply•politely•stops,•just•like•when•it•ran•across•`"p"`•in•`"42px"`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (353 > 79)

types & grammar/ch4.md
| 765| The•result?•`18`.•Exactly•like•it•sensibly•should•be.•The•behaviors•involved•to•get•us•there,•and•not•to•an•error•or•to•`Infinity`•itself,•are•**very•important**•to•JS,•and•should•not•be•so•easily•discarded.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (207 > 79)

types & grammar/ch4.md
| 767| Other•examples•of•this•behavior•with•`parseInt(..)`•that•may•be•surprising•but•are•quite•sensible•include:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (106 > 79)

types & grammar/ch4.md
| 779| `parseInt(..)`•is•actually•pretty•predictable•and•consistent•in•its•behavior.•If•you•use•it•correctly,•you'll•get•sensible•results.•If•you•use•it•incorrectly,•the•crazy•results•you•get•are•not•the•fault•of•JavaScript.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (217 > 79)

types & grammar/ch4.md
| 785| Just•like•with•`String(..)`•and•`Number(..)`•above,•`Boolean(..)`•(without•the•`new`,•of•course!)•is•an•explicit•way•of•forcing•the•`ToBoolean`•coercion:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (153 > 79)

types & grammar/ch4.md
| 809| Just•like•the•unary•`+`•operator•coerces•a•value•to•a•`number`•(see•above),•the•unary•`!`•negate•operator•explicitly•coerces•a•value•to•a•`boolean`.•The•*problem*•is•that•it•also•flips•the•value•from•truthy•to•falsy•or•vice•versa.•So,•the•most•common•way•JS•developers•explicitly•coerce•to•`boolean`•is•to•use•the•`!!`•double-negate•operator,•because•the•second•`!`•will•flip•the•parity•back•to•the•original:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (408 > 79)

types & grammar/ch4.md
| 831| Any•of•these•`ToBoolean`•coercions•would•happen•*implicitly*•without•the•`Boolean(..)`•or•`!!`,•if•used•in•a•`boolean`•context•such•as•an•`if•(..)•..`•statement.•But•the•goal•here•is•to•explicitly•force•the•value•to•a•`boolean`•to•make•it•clearer•that•the•`ToBoolean`•coercion•is•intended.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (289 > 79)

types & grammar/ch4.md
| 833| Another•example•use-case•for•explicit•`ToBoolean`•coercion•is•if•you•want•to•force•a•`true`/`false`•value•coercion•in•the•JSON•serialization•of•a•data•structure:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (161 > 79)

types & grammar/ch4.md
| 865| The•`?•:`•ternary•operator•will•test•`a`•for•truthiness,•and•based•on•that•test•will•either•assign•`true`•or•`false`•to•`b`,•accordingly.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (137 > 79)

types & grammar/ch4.md
| 867| On•its•surface,•this•idiom•looks•like•a•form•of•*explicit*•`ToBoolean`-type•coercion,•since•it's•obvious•that•only•either•`true`•or•`false`•come•out•of•the•operation.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (166 > 79)

types & grammar/ch4.md
| 869| However,•there's•a•hidden•*implicit*•coercion,•in•that•the•`a`•expression•has•to•first•be•coerced•to•`boolean`•to•perform•the•truthiness•test.•I'd•call•this•idiom•"explicitly•implicit."•Furthermore,•I'd•suggest•**you•should•avoid•this•idiom•completely**•in•JavaScript.•It•offers•no•real•benefit,•and•worse,•masquerades•as•something•it's•not.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (341 > 79)

types & grammar/ch4.md
| 875| *Implicit*•coercion•refers•to•type•conversions•that•are•hidden,•with•non-obvious•side-effects•that•implicitly•occur•from•other•actions.•In•other•words,•*implicit•coercions*•are•any•type•conversions•that•aren't•obvious•(to•you).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (227 > 79)

types & grammar/ch4.md
| 877| While•it's•clear•what•the•goal•of•*explicit*•coercion•is•(making•code•explicit•and•more•understandable),•it•might•be•*too*•obvious•that•*implicit*•coercion•has•the•opposite•goal:•making•code•harder•to•understand.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (212 > 79)

types & grammar/ch4.md
| 879| Taken•at•face•value,•I•believe•that's•where•much•of•the•ire•towards•coercion•comes•from.•The•majority•of•complaints•about•"JavaScript•coercion"•are•actually•aimed•(whether•they•realize•it•or•not)•at•*implicit*•coercion.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (219 > 79)

types & grammar/ch4.md
| 881| **Note:**•Douglas•Crockford,•author•of•*"JavaScript:•The•Good•Parts"*,•has•claimed•in•many•conference•talks•and•writings•that•JavaScript•coercion•should•be•avoided.•But•what•he•seems•to•mean•is•that•*implicit*•coercion•is•bad•(in•his•opinion).•However,•if•you•read•his•own•code,•you'll•find•plenty•of•examples•of•coercion,•both•*implicit*•and•*explicit*!•In•truth,•his•angst•seems•to•primarily•be•directed•at•the•`==`•operation,•but•as•you'll•see•in•this•chapter,•that's•only•part•of•the•coercion•mechanism.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (507 > 79)

types & grammar/ch4.md
| 883| So,•**is•implicit•coercion**•evil?•Is•it•dangerous?•Is•it•a•flaw•in•JavaScript's•design?•Should•we•avoid•it•at•all•costs?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (121 > 79)

types & grammar/ch4.md
| 889| Let's•take•a•different•perspective•on•what•*implicit*•coercion•is,•and•can•be,•than•just•that•it's•"the•opposite•of•the•good•explicit•kind•of•coercion."•That's•far•too•narrow•and•misses•an•important•nuance.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (206 > 79)

types & grammar/ch4.md
| 891| Let's•define•the•goal•of•*implicit*•coercion•as:•to•reduce•verbosity,•boilerplate,•and/or•unnecessary•implementation•detail•that•clutters•up•our•code•with•noise•that•distracts•from•the•more•important•intent.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (207 > 79)

types & grammar/ch4.md
| 895| Before•we•even•get•to•JavaScript,•let•me•suggest•something•pseudo-code'ish•from•some•theoretical•strongly•typed•language•to•illustrate:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (135 > 79)

types & grammar/ch4.md
| 901| In•this•example,•I•have•some•arbitrary•type•of•value•in•`y`•that•I•want•to•convert•to•the•`SomeType`•type.•The•problem•is,•this•language•can't•go•directly•from•whatever•`y`•currently•is•to•`SomeType`.•It•needs•an•intermediate•step,•where•it•first•converts•to•`AnotherType`,•and•then•from•`AnotherType`•to•`SomeType`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (316 > 79)

types & grammar/ch4.md
| 903| Now,•what•if•that•language•(or•definition•you•could•create•yourself•with•the•language)•*did*•just•let•you•say:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (110 > 79)

types & grammar/ch4.md
| 909| Wouldn't•you•generally•agree•that•we•simplified•the•type•conversion•here•to•reduce•the•unnecessary•"noise"•of•the•intermediate•conversion•step?•I•mean,•is•it•*really*•all•that•important,•right•here•at•this•point•in•the•code,•to•see•and•deal•with•the•fact•that•`y`•goes•to•`AnotherType`•first•before•then•going•to•`SomeType`?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (324 > 79)

types & grammar/ch4.md
| 911| Some•would•argue,•at•least•in•some•circumstances,•yes.•But•I•think•an•equal•argument•can•be•made•of•many•other•circumstances•that•here,•the•simplification•**actually•aids•in•the•readability•of•the•code**•by•abstracting•or•hiding•away•such•details,•either•in•the•language•itself•or•in•our•own•abstractions.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (305 > 79)

types & grammar/ch4.md
| 913| Undoubtedly,•behind•the•scenes,•somewhere,•the•intermediate•conversion•step•is•still•happening.•But•if•that•detail•is•hidden•from•view•here,•we•can•just•reason•about•getting•`y`•to•type•`SomeType`•as•a•generic•operation•and•hide•the•messy•details.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (247 > 79)

types & grammar/ch4.md
| 915| While•not•a•perfect•analogy,•what•I'm•going•to•argue•throughout•the•rest•of•this•chapter•is•that•JS•*implicit*•coercion•can•be•thought•of•as•providing•a•similar•aid•to•your•code.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (178 > 79)

types & grammar/ch4.md
| 917| But,•**and•this•is•very•important**,•that•is•not•an•unbounded,•absolute•statement.•There•are•definitely•plenty•of•*evils*•lurking•around•*implicit*•coercion,•that•will•harm•your•code•much•more•than•any•potential•readability•improvements.•Clearly,•we•have•to•learn•how•to•avoid•such•constructs•so•we•don't•poison•our•code•with•all•manner•of•bugs.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (345 > 79)

types & grammar/ch4.md
| 919| Many•developers•believe•that•if•a•mechanism•can•do•some•useful•thing•**A**•but•can•also•be•abused•or•misused•to•do•some•awful•thing•**Z**,•then•we•should•throw•out•that•mechanism•altogether,•just•to•be•safe.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (207 > 79)

types & grammar/ch4.md
| 921| My•encouragement•to•you•is:•don't•settle•for•that.•Don't•"throw•the•baby•out•with•the•bathwater."•Don't•assume•*implicit*•coercion•is•all•bad•because•all•you•think•you've•ever•seen•is•its•"bad•parts."•I•think•there•are•"good•parts"•here,•and•I•want•to•help•and•inspire•more•of•you•to•find•and•embrace•them!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (306 > 79)

types & grammar/ch4.md
| 925| Earlier•in•this•chapter,•we•explored•*explicitly*•coercing•between•`string`•and•`number`•values.•Now,•let's•explore•the•same•task•but•with•*implicit*•coercion•approaches.•But•before•we•do,•we•have•to•examine•some•nuances•of•operations•that•will•*implicitly*•force•coercion.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (273 > 79)

types & grammar/ch4.md
| 927| The•`+`•operator•is•overloaded•to•serve•the•purposes•of•both•`number`•addition•and•`string`•concatenation.•So•how•does•JS•know•which•type•of•operation•you•want•to•use?•Consider:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (177 > 79)

types & grammar/ch4.md
| 940| What's•different•that•causes•`"420"`•vs•`42`?•It's•a•common•misconception•that•the•difference•is•whether•one•or•both•of•the•operands•is•a•`string`,•as•that•means•`+`•will•assume•`string`•concatenation.•While•that's•partially•true,•it's•more•complicated•than•that.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (263 > 79)

types & grammar/ch4.md
| 951| Neither•of•these•operands•is•a•`string`,•but•clearly•they•were•both•coerced•to•`string`s•and•then•the•`string`•concatenation•kicked•in.•So•what's•really•going•on?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (162 > 79)

types & grammar/ch4.md
| 953| (**Warning:**•deeply•nitty•gritty•spec-speak•coming,•so•skip•the•next•two•paragraphs•if•that•intimidates•you!)
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (110 > 79)

types & grammar/ch4.md
| 957| According•to•ES5•spec•section•11.6.1,•the•`+`•algorithm•(when•an•`object`•value•is•an•operand)•will•concatenate•if•either•operand•is•either•already•a•`string`,•or•if•the•following•steps•produce•a•`string`•representation.•So,•when•`+`•receives•an•`object`•(including•`array`)•for•either•operand,•it•first•calls•the•`ToPrimitive`•abstract•operation•(section•9.1)•on•the•value,•which•then•calls•the•`[[DefaultValue]]`•algorithm•(section•8.12.8)•with•a•context•hint•of•`number`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (474 > 79)

types & grammar/ch4.md
| 959| If•you're•paying•close•attention,•you'll•notice•that•this•operation•is•now•identical•to•how•the•`ToNumber`•abstract•operation•handles•`object`s•(see•the•"`ToNumber`""•section•earlier).•The•`valueOf()`•operation•on•the•`array`•will•fail•to•produce•a•simple•primitive,•so•it•then•falls•to•a•`toString()`•representation.•The•two•`array`s•thus•become•`"1,2"`•and•`"3,4"`,•respectively.•Now,•`+`•concatenates•the•two•`string`s•as•you'd•normally•expect:•`"1,23,4"`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (459 > 79)

types & grammar/ch4.md
| 963| Let's•set•aside•those•messy•details•and•go•back•to•an•earlier,•simplified•explanation:•if•either•operand•to•`+`•is•a•`string`•(or•becomes•one•with•the•above•steps!),•the•operation•will•be•`string`•concatenation.•Otherwise,•it's•always•numeric•addition.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (252 > 79)

types & grammar/ch4.md
| 965| **Note:**•A•commonly•cited•coercion•gotcha•is•`[]•+•{}`•vs.•`{}•+•[]`,•as•those•two•expressions•result,•respectively,•in•`"[object•Object]"`•and•`0`.•There's•more•to•it,•though,•and•we•cover•those•details•in•"Blocks"•in•Chapter•5.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (230 > 79)

types & grammar/ch4.md
| 969| You•can•coerce•a•`number`•to•a•`string`•simply•by•"adding"•the•`number`•and•the•`""`•empty•`string`:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (100 > 79)

types & grammar/ch4.md
| 978| **Tip:**•Numeric•addition•with•the•`+`•operator•is•commutative,•which•means•`2•+•3`•is•the•same•as•`3•+•2`.•String•concatenation•with•`+`•is•obviously•not•generally•commutative,•**but**•with•the•specific•case•of•`""`,•it's•effectively•commutative,•as•`a•+•""`•and•`""•+•a`•will•produce•the•same•result.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (302 > 79)

types & grammar/ch4.md
| 980| It's•extremely•common/idiomatic•to•(*implicitly*)•coerce•`number`•to•`string`•with•a•`+•""`•operation.•In•fact,•interestingly,•even•some•of•the•most•vocal•critics•of•*implicit*•coercion•still•use•that•approach•in•their•own•code,•instead•of•one•of•its•*explicit*•alternatives.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (275 > 79)

types & grammar/ch4.md
| 982| **I•think•this•is•a•great•example**•of•a•useful•form•in•*implicit*•coercion,•despite•how•frequently•the•mechanism•gets•criticized!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (130 > 79)

types & grammar/ch4.md
| 984| Comparing•this•*implicit*•coercion•of•`a•+•""`•to•our•earlier•example•of•`String(a)`•*explicit*•coercion,•there's•one•additional•quirk•to•be•aware•of.•Because•of•how•the•`ToPrimitive`•abstract•operation•works,•`a•+•""`•invokes•`valueOf()`•on•the•`a`•value,•whose•return•value•is•then•finally•converted•to•a•`string`•via•the•internal•`ToString`•abstract•operation.•But•`String(a)`•just•invokes•`toString()`•directly.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (415 > 79)

types & grammar/ch4.md
| 986| Both•approaches•ultimately•result•in•a•`string`,•but•if•you're•using•an•`object`•instead•of•a•regular•primitive•`number`•value,•you•may•not•necessarily•get•the•*same*•`string`•value!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (182 > 79)

types & grammar/ch4.md
|1001| Generally,•this•sort•of•gotcha•won't•bite•you•unless•you're•really•trying•to•create•confusing•data•structures•and•operations,•but•you•should•be•careful•if•you're•defining•both•your•own•`valueOf()`•and•`toString()`•methods•for•some•`object`,•as•how•you•coerce•the•value•could•affect•the•outcome.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (294 > 79)

types & grammar/ch4.md
|1003| What•about•the•other•direction?•How•can•we•*implicitly•coerce*•from•`string`•to•`number`?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (89 > 79)

types & grammar/ch4.md
|1012| The•`-`•operator•is•defined•only•for•numeric•subtraction,•so•`a•-•0`•forces•`a`'s•value•to•be•coerced•to•a•`number`.•While•far•less•common,•`a•*•1`•or•`a•/•1`•would•accomplish•the•same•result,•as•those•operators•are•also•only•defined•for•numeric•operations.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (257 > 79)

types & grammar/ch4.md
|1014| What•about•`object`•values•with•the•`-`•operator?•Similar•story•as•for•`+`•above:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (81 > 79)

types & grammar/ch4.md
|1023| Both•`array`•values•have•to•become•`number`s,•but•they•end•up•first•being•coerced•to•`strings`•(using•the•expected•`toString()`•serialization),•and•then•are•coerced•to•`number`s,•for•the•`-`•subtraction•to•perform•on.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (217 > 79)

types & grammar/ch4.md
|1025| So,•is•*implicit*•coercion•of•`string`•and•`number`•values•the•ugly•evil•you've•always•heard•horror•stories•about?•I•don't•personally•think•so.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (143 > 79)

types & grammar/ch4.md
|1027| Compare•`b•=•String(a)`•(*explicit*)•to•`b•=•a•+•""`•(*implicit*).•I•think•cases•can•be•made•for•both•approaches•being•useful•in•your•code.•Certainly•`b•=•a•+•""`•is•quite•a•bit•more•common•in•JS•programs,•proving•its•own•utility•regardless•of•*feelings*•about•the•merits•or•hazards•of•*implicit*•coercion•in•general.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (317 > 79)

types & grammar/ch4.md
|1031| I•think•a•case•where•*implicit*•coercion•can•really•shine•is•in•simplifying•certain•types•of•complicated•`boolean`•logic•into•simple•numeric•addition.•Of•course,•this•is•not•a•general-purpose•technique,•but•a•specific•solution•for•specific•cases.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (246 > 79)

types & grammar/ch4.md
|1050| This•`onlyOne(..)`•utility•should•only•return•`true`•if•exactly•one•of•the•arguments•is•`true`•/•truthy.•It's•using•*implicit*•coercion•on•the•truthy•checks•and•*explicit*•coercion•on•the•others,•including•the•final•return•value.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (229 > 79)

types & grammar/ch4.md
|1052| But•what•if•we•needed•that•utility•to•be•able•to•handle•four,•five,•or•twenty•flags•in•the•same•way?•It's•pretty•difficult•to•imagine•implementing•code•that•would•handle•all•those•permutations•of•comparisons.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (208 > 79)

types & grammar/ch4.md
|1054| But•here's•where•coercing•the•`boolean`•values•to•`number`s•(`0`•or•`1`,•obviously)•can•greatly•help:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (101 > 79)

types & grammar/ch4.md
|1079| **Note:**•Of•course,•instead•of•the•`for`•loop•in•`onlyOne(..)`,•you•could•more•tersely•use•the•ES5•`reduce(..)`•utility,•but•I•didn't•want•to•obscure•the•concepts.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (164 > 79)

types & grammar/ch4.md
|1081| What•we're•doing•here•is•relying•on•the•`1`•for•`true`/truthy•coercions,•and•numerically•adding•them•all•up.•`sum•+=•arguments[i]`•uses•*implicit*•coercion•to•make•that•happen.•If•one•and•only•one•value•in•the•`arguments`•list•is•`true`,•then•the•numeric•sum•will•be•`1`,•otherwise•the•sum•will•not•be•`1`•and•thus•the•desired•condition•is•not•met.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (348 > 79)

types & grammar/ch4.md
|1095| We•first•use•`!!arguments[i]`•to•force•the•coercion•of•the•value•to•`true`•or•`false`.•That's•so•you•could•pass•non-`boolean`•values•in,•like•`onlyOne(•"42",•0•)`,•and•it•would•still•work•as•expected•(otherwise•you'd•end•up•with•`string`•concatenation•and•the•logic•would•be•incorrect).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (286 > 79)

types & grammar/ch4.md
|1097| Once•we're•sure•it's•a•`boolean`,•we•do•another•*explicit*•coercion•with•`Number(..)`•to•make•sure•the•value•is•`0`•or•`1`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (123 > 79)

types & grammar/ch4.md
|1099| Is•the•*explicit*•coercion•form•of•this•utility•"better"?•It•does•avoid•the•`NaN`•trap•as•explained•in•the•code•comments.•But,•ultimately,•it•depends•on•your•needs.•I•personally•think•the•former•version,•relying•on•*implicit*•coercion•is•more•elegant•(if•you•won't•be•passing•`undefined`•or•`NaN`),•and•the•*explicit*•version•is•needlessly•more•verbose.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (353 > 79)

types & grammar/ch4.md
|1103| **Note:**•Regardless•of•*implicit*•or•*explicit*•approaches,•you•could•easily•make•`onlyTwo(..)`•or•`onlyFive(..)`•variations•by•simply•changing•the•final•comparison•from•`1`,•to•`2`•or•`5`,•respectively.•That's•drastically•easier•than•adding•a•bunch•of•`&&`•and•`||`•expressions.•So,•generally,•coercion•is•very•helpful•in•this•case.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (334 > 79)

types & grammar/ch4.md
|1107| Now,•let's•turn•our•attention•to•*implicit*•coercion•to•`boolean`•values,•as•it's•by•far•the•most•common•and•also•by•far•the•most•potentially•troublesome.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (154 > 79)

types & grammar/ch4.md
|1109| Remember,•*implicit*•coercion•is•what•kicks•in•when•you•use•a•value•in•such•a•way•that•it•forces•the•value•to•be•converted.•For•numeric•and•`string`•operations,•it's•fairly•easy•to•see•how•the•coercions•can•occur.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (213 > 79)

types & grammar/ch4.md
|1111| But,•what•sort•of•expression•operations•require/force•(*implicitly*)•a•`boolean`•coercion?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (90 > 79)

types & grammar/ch4.md
|1117| 5.•The•left-hand•operand•(which•serves•as•a•test•expression•--•see•below!)•to•the•`||`•("logical•or")•and•`&&`•("logical•and")•operators.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (137 > 79)

types & grammar/ch4.md
|1119| Any•value•used•in•these•contexts•that•is•not•already•a•`boolean`•will•be•*implicitly*•coerced•to•a•`boolean`•using•the•rules•of•the•`ToBoolean`•abstract•operation•covered•earlier•in•this•chapter.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (195 > 79)

types & grammar/ch4.md
|1145| In•all•these•contexts,•the•non-`boolean`•values•are•*implicitly•coerced*•to•their•`boolean`•equivalents•to•make•the•test•decisions.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (131 > 79)

types & grammar/ch4.md
|1149| It's•quite•likely•that•you•have•seen•the•`||`•("logical•or")•and•`&&`•("logical•and")•operators•in•most•or•all•other•languages•you've•used.•So•it'd•be•natural•to•assume•that•they•work•basically•the•same•in•JavaScript•as•in•other•similar•languages.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (247 > 79)

types & grammar/ch4.md
|1153| In•fact,•I•would•argue•these•operators•shouldn't•even•be•called•"logical•___•operators",•as•that•name•is•incomplete•in•describing•what•they•do.•If•I•were•to•give•them•a•more•accurate•(if•more•clumsy)•name,•I'd•call•them•"selector•operators,"•or•more•completely,•"operand•selector•operators."
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (291 > 79)

types & grammar/ch4.md
|1155| Why?•Because•they•don't•actually•result•in•a•*logic*•value•(aka•`boolean`)•in•JavaScript,•as•they•do•in•some•other•languages.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (125 > 79)

types & grammar/ch4.md
|1157| So•what•*do*•they•result•in?•They•result•in•the•value•of•one•(and•only•one)•of•their•two•operands.•In•other•words,•**they•select•one•of•the•two•operand's•values**.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (163 > 79)

types & grammar/ch4.md
|1161| >•The•value•produced•by•a•&&•or•||•operator•is•not•necessarily•of•type•Boolean.•The•value•produced•will•always•be•the•value•of•one•of•the•two•operand•expressions.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (162 > 79)

types & grammar/ch4.md
|1177| **Wait,•what!?**•Think•about•that.•In•languages•like•C•and•PHP,•those•expressions•result•in•`true`•or•`false`,•but•in•JS•(and•Python•and•Ruby,•for•that•matter!),•the•result•comes•from•the•values•themselves.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (206 > 79)

types & grammar/ch4.md
|1179| Both•`||`•and•`&&`•operators•perform•a•`boolean`•test•on•the•**first•operand**•(`a`•or•`c`).•If•the•operand•is•not•already•`boolean`•(as•it's•not,•here),•a•normal•`ToBoolean`•coercion•occurs,•so•that•the•test•can•be•performed.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (226 > 79)

types & grammar/ch4.md
|1181| For•the•`||`•operator,•if•the•test•is•`true`,•the•`||`•expression•results•in•the•value•of•the•*first•operand*•(`a`•or•`c`).•If•the•test•is•`false`,•the•`||`•expression•results•in•the•value•of•the•*second•operand*•(`b`).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (219 > 79)

types & grammar/ch4.md
|1183| Inversely,•for•the•`&&`•operator,•if•the•test•is•`true`,•the•`&&`•expression•results•in•the•value•of•the•*second•operand*•(`b`).•If•the•test•is•`false`,•the•`&&`•expression•results•in•the•value•of•the•*first•operand*•(`a`•or•`c`).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (230 > 79)

types & grammar/ch4.md
|1185| The•result•of•a•`||`•or•`&&`•expression•is•always•the•underlying•value•of•one•of•the•operands,•**not**•the•(possibly•coerced)•result•of•the•test.•In•`c•&&•b`,•`c`•is•`null`,•and•thus•falsy.•But•the•`&&`•expression•itself•results•in•`null`•(the•value•in•`c`),•not•in•the•coerced•`false`•used•in•the•test.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (303 > 79)

types & grammar/ch4.md
|1201| **Note:**•I•call•`a•||•b`•"roughly•equivalent"•to•`a•?•a•:•b`•because•the•outcome•is•identical,•but•there's•a•nuanced•difference.•In•`a•?•a•:•b`,•if•`a`•was•a•more•complex•expression•(like•for•instance•one•that•might•have•side•effects•like•calling•a•`function`,•etc.),•then•the•`a`•expression•would•possibly•be•evaluated•twice•(if•the•first•evaluation•was•truthy).•By•contrast,•for•`a•||•b`,•the•`a`•expression•is•evaluated•only•once,•and•that•value•is•used•both•for•the•coercive•test•as•well•as•the•result•value•(if•appropriate).•The•same•nuance•applies•to•the•`a•&&•b`•and•`a•?•b•:•a`•expressions.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (599 > 79)

types & grammar/ch4.md
|1203| An•extremely•common•and•helpful•usage•of•this•behavior,•which•there's•a•good•chance•you•may•have•used•before•and•not•fully•understood,•is:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (138 > 79)

types & grammar/ch4.md
|1217| The•`a•=•a•||•"hello"`•idiom•(sometimes•said•to•be•JavaScript's•version•of•the•C#•"null•coalescing•operator")•acts•to•test•`a`•and•if•it•has•no•value•(or•only•an•undesired•falsy•value),•provides•a•backup•default•value•(`"hello"`).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (230 > 79)

types & grammar/ch4.md
|1225| See•the•problem?•`""`•as•the•second•argument•is•a•falsy•value•(see•`ToBoolean`•earlier•in•this•chapter),•so•the•`b•=•b•||•"world"`•test•fails,•and•the•`"world"`•default•value•is•substituted,•even•though•the•intent•probably•was•to•have•the•explicitly•passed•`""`•be•the•value•assigned•to•`b`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (291 > 79)

types & grammar/ch4.md
|1227| This•`||`•idiom•is•extremely•common,•and•quite•helpful,•but•you•have•to•use•it•only•in•cases•where•*all•falsy•values*•should•be•skipped.•Otherwise,•you'll•need•to•be•more•explicit•in•your•test,•and•probably•use•a•`?•:`•ternary•instead.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (235 > 79)

types & grammar/ch4.md
|1229| This•*default•value•assignment*•idiom•is•so•common•(and•useful!)•that•even•those•who•publicly•and•vehemently•decry•JavaScript•coercion•often•use•it•in•their•own•code!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (166 > 79)

types & grammar/ch4.md
|1233| There's•another•idiom•that•is•quite•a•bit•less•commonly•authored•manually,•but•which•is•used•by•JS•minifiers•frequently.•The•`&&`•operator•"selects"•the•second•operand•if•and•only•if•the•first•operand•tests•as•truthy,•and•this•usage•is•sometimes•called•the•"guard•operator"•(also•see•"Short•Circuited"•in•Chapter•5)•--•the•first•expression•test•"guards"•the•second•expression:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (376 > 79)

types & grammar/ch4.md
|1245| `foo()`•gets•called•only•because•`a`•tests•as•truthy.•If•that•test•failed,•this•`a•&&•foo()`•expression•statement•would•just•silently•stop•--•this•is•known•as•"short•circuiting"•--•and•never•call•`foo()`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (204 > 79)

types & grammar/ch4.md
|1247| Again,•it's•not•nearly•as•common•for•people•to•author•such•things.•Usually,•they'd•do•`if•(a)•{•foo();•}`•instead.•But•JS•minifiers•choose•`a•&&•foo()`•because•it's•much•shorter.•So,•now,•if•you•ever•have•to•decipher•such•code,•you'll•know•what•it's•doing•and•why.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (264 > 79)

types & grammar/ch4.md
|1249| OK,•so•`||`•and•`&&`•have•some•neat•tricks•up•their•sleeve,•as•long•as•you're•willing•to•allow•the•*implicit*•coercion•into•the•mix.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (132 > 79)

types & grammar/ch4.md
|1251| **Note:**•Both•the•`a•=•b•||•"something"`•and•`a•&&•b()`•idioms•rely•on•short•circuiting•behavior,•which•we•cover•in•more•detail•in•Chapter•5.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (142 > 79)

types & grammar/ch4.md
|1253| The•fact•that•these•operators•don't•actually•result•in•`true`•and•`false`•is•possibly•messing•with•your•head•a•little•bit•by•now.•You're•probably•wondering•how•all•your•`if`•statements•and•`for`•loops•have•been•working,•if•they've•included•compound•logical•expressions•like•`a•&&•(b•||•c)`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (290 > 79)

types & grammar/ch4.md
|1255| Don't•worry!•The•sky•is•not•falling.•Your•code•is•(probably)•just•fine.•It's•just•that•you•probably•never•realized•before•that•there•was•an•*implicit*•coercion•to•`boolean`•going•on•**after**•the•compound•expression•was•evaluated.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (230 > 79)

types & grammar/ch4.md
|1269| This•code•still•works•the•way•you•always•thought•it•did,•except•for•one•subtle•extra•detail.•The•`a•&&•(b•||•c)`•expression•*actually*•results•in•`"foo"`,•not•`true`.•So,•the•`if`•statement•*then*•forces•the•`"foo"`•value•to•coerce•to•a•`boolean`,•which•of•course•will•be•`true`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (279 > 79)

types & grammar/ch4.md
|1271| See?•No•reason•to•panic.•Your•code•is•probably•still•safe.•But•now•you•know•more•about•how•it•does•what•it•does.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (112 > 79)

types & grammar/ch4.md
|1273| And•now•you•also•realize•that•such•code•is•using•*implicit*•coercion.•If•you're•in•the•"avoid•(implicit)•coercion•camp"•still,•you're•going•to•need•to•go•back•and•make•all•of•those•tests•*explicit*:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (198 > 79)

types & grammar/ch4.md
|1285| Up•to•this•point,•there's•been•almost•no•observable•outcome•difference•between•*explicit*•and•*implicit*•coercion•--•only•the•readability•of•code•has•been•at•stake.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (164 > 79)

types & grammar/ch4.md
|1287| But•ES6•Symbols•introduce•a•gotcha•into•the•coercion•system•that•we•need•to•discuss•briefly.•For•reasons•that•go•well•beyond•the•scope•of•what•we'll•discuss•in•this•book,•*explicit*•coercion•of•a•`symbol`•to•a•`string`•is•allowed,•but•*implicit*•coercion•of•the•same•is•disallowed•and•throws•an•error.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (301 > 79)

types & grammar/ch4.md
|1299| `symbol`•values•cannot•coerce•to•`number`•at•all•(throws•an•error•either•way),•but•strangely•they•can•both•*explicitly*•and•*implicitly*•coerce•to•`boolean`•(always•`true`).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (173 > 79)

types & grammar/ch4.md
|1301| Consistency•is•always•easier•to•learn,•and•exceptions•are•never•fun•to•deal•with,•but•we•just•need•to•be•careful•around•the•new•ES6•`symbol`•values•and•how•we•coerce•them.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (171 > 79)

types & grammar/ch4.md
|1303| The•good•news:•it's•probably•going•to•be•exceedingly•rare•for•you•to•need•to•coerce•a•`symbol`•value.•The•way•they're•typically•used•(see•Chapter•3)•will•probably•not•call•for•coercion•on•a•normal•basis.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (203 > 79)

types & grammar/ch4.md
|1307| Loose•equals•is•the•`==`•operator,•and•strict•equals•is•the•`===`•operator.•Both•operators•are•used•for•comparing•two•values•for•"equality,"•but•the•"loose"•vs.•"strict"•indicates•a•**very•important**•difference•in•behavior•between•the•two,•specifically•in•how•they•decide•"equality."
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (284 > 79)

types & grammar/ch4.md
|1309| A•very•common•misconception•about•these•two•operators•is:•"`==`•checks•values•for•equality•and•`===`•checks•both•values•and•types•for•equality."•While•that•sounds•nice•and•reasonable,•it's•inaccurate.•Countless•well-respected•JavaScript•books•and•blogs•have•said•exactly•that,•but•unfortunately•they're•all•*wrong*.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (315 > 79)

types & grammar/ch4.md
|1311| The•correct•description•is:•"`==`•allows•coercion•in•the•equality•comparison•and•`===`•disallows•coercion."
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (107 > 79)

types & grammar/ch4.md
|1315| Stop•and•think•about•the•difference•between•the•first•(inaccurate)•explanation•and•this•second•(accurate)•one.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (110 > 79)

types & grammar/ch4.md
|1317| In•the•first•explanation,•it•seems•obvious•that•`===`•is•*doing•more•work*•than•`==`,•because•it•has•to•*also*•check•the•type.•In•the•second•explanation,•`==`•is•the•one•*doing•more•work*•because•it•has•to•follow•through•the•steps•of•coercion•if•the•types•are•different.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (270 > 79)

types & grammar/ch4.md
|1319| Don't•fall•into•the•trap,•as•many•have,•of•thinking•this•has•anything•to•do•with•performance,•though,•as•if•`==`•is•going•to•be•slower•than•`===`•in•any•relevant•way.•While•it's•measurable•that•coercion•does•take•*a•little•bit*•of•processing•time,•it's•mere•microseconds•(yes,•that's•millionths•of•a•second!).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (309 > 79)

types & grammar/ch4.md
|1321| If•you're•comparing•two•values•of•the•same•types,•`==`•and•`===`•use•the•identical•algorithm,•and•so•other•than•minor•differences•in•engine•implementation,•they•should•do•the•same•work.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (185 > 79)

types & grammar/ch4.md
|1323| If•you're•comparing•two•values•of•different•types,•the•performance•isn't•the•important•factor.•What•you•should•be•asking•yourself•is:•when•comparing•these•two•values,•do•I•want•coercion•or•not?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (193 > 79)

types & grammar/ch4.md
|1325| If•you•want•coercion,•use•`==`•loose•equality,•but•if•you•don't•want•coercion,•use•`===`•strict•equality.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (105 > 79)

types & grammar/ch4.md
|1327| **Note:**•The•implication•here•then•is•that•both•`==`•and•`===`•check•the•types•of•their•operands.•The•difference•is•in•how•they•respond•if•the•types•don't•match.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (162 > 79)

types & grammar/ch4.md
|1331| The•`==`•operator's•behavior•is•defined•as•"The•Abstract•Equality•Comparison•Algorithm"•in•section•11.9.3•of•the•ES5•spec.•What's•listed•there•is•a•comprehensive•but•simple•algorithm•that•explicitly•states•every•possible•combination•of•types,•and•how•the•coercions•(if•necessary)•should•happen•for•each•combination.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (315 > 79)

types & grammar/ch4.md
|1333| **Warning:**•When•(*implicit*)•coercion•is•maligned•as•being•too•complicated•and•too•flawed•to•be•a•*useful•good•part*,•it•is•these•rules•of•"abstract•equality"•that•are•being•condemned.•Generally,•they•are•said•to•be•too•complex•and•too•unintuitive•for•developers•to•practically•learn•and•use,•and•that•they•are•prone•more•to•causing•bugs•in•JS•programs•than•to•enabling•greater•code•readability.•I•believe•this•is•a•flawed•premise•--•that•you•readers•are•competent•developers•who•write•(and•read•and•understand!)•algorithms•(aka•code)•all•day•long.•So,•what•follows•is•a•plain•exposition•of•the•"abstract•equality"•in•simple•terms.•But•I•implore•you•to•also•read•the•ES5•spec•section•11.9.3.•I•think•you'll•be•surprised•at•just•how•reasonable•it•is.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (751 > 79)

types & grammar/ch4.md
|1335| Basically,•the•first•clause•(11.9.3.1)•says,•if•the•two•values•being•compared•are•of•the•same•type,•they•are•simply•and•naturally•compared•via•Identity•as•you'd•expect.•For•example,•`42`•is•only•equal•to•`42`,•and•`"abc"`•is•only•equal•to•`"abc"`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (247 > 79)

types & grammar/ch4.md
|1342| The•final•provision•in•clause•11.9.3.1•is•for•`==`•loose•equality•comparison•with•`object`s•(including•`function`s•and•`array`s).•Two•such•values•are•only•*equal*•if•they•are•both•references•to•*the•exact•same•value*.•No•coercion•occurs•here.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (242 > 79)

types & grammar/ch4.md
|1344| **Note:**•The•`===`•strict•equality•comparison•is•defined•identically•to•11.9.3.1,•including•the•provision•about•two•`object`•values.•It's•a•very•little•known•fact•that•**`==`•and•`===`•behave•identically**•in•the•case•where•two•`object`s•are•being•compared!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (258 > 79)

types & grammar/ch4.md
|1346| The•rest•of•the•algorithm•in•11.9.3•specifies•that•if•you•use•`==`•loose•equality•to•compare•two•values•of•different•types,•one•or•both•of•the•values•will•need•to•be•*implicitly*•coerced.•This•coercion•happens•so•that•both•values•eventually•end•up•as•the•same•type,•which•can•then•directly•be•compared•for•equality•using•simple•value•Identity.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (343 > 79)

types & grammar/ch4.md
|1348| **Note:**•The•`!=`•loose•not-equality•operation•is•defined•exactly•as•you'd•expect,•in•that•it's•literally•the•`==`•operation•comparison•performed•in•its•entirety,•then•the•negation•of•the•result.•The•same•goes•for•the•`!==`•strict•not-equality•operation.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (255 > 79)

types & grammar/ch4.md
|1352| To•illustrate•`==`•coercion,•let's•first•build•off•the•`string`•and•`number`•examples•earlier•in•this•chapter:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (110 > 79)

types & grammar/ch4.md
|1362| As•we'd•expect,•`a•===•b`•fails,•because•no•coercion•is•allowed,•and•indeed•the•`42`•and•`"42"`•values•are•different.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (117 > 79)

types & grammar/ch4.md
|1364| However,•the•second•comparison•`a•==•b`•uses•loose•equality,•which•means•that•if•the•types•happen•to•be•different,•the•comparison•algorithm•will•perform•*implicit*•coercion•on•one•or•both•values.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (195 > 79)

types & grammar/ch4.md
|1366| But•exactly•what•kind•of•coercion•happens•here?•Does•the•`a`•value•of•`42`•become•a•`string`,•or•does•the•`b`•value•of•`"42"`•become•a•`number`?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (144 > 79)

types & grammar/ch4.md
|1375| **Warning:**•The•spec•uses•`Number`•and•`String`•as•the•formal•names•for•the•types,•while•this•book•prefers•`number`•and•`string`•for•the•primitive•types.•Do•not•let•the•capitalization•of•`Number`•in•the•spec•confuse•you•for•the•`Number()`•native•function.•For•our•purposes,•the•capitalization•of•the•type•name•is•irrelevant•--•they•have•basically•the•same•meaning.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (365 > 79)

types & grammar/ch4.md
|1377| Clearly,•the•spec•says•the•`"42"`•value•is•coerced•to•a•`number`•for•the•comparison.•The•*how*•of•that•coercion•has•already•been•covered•earlier,•specifically•with•the•`ToNumber`•abstract•operation.•In•this•case,•it's•quite•obvious•then•that•the•resulting•two•`42`•values•are•equal.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (282 > 79)

types & grammar/ch4.md
|1381| One•of•the•biggest•gotchas•with•the•*implicit*•coercion•of•`==`•loose•equality•pops•up•when•you•try•to•compare•a•value•directly•to•`true`•or•`false`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (149 > 79)

types & grammar/ch4.md
|1392| Wait,•what•happened•here!?•We•know•that•`"42"`•is•a•truthy•value•(see•earlier•in•this•chapter).•So,•how•come•it's•not•`==`•loose•equal•to•`true`?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (145 > 79)

types & grammar/ch4.md
|1394| The•reason•is•both•simple•and•deceptively•tricky.•It's•so•easy•to•misunderstand,•many•JS•developers•never•pay•close•enough•attention•to•fully•grasp•it.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (151 > 79)

types & grammar/ch4.md
|1412| The•`Type(x)`•is•indeed•`Boolean`,•so•it•performs•`ToNumber(x)`,•which•coerces•`true`•to•`1`.•Now,•`1•==•"42"`•is•evaluated.•The•types•are•still•different,•so•(essentially•recursively)•we•reconsult•the•algorithm,•which•just•as•above•will•coerce•`"42"`•to•`42`,•and•`1•==•42`•is•clearly•`false`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (294 > 79)

types & grammar/ch4.md
|1423| The•`Type(y)`•is•`Boolean`•this•time,•so•`ToNumber(y)`•yields•`0`.•`"42"•==•0`•recursively•becomes•`42•==•0`,•which•is•of•course•`false`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (137 > 79)

types & grammar/ch4.md
|1425| In•other•words,•**the•value•`"42"`•is•neither•`==•true`•nor•`==•false`.**•At•first,•that•statement•might•seem•crazy.•How•can•a•value•be•neither•truthy•nor•falsy?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (161 > 79)

types & grammar/ch4.md
|1427| But•that's•the•problem!•You're•asking•the•wrong•question,•entirely.•It's•not•your•fault,•really.•Your•brain•is•tricking•you.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (124 > 79)

types & grammar/ch4.md
|1429| `"42"`•is•indeed•truthy,•but•`"42"•==•true`•**is•not•performing•a•boolean•test/coercion**•at•all,•no•matter•what•your•brain•says.•`"42"`•*is•not*•being•coerced•to•a•`boolean`•(`true`),•but•instead•`true`•is•being•coerced•to•a•`1`,•and•then•`"42"`•is•being•coerced•to•`42`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (272 > 79)

types & grammar/ch4.md
|1431| Whether•we•like•it•or•not,•`ToBoolean`•is•not•even•involved•here,•so•the•truthiness•or•falsiness•of•`"42"`•is•irrelevant•to•the•`==`•operation!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (143 > 79)

types & grammar/ch4.md
|1433| What•*is*•relevant•is•to•understand•how•the•`==`•comparison•algorithm•behaves•with•all•the•different•type•combinations.•As•it•regards•a•`boolean`•value•on•either•side•of•the•`==`,•a•`boolean`•always•coerces•to•a•`number`•*first*.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (229 > 79)

types & grammar/ch4.md
|1435| If•that•seems•strange•to•you,•you're•not•alone.•I•personally•would•recommend•to•never,•ever,•under•any•circumstances,•use•`==•true`•or•`==•false`.•Ever.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (152 > 79)

types & grammar/ch4.md
|1437| But•remember,•I'm•only•talking•about•`==`•here.•`===•true`•and•`===•false`•wouldn't•allow•the•coercion,•so•they're•safe•from•this•hidden•`ToNumber`•coercion.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (157 > 79)

types & grammar/ch4.md
|1470| If•you•avoid•ever•using•`==•true`•or•`==•false`•(aka•loose•equality•with•`boolean`s)•in•your•code,•you'll•never•have•to•worry•about•this•truthiness/falsiness•mental•gotcha.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (172 > 79)

types & grammar/ch4.md
|1474| Another•example•of•*implicit*•coercion•can•be•seen•with•`==`•loose•equality•between•`null`•and•`undefined`•values.•Yet•again•quoting•the•ES5•spec,•clauses•11.9.3.2-3:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (166 > 79)

types & grammar/ch4.md
|1479| `null`•and•`undefined`,•when•compared•with•`==`•loose•equality,•equate•to•(aka•coerce•to)•each•other•(as•well•as•themselves,•obviously),•and•no•other•values•in•the•entire•language.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (180 > 79)

types & grammar/ch4.md
|1481| What•this•means•is•that•`null`•and•`undefined`•can•be•treated•as•indistinguishable•for•comparison•purposes,•if•you•use•the•`==`•loose•equality•operator•to•allow•their•mutual•*implicit*•coercion.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (194 > 79)

types & grammar/ch4.md
|1499| The•coercion•between•`null`•and•`undefined`•is•safe•and•predictable,•and•no•other•values•can•give•false•positives•in•such•a•check.•I•recommend•using•this•coercion•to•allow•`null`•and•`undefined`•to•be•indistinguishable•and•thus•treated•as•the•same•value.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (254 > 79)

types & grammar/ch4.md
|1511| The•`a•==•null`•check•will•pass•only•if•`doSomething()`•returns•either•`null`•or•`undefined`,•and•will•fail•with•any•other•value,•even•other•falsy•values•like•`0`,•`false`,•and•`""`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (182 > 79)

types & grammar/ch4.md
|1513| The•*explicit*•form•of•the•check,•which•disallows•any•such•coercion,•is•(I•think)•unnecessarily•much•uglier•(and•perhaps•a•tiny•bit•less•performant!):
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (150 > 79)

types & grammar/ch4.md
|1523| In•my•opinion,•the•form•`a•==•null`•is•yet•another•example•where•*implicit*•coercion•improves•code•readability,•but•does•so•in•a•reliably•safe•way.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (147 > 79)

types & grammar/ch4.md
|1527| If•an•`object`/`function`/`array`•is•compared•to•a•simple•scalar•primitive•(`string`,•`number`,•or•`boolean`),•the•ES5•spec•says•in•clauses•11.9.3.8-9:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (151 > 79)

types & grammar/ch4.md
|1534| **Note:**•You•may•notice•that•these•clauses•only•mention•`String`•and•`Number`,•but•not•`Boolean`.•That's•because,•as•quoted•earlier,•clauses•11.9.3.6-7•take•care•of•coercing•any•`Boolean`•operand•presented•to•a•`Number`•first.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (227 > 79)

types & grammar/ch4.md
|1545| The•`[•42•]`•value•has•its•`ToPrimitive`•abstract•operation•called•(see•the•"Abstract•Value•Operations"•section•earlier),•which•results•in•the•`"42"`•value.•From•there,•it's•just•`42•==•"42"`,•which•as•we've•already•covered•becomes•`42•==•42`,•so•`a`•and•`b`•are•found•to•be•coercively•equal.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (292 > 79)

types & grammar/ch4.md
|1547| **Tip:**•All•the•quirks•of•the•`ToPrimitive`•abstract•operation•that•we•discussed•earlier•in•this•chapter•(`toString()`,•`valueOf()`)•apply•here•as•you'd•expect.•This•can•be•quite•useful•if•you•have•a•complex•data•structure•that•you•want•to•define•a•custom•`valueOf()`•method•on,•to•provide•a•simple•value•for•equality•comparison•purposes.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (339 > 79)

types & grammar/ch4.md
|1549| In•Chapter•3,•we•covered•"unboxing,"•where•an•`object`•wrapper•around•a•primitive•value•(like•from•`new•String("abc")`,•for•instance)•is•unwrapped,•and•the•underlying•primitive•value•(`"abc"`)•is•returned.•This•behavior•is•related•to•the•`ToPrimitive`•coercion•in•the•`==`•algorithm:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (283 > 79)

types & grammar/ch4.md
|1559| `a•==•b`•is•`true`•because•`b`•is•coerced•(aka•"unboxed,"•unwrapped)•via•`ToPrimitive`•to•its•underlying•`"abc"`•simple•scalar•primitive•value,•which•is•the•same•as•the•value•in•`a`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (182 > 79)

types & grammar/ch4.md
|1561| There•are•some•values•where•this•is•not•the•case,•though,•because•of•other•overriding•rules•in•the•`==`•algorithm.•Consider:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (124 > 79)

types & grammar/ch4.md
|1577| The•`null`•and•`undefined`•values•cannot•be•boxed•--•they•have•no•object•wrapper•equivalent•--•so•`Object(null)`•is•just•like•`Object()`•in•that•both•just•produce•a•normal•object.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (179 > 79)

types & grammar/ch4.md
|1579| `NaN`•can•be•boxed•to•its•`Number`•object•wrapper•equivalent,•but•when•`==`•causes•an•unboxing,•the•`NaN•==•NaN`•comparison•fails•because•`NaN`•is•never•equal•to•itself•(see•Chapter•2).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (185 > 79)

types & grammar/ch4.md
|1583| Now•that•we've•thoroughly•examined•how•the•*implicit*•coercion•of•`==`•loose•equality•works•(in•both•sensible•and•surprising•ways),•let's•try•to•call•out•the•worst,•craziest•corner•cases•so•we•can•see•what•we•need•to•avoid•to•not•get•bitten•with•coercion•bugs.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (260 > 79)

types & grammar/ch4.md
|1585| First,•let's•examine•how•modifying•the•built-in•native•prototypes•can•produce•crazy•results:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (92 > 79)

types & grammar/ch4.md
|1597| **Warning:**•`2•==•3`•would•not•have•fallen•into•this•trap,•because•neither•`2`•nor•`3`•would•have•invoked•the•built-in•`Number.prototype.valueOf()`•method•because•both•are•already•primitive•`number`•values•and•can•be•compared•directly.•However,•`new•Number(2)`•must•go•through•the•`ToPrimitive`•coercion,•and•thus•invoke•`valueOf()`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (334 > 79)

types & grammar/ch4.md
|1599| Evil,•huh?•Of•course•it•is.•No•one•should•ever•do•such•a•thing.•The•fact•that•you•*can*•do•this•is•sometimes•used•as•a•criticism•of•coercion•and•`==`.•But•that's•misdirected•frustration.•JavaScript•is•not•*bad*•because•you•can•do•such•things,•a•developer•is•*bad*•**if•they•do•such•things**.•Don't•fall•into•the•"my•programming•language•should•protect•me•from•myself"•fallacy.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (376 > 79)

types & grammar/ch4.md
|1601| Next,•let's•consider•another•tricky•example,•which•takes•the•evil•from•the•previous•example•to•another•level:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (109 > 79)

types & grammar/ch4.md
|1609| You•might•think•this•would•be•impossible,•because•`a`•could•never•be•equal•to•both•`2`•and•`3`•*at•the•same•time*.•But•"at•the•same•time"•is•inaccurate,•since•the•first•expression•`a•==•2`•happens•strictly•*before*•`a•==•3`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (224 > 79)

types & grammar/ch4.md
|1611| So,•what•if•we•make•`a.valueOf()`•have•side•effects•each•time•it's•called,•such•that•the•first•time•it•returns•`2`•and•the•second•time•it's•called•it•returns•`3`?•Pretty•easy:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (175 > 79)

types & grammar/ch4.md
|1627| Again,•these•are•evil•tricks.•Don't•do•them.•But•also•don't•use•them•as•complaints•against•coercion.•Potential•abuses•of•a•mechanism•are•not•sufficient•evidence•to•condemn•the•mechanism.•Just•avoid•these•crazy•tricks,•and•stick•only•with•valid•and•proper•usage•of•coercion.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (273 > 79)

types & grammar/ch4.md
|1631| The•most•common•complaint•against•*implicit*•coercion•in•`==`•comparisons•comes•from•how•falsy•values•behave•surprisingly•when•compared•to•each•other.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (150 > 79)

types & grammar/ch4.md
|1633| To•illustrate,•let's•look•at•a•list•of•the•corner-cases•around•falsy•value•comparisons,•to•see•which•ones•are•reasonable•and•which•are•troublesome:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (147 > 79)

types & grammar/ch4.md
|1665| In•this•list•of•24•comparisons,•17•of•them•are•quite•reasonable•and•predictable.•For•example,•we•know•that•`""`•and•`NaN`•are•not•at•all•equatable•values,•and•indeed•they•don't•coerce•to•be•loose•equals,•whereas•`"0"`•and•`0`•are•reasonably•equatable•and•*do*•coerce•as•loose•equals.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (283 > 79)

types & grammar/ch4.md
|1667| However,•seven•of•the•comparisons•are•marked•with•"UH•OH!"•because•as•false•positives,•they•are•much•more•likely•gotchas•that•could•trip•you•up.•`""`•and•`0`•are•definitely•distinctly•different•values,•and•it's•rare•you'd•want•to•treat•them•as•equatable,•so•their•mutual•coercion•is•troublesome.•Note•that•there•aren't•any•false•negatives•here.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (344 > 79)

types & grammar/ch4.md
|1671| We•don't•have•to•stop•there,•though.•We•can•keep•looking•for•even•more•troublesome•coercions:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (93 > 79)

types & grammar/ch4.md
|1677| Oooo,•that•seems•at•a•higher•level•of•crazy,•right!?•Your•brain•may•likely•trick•you•that•you're•comparing•a•truthy•to•a•falsy•value,•so•the•`true`•result•is•surprising,•as•we•*know*•a•value•can•never•be•truthy•and•falsy•at•the•same•time!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (238 > 79)

types & grammar/ch4.md
|1679| But•that's•not•what's•actually•happening.•Let's•break•it•down.•What•do•we•know•about•the•`!`•unary•operator?•It•explicitly•coerces•to•a•`boolean`•using•the•`ToBoolean`•rules•(and•it•also•flips•the•parity).•So•before•`[]•==•![]`•is•even•processed,•it's•actually•already•translated•to•`[]•==•false`.•We•already•saw•that•form•in•our•above•list•(`false•==•[]`),•so•its•surprise•result•is•*not•new*•to•us.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (400 > 79)

types & grammar/ch4.md
|1688| As•we•said•earlier•in•our•`ToNumber`•discussion,•the•right-hand•side•`[2]`•and•`[null]`•values•will•go•through•a•`ToPrimitive`•coercion•so•they•can•be•more•readily•compared•to•the•simple•primitives•(`2`•and•`""`,•respectively)•on•the•left-hand•side.•Since•the•`valueOf()`•for•`array`•values•just•returns•the•`array`•itself,•coercion•falls•to•stringifying•the•`array`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (367 > 79)

types & grammar/ch4.md
|1690| `[2]`•will•become•`"2"`,•which•then•is•`ToNumber`•coerced•to•`2`•for•the•right-hand•side•value•in•the•first•comparison.•`[null]`•just•straight•becomes•`""`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (156 > 79)

types & grammar/ch4.md
|1694| If•your•instinct•is•to•still•dislike•these•results,•your•frustration•is•not•actually•with•coercion•like•you•probably•think•it•is.•It's•actually•a•complaint•against•the•default•`array`•values'•`ToPrimitive`•behavior•of•coercing•to•a•`string`•value.•More•likely,•you'd•just•wish•that•`[2].toString()`•didn't•return•`"2"`,•or•that•`[null].toString()`•didn't•return•`""`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (367 > 79)

types & grammar/ch4.md
|1696| But•what•exactly•*should*•these•`string`•coercions•result•in?•I•can't•really•think•of•any•other•appropriate•`string`•coercion•of•`[2]`•than•`"2"`,•except•perhaps•`"[2]"`•--•but•that•could•be•very•strange•in•other•contexts!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (222 > 79)

types & grammar/ch4.md
|1698| You•could•rightly•make•the•case•that•since•`String(null)`•becomes•`"null"`,•then•`String([null])`•should•also•become•`"null"`.•That's•a•reasonable•assertion.•So,•that's•the•real•culprit.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (186 > 79)

types & grammar/ch4.md
|1700| *Implicit*•coercion•itself•isn't•the•evil•here.•Even•an•*explicit*•coercion•of•`[null]`•to•a•`string`•results•in•`""`.•What's•at•odds•is•whether•it's•sensible•at•all•for•`array`•values•to•stringify•to•the•equivalent•of•their•contents,•and•exactly•how•that•happens.•So,•direct•your•frustration•at•the•rules•for•`String(•[..]•)`,•because•that's•where•the•craziness•stems•from.•Perhaps•there•should•be•no•stringification•coercion•of•`array`s•at•all?•But•that•would•have•lots•of•other•downsides•in•other•parts•of•the•language.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (522 > 79)

types & grammar/ch4.md
|1708| As•we•discussed•earlier•with•empty•`""`,•`"\n"`•(or•`"•"`•or•any•other•whitespace•combination)•is•coerced•via•`ToNumber`,•and•the•result•is•`0`.•What•other•`number`•value•would•you•expect•whitespace•to•coerce•to?•Does•it•bother•you•that•*explicit*•`Number("•")`•yields•`0`?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (273 > 79)

types & grammar/ch4.md
|1710| Really•the•only•other•reasonable•`number`•value•that•empty•strings•or•whitespace•strings•could•coerce•to•is•the•`NaN`.•But•would•that•*really*•be•better?•The•comparison•`"•"•==•NaN`•would•of•course•fail,•but•it's•unclear•that•we'd•have•really•*fixed*•any•of•the•underlying•concerns.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (282 > 79)

types & grammar/ch4.md
|1712| The•chances•that•a•real-world•JS•program•fails•because•`0•==•"\n"`•are•awfully•rare,•and•such•corner•cases•are•easy•to•avoid.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (125 > 79)

types & grammar/ch4.md
|1714| Type•conversions•**always**•have•corner•cases,•in•any•language•--•nothing•specific•to•coercion.•The•issues•here•are•about•second-guessing•a•certain•set•of•corner•cases•(and•perhaps•rightly•so!?),•but•that's•not•a•salient•argument•against•the•overall•coercion•mechanism.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (269 > 79)

types & grammar/ch4.md
|1716| Bottom•line:•almost•any•crazy•coercion•between•*normal•values*•that•you're•likely•to•run•into•(aside•from•intentionally•tricky•`valueOf()`•or•`toString()`•hacks•as•earlier)•will•boil•down•to•the•short•seven-item•list•of•gotcha•coercions•we've•identified•above.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (260 > 79)

types & grammar/ch4.md
|1718| To•contrast•against•these•24•likely•suspects•for•coercion•gotchas,•consider•another•list•like•this:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (99 > 79)

types & grammar/ch4.md
|1729| In•these•nonfalsy,•noncorner•cases•(and•there•are•literally•an•infinite•number•of•comparisons•we•could•put•on•this•list),•the•coercion•results•are•totally•safe,•reasonable,•and•explainable.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (189 > 79)

types & grammar/ch4.md
|1733| OK,•we've•definitely•found•some•crazy•stuff•when•we've•looked•deeply•into•*implicit*•coercion.•No•wonder•that•most•developers•claim•coercion•is•evil•and•should•be•avoided,•right!?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (179 > 79)

types & grammar/ch4.md
|1737| By•way•of•magnitude•comparison,•we•have•*a•list*•of•seven•troublesome•gotcha•coercions,•but•we•have•*another•list*•of•(at•least•17,•but•actually•infinite)•coercions•that•are•totally•sane•and•explainable.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (203 > 79)

types & grammar/ch4.md
|1739| If•you're•looking•for•a•textbook•example•of•"throwing•the•baby•out•with•the•bathwater,"•this•is•it:•discarding•the•entirety•of•coercion•(the•infinitely•large•list•of•safe•and•useful•behaviors)•because•of•a•list•of•literally•just•seven•gotchas.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (243 > 79)

types & grammar/ch4.md
|1741| The•more•prudent•reaction•would•be•to•ask,•"how•can•I•use•the•countless•*good•parts*•of•coercion,•but•avoid•the•few•*bad•parts*?"
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (129 > 79)

types & grammar/ch4.md
|1755| Four•of•the•seven•items•on•this•list•involve•`==•false`•comparison,•which•we•said•earlier•you•should•**always,•always**•avoid.•That's•a•pretty•easy•rule•to•remember.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (165 > 79)

types & grammar/ch4.md
|1765| Are•these•reasonable•coercions•you'd•do•in•a•normal•JavaScript•program?•Under•what•conditions•would•they•really•happen?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (119 > 79)

types & grammar/ch4.md
|1767| I•don't•think•it's•terribly•likely•that•you'd•literally•use•`==•[]`•in•a•`boolean`•test•in•your•program,•at•least•not•if•you•know•what•you're•doing.•You'd•probably•instead•be•doing•`==•""`•or•`==•0`,•like:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (205 > 79)

types & grammar/ch4.md
|1777| You'd•have•an•oops•if•you•accidentally•called•`doSomething(0)`•or•`doSomething([])`.•Another•scenario:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (102 > 79)

types & grammar/ch4.md
|1787| Again,•this•could•break•if•you•did•something•like•`doSomething("",0)`•or•`doSomething([],"")`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (94 > 79)

types & grammar/ch4.md
|1789| So,•while•the•situations•*can*•exist•where•these•coercions•will•bite•you,•and•you'll•want•to•be•careful•around•them,•they're•probably•not•super•common•on•the•whole•of•your•code•base.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (182 > 79)

types & grammar/ch4.md
|1793| The•most•important•advice•I•can•give•you:•examine•your•program•and•reason•about•what•values•can•show•up•on•either•side•of•an•`==`•comparison.•To•effectively•avoid•issues•with•such•comparisons,•here's•some•heuristic•rules•to•follow:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (231 > 79)

types & grammar/ch4.md
|1795| 1.•If•either•side•of•the•comparison•can•have•`true`•or•`false`•values,•don't•ever,•EVER•use•`==`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (97 > 79)

types & grammar/ch4.md
|1796| 2.•If•either•side•of•the•comparison•can•have•`[]`,•`""`,•or•`0`•values,•seriously•consider•not•using•`==`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (106 > 79)

types & grammar/ch4.md
|1798| In•these•scenarios,•it's•almost•certainly•better•to•use•`===`•instead•of•`==`,•to•avoid•unwanted•coercion.•Follow•those•two•simple•rules•and•pretty•much•all•the•coercion•gotchas•that•could•reasonably•hurt•you•will•effectively•be•avoided.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (237 > 79)

types & grammar/ch4.md
|1800| **Being•more•explicit/verbose•in•these•cases•will•save•you•from•a•lot•of•headaches.**
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (85 > 79)

types & grammar/ch4.md
|1802| The•question•of•`==`•vs.•`===`•is•really•appropriately•framed•as:•should•you•allow•coercion•for•a•comparison•or•not?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (116 > 79)

types & grammar/ch4.md
|1804| There's•lots•of•cases•where•such•coercion•can•be•helpful,•allowing•you•to•more•tersely•express•some•comparison•logic•(like•with•`null`•and•`undefined`,•for•example).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (165 > 79)

types & grammar/ch4.md
|1806| In•the•overall•scheme•of•things,•there's•relatively•few•cases•where•*implicit*•coercion•is•truly•dangerous.•But•in•those•places,•for•safety•sake,•definitely•use•`===`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (167 > 79)

types & grammar/ch4.md
|1808| **Tip:**•Another•place•where•coercion•is•guaranteed•*not*•to•bite•you•is•with•the•`typeof`•operator.•`typeof`•is•always•going•to•return•you•one•of•seven•strings•(see•Chapter•1),•and•none•of•them•are•the•empty•`""`•string.•As•such,•there's•no•case•where•checking•the•type•of•some•value•is•going•to•run•afoul•of•*implicit*•coercion.•`typeof•x•==•"function"`•is•100%•as•safe•and•reliable•as•`typeof•x•===•"function"`.•Literally,•the•spec•says•the•algorithm•will•be•identical•in•this•situation.•So,•don't•just•blindly•use•`===`•everywhere•simply•because•that's•what•your•code•tools•tell•you•to•do,•or•(worst•of•all)•because•you've•been•told•in•some•book•to•**not•think•about•it**.•You•own•the•quality•of•your•code.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (710 > 79)

types & grammar/ch4.md
|1810| Is•*implicit*•coercion•evil•and•dangerous?•In•a•few•cases,•yes,•but•overwhelmingly,•no.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (87 > 79)

types & grammar/ch4.md
|1812| Be•a•responsible•and•mature•developer.•Learn•how•to•use•the•power•of•coercion•(both•*explicit*•and•*implicit*)•effectively•and•safely.•And•teach•those•around•you•to•do•the•same.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (177 > 79)

types & grammar/ch4.md
|1814| Here's•a•handy•table•made•by•Alex•Dorey•(@dorey•on•GitHub)•to•visualize•a•variety•of•comparisons:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (97 > 79)

types & grammar/ch4.md
|1822| While•this•part•of•*implicit*•coercion•often•gets•a•lot•less•attention,•it's•important•nonetheless•to•think•about•what•happens•with•`a•<•b`•comparisons•(similar•to•how•we•just•examined•`a•==•b`•in•depth).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (204 > 79)

types & grammar/ch4.md
|1824| The•"Abstract•Relational•Comparison"•algorithm•in•ES5•section•11.8.5•essentially•divides•itself•into•two•parts:•what•to•do•if•the•comparison•involves•both•`string`•values•(second•half),•or•anything•else•(first•half).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (216 > 79)

types & grammar/ch4.md
|1826| **Note:**•The•algorithm•is•only•defined•for•`a•<•b`.•So,•`a•>•b`•is•handled•as•`b•<•a`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (87 > 79)

types & grammar/ch4.md
|1828| The•algorithm•first•calls•`ToPrimitive`•coercion•on•both•values,•and•if•the•return•result•of•either•call•is•not•a•`string`,•then•both•values•are•coerced•to•`number`•values•using•the•`ToNumber`•operation•rules,•and•compared•numerically.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (235 > 79)

types & grammar/ch4.md
|1840| **Note:**•Similar•caveats•for•`-0`•and•`NaN`•apply•here•as•they•did•in•the•`==`•algorithm•discussed•earlier.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (108 > 79)

types & grammar/ch4.md
|1842| However,•if•both•values•are•`string`s•for•the•`<`•comparison,•simple•lexicographic•(natural•alphabetic)•comparison•on•the•characters•is•performed:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (146 > 79)

types & grammar/ch4.md
|1851| `a`•and•`b`•are•*not*•coerced•to•`number`s,•because•both•of•them•end•up•as•`string`s•after•the•`ToPrimitive`•coercion•on•the•two•`array`s.•So,•`"42"`•is•compared•character•by•character•to•`"043"`,•starting•with•the•first•characters•`"4"`•and•`"0"`,•respectively.•Since•`"0"`•is•lexicographically•*less•than*•than•`"4"`,•the•comparison•returns•`false`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (351 > 79)

types & grammar/ch4.md
|1862| Here,•`a`•becomes•`"4,2"`•and•`b`•becomes•`"0,4,3"`,•and•those•lexicographically•compare•identically•to•the•previous•snippet.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (125 > 79)

types & grammar/ch4.md
|1873| `a•<•b`•is•also•`false`,•because•`a`•becomes•`[object•Object]`•and•`b`•becomes•`[object•Object]`,•and•so•clearly•`a`•is•not•lexicographically•less•than•`b`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (156 > 79)

types & grammar/ch4.md
|1889| Why•is•`a•==•b`•not•`true`?•They're•the•same•`string`•value•(`"[object•Object]"`),•so•it•seems•they•should•be•equal,•right?•Nope.•Recall•the•previous•discussion•about•how•`==`•works•with•`object`•references.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (207 > 79)

types & grammar/ch4.md
|1891| But•then•how•are•`a•<=•b`•and•`a•>=•b`•resulting•in•`true`,•if•`a•<•b`•**and**•`a•==•b`•**and**•`a•>•b`•are•all•`false`?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (120 > 79)

types & grammar/ch4.md
|1893| Because•the•spec•says•for•`a•<=•b`,•it•will•actually•evaluate•`b•<•a`•first,•and•then•negate•that•result.•Since•`b•<•a`•is•*also*•`false`,•the•result•of•`a•<=•b`•is•`true`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (172 > 79)

types & grammar/ch4.md
|1895| That's•probably•awfully•contrary•to•how•you•might•have•explained•what•`<=`•does•up•to•now,•which•would•likely•have•been•the•literal:•"less•than•*or*•equal•to."•JS•more•accurately•considers•`<=`•as•"not•greater•than"•(`!(a•>•b)`,•which•JS•treats•as•`!(b•<•a)`).•Moreover,•`a•>=•b`•is•explained•by•first•considering•it•as•`b•<=•a`,•and•then•applying•the•same•reasoning.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (367 > 79)

types & grammar/ch4.md
|1897| Unfortunately,•there•is•no•"strict•relational•comparison"•as•there•is•for•equality.•In•other•words,•there's•no•way•to•prevent•*implicit*•coercion•from•occurring•with•relational•comparisons•like•`a•<•b`,•other•than•to•ensure•that•`a`•and•`b`•are•of•the•same•type•explicitly•before•making•the•comparison.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (302 > 79)

types & grammar/ch4.md
|1899| Use•the•same•reasoning•from•our•earlier•`==`•vs.•`===`•sanity•check•discussion.•If•coercion•is•helpful•and•reasonably•safe,•like•in•a•`42•<•"43"`•comparison,•**use•it**.•On•the•other•hand,•if•you•need•to•be•safe•about•a•relational•comparison,•*explicitly•coerce*•the•values•first,•before•using•`<`•(or•its•counterparts).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (320 > 79)

types & grammar/ch4.md
|1911| In•this•chapter,•we•turned•our•attention•to•how•JavaScript•type•conversions•happen,•called•**coercion**,•which•can•be•characterized•as•either•*explicit*•or•*implicit*.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (167 > 79)

types & grammar/ch4.md
|1913| Coercion•gets•a•bad•rap,•but•it's•actually•quite•useful•in•many•cases.•An•important•task•for•the•responsible•JS•developer•is•to•take•the•time•to•learn•all•the•ins•and•outs•of•coercion•to•decide•which•parts•will•help•improve•their•code,•and•which•parts•they•really•should•avoid.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (277 > 79)

types & grammar/ch4.md
|1915| *Explicit*•coercion•is•code•which•is•obvious•that•the•intent•is•to•convert•a•value•from•one•type•to•another.•The•benefit•is•improvement•in•readability•and•maintainability•of•code•by•reducing•confusion.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (201 > 79)

types & grammar/ch4.md
|1917| *Implicit*•coercion•is•coercion•that•is•"hidden"•as•a•side-effect•of•some•other•operation,•where•it's•not•as•obvious•that•the•type•conversion•will•occur.•While•it•may•seem•that•*implicit*•coercion•is•the•opposite•of•*explicit*•and•is•thus•bad•(and•indeed,•many•think•so!),•actually•*implicit*•coercion•is•also•about•improving•the•readability•of•code.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (350 > 79)

types & grammar/ch4.md
|1919| Especially•for•*implicit*,•coercion•must•be•used•responsibly•and•consciously.•Know•why•you're•writing•the•code•you're•writing,•and•how•it•works.•Strive•to•write•code•that•others•will•easily•be•able•to•learn•from•and•understand•as•well.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (235 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/types & grammar/ch2.md
|    |++++| /app/types & grammar/ch2.md
|   1|   1| # You Don't Know JS: Types & Grammar
|    |   2|+
|   2|   3| # Chapter 2: Values
|   3|   4| 
|   4|   5| `array`s, `string`s, and `number`s are the most basic building-blocks of any program, but JavaScript has some unique characteristics with these types that may either delight or confound you.
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/types & grammar/ch2.md
|    |++++| /app/types & grammar/ch2.md
| 206| 206| 
| 207| 207| If that feels ugly, it is. Nevertheless, *it works* for simple `string`s, so if you need something quick-n-dirty, often such an approach gets the job done.
| 208| 208| 
| 209|    |-**Warning:** Be careful! This approach **doesn't work** for `string`s with complex (unicode) characters in them (astral symbols, multibyte characters, etc.). You need more sophisticated library utilities that are unicode-aware for such operations to be handled accurately. Consult Mathias Bynens' work on the subject: *Esrever* (https://github.com/mathiasbynens/esrever).
|    | 209|+**Warning:** Be careful! This approach **doesn't work** for `string`s with complex (unicode) characters in them (astral symbols, multibyte characters, etc.). You need more sophisticated library utilities that are unicode-aware for such operations to be handled accurately. Consult Mathias Bynens' work on the subject: *Esrever* (<https://github.com/mathiasbynens/esrever>).
| 210| 210| 
| 211| 211| The other way to look at this is: if you are more commonly doing tasks on your "strings" that treat them as basically *arrays of characters*, perhaps it's better to just actually store them as `array`s rather than as `string`s. You'll probably save yourself a lot of hassle of converting from `string` to `array` each time. You can always call `join("")` on the `array` *of characters* whenever you actually need the `string` representation.
| 212| 212| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/types & grammar/ch2.md
|    |++++| /app/types & grammar/ch2.md
| 471| 471| 
| 472| 472| Both `undefined` and `null` are often taken to be interchangeable as either "empty" values or "non" values. Other developers prefer to distinguish between them with nuance. For example:
| 473| 473| 
| 474|    |-* `null` is an empty value
| 475|    |-* `undefined` is a missing value
|    | 474|+- `null` is an empty value
|    | 475|+- `undefined` is a missing value
| 476| 476| 
| 477| 477| Or:
| 478| 478| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/types & grammar/ch2.md
|    |++++| /app/types & grammar/ch2.md
| 476| 476| 
| 477| 477| Or:
| 478| 478| 
| 479|    |-* `undefined` hasn't had a value yet
| 480|    |-* `null` had a value and doesn't anymore
|    | 479|+- `undefined` hasn't had a value yet
|    | 480|+- `null` had a value and doesn't anymore
| 481| 481| 
| 482| 482| Regardless of how you choose to "define" and use these two values, `null` is a special keyword, not an identifier, and thus you cannot treat it as a variable to assign to (why would you!?). However, `undefined` *is* (unfortunately) an identifier. Uh oh.
| 483| 483| 

types & grammar/ch2.md
|   4| `array`s,•`string`s,•and•`number`s•are•the•most•basic•building-blocks•of•any•program,•but•JavaScript•has•some•unique•characteristics•with•these•types•that•may•either•delight•or•confound•you.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (190 > 79)

types & grammar/ch2.md
|   6| Let's•look•at•several•of•the•built-in•value•types•in•JS,•and•explore•how•we•can•more•fully•understand•and•correctly•leverage•their•behaviors.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (141 > 79)

types & grammar/ch2.md
|  10| As•compared•to•other•type-enforced•languages,•JavaScript•`array`s•are•just•containers•for•any•type•of•value,•from•`string`•to•`number`•to•`object`•to•even•another•`array`•(which•is•how•you•get•multidimensional•`array`s).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (220 > 79)

types & grammar/ch2.md
|  20| You•don't•need•to•presize•your•`array`s•(see•"Arrays"•in•Chapter•3),•you•can•just•declare•them•and•add•values•as•you•see•fit:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (125 > 79)

types & grammar/ch2.md
|  34| **Warning:**•Using•`delete`•on•an•`array`•value•will•remove•that•slot•from•the•`array`,•but•even•if•you•remove•the•final•element,•it•does•**not**•update•the•`length`•property,•so•be•careful!•We'll•cover•the•`delete`•operator•itself•in•more•detail•in•Chapter•5.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (260 > 79)

types & grammar/ch2.md
|  36| Be•careful•about•creating•"sparse"•`array`s•(leaving•or•creating•empty/missing•slots):
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (86 > 79)

types & grammar/ch2.md
|  50| While•that•works,•it•can•lead•to•some•confusing•behavior•with•the•"empty•slots"•you•leave•in•between.•While•the•slot•appears•to•have•the•`undefined`•value•in•it,•it•will•not•behave•the•same•as•if•the•slot•is•explicitly•set•(`a[1]•=•undefined`).•See•"Arrays"•in•Chapter•3•for•more•information.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (292 > 79)

types & grammar/ch2.md
|  52| `array`s•are•numerically•indexed•(as•you'd•expect),•but•the•tricky•thing•is•that•they•also•are•objects•that•can•have•`string`•keys/properties•added•to•them•(but•which•don't•count•toward•the•`length`•of•the•`array`):
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (215 > 79)

types & grammar/ch2.md
|  65| However,•a•gotcha•to•be•aware•of•is•that•if•a•`string`•value•intended•as•a•key•can•be•coerced•to•a•standard•base-10•`number`,•then•it•is•assumed•that•you•wanted•to•use•it•as•a•`number`•index•rather•than•as•a•`string`•key!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (221 > 79)

types & grammar/ch2.md
|  75| Generally,•it's•not•a•great•idea•to•add•`string`•keys/properties•to•`array`s.•Use•`object`s•for•holding•values•in•keys/properties,•and•save•`array`s•for•strictly•numerically•indexed•values.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (189 > 79)

types & grammar/ch2.md
|  79| There•will•be•occasions•where•you•need•to•convert•an•`array`-like•value•(a•numerically•indexed•collection•of•values)•into•a•true•`array`,•usually•so•you•can•call•array•utilities•(like•`indexOf(..)`,•`concat(..)`,•`forEach(..)`,•etc.)•against•the•collection•of•values.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (267 > 79)

types & grammar/ch2.md
|  81| For•example,•various•DOM•query•operations•return•lists•of•DOM•elements•that•are•not•true•`array`s•but•are•`array`-like•enough•for•our•conversion•purposes.•Another•common•example•is•when•functions•expose•the•`arguments`•(`array`-like)•object•(as•of•ES6,•deprecated)•to•access•the•arguments•as•a•list.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (299 > 79)

types & grammar/ch2.md
|  83| One•very•common•way•to•make•such•a•conversion•is•to•borrow•the•`slice(..)`•utility•against•the•value:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (101 > 79)

types & grammar/ch2.md
|  95| If•`slice()`•is•called•without•any•other•parameters,•as•it•effectively•is•in•the•above•snippet,•the•default•values•for•its•parameters•have•the•effect•of•duplicating•the•`array`•(or,•in•this•case,•`array`-like).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (210 > 79)

types & grammar/ch2.md
|  97| As•of•ES6,•there's•also•a•built-in•utility•called•`Array.from(..)`•that•can•do•the•same•task:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (93 > 79)

types & grammar/ch2.md
| 105| **Note:**•`Array.from(..)`•has•several•powerful•capabilities,•and•will•be•covered•in•detail•in•the•*ES6•&•Beyond*•title•of•this•series.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (135 > 79)

types & grammar/ch2.md
| 109| It's•a•very•common•belief•that•`string`s•are•essentially•just•`array`s•of•characters.•While•the•implementation•under•the•covers•may•or•may•not•use•`array`s,•it's•important•to•realize•that•JavaScript•`string`s•are•really•not•the•same•as•`array`s•of•characters.•The•similarity•is•mostly•just•skin-deep.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (300 > 79)

types & grammar/ch2.md
| 118| Strings•do•have•a•shallow•resemblance•to•`array`s•--•`array`-likes,•as•above•--•for•instance,•both•of•them•having•a•`length`•property,•an•`indexOf(..)`•method•(`array`•version•only•as•of•ES5),•and•a•`concat(..)`•method:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (219 > 79)

types & grammar/ch2.md
| 147| JavaScript•`string`s•are•immutable,•while•`array`s•are•quite•mutable.•Moreover,•the•`a[1]`•character•position•access•form•was•not•always•widely•valid•JavaScript.•Older•versions•of•IE•did•not•allow•that•syntax•(but•now•they•do).•Instead,•the•*correct*•approach•has•been•`a.charAt(1)`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (283 > 79)

types & grammar/ch2.md
| 149| A•further•consequence•of•immutable•`string`s•is•that•none•of•the•`string`•methods•that•alter•its•contents•can•modify•in-place,•but•rather•must•create•and•return•new•`string`s.•By•contrast,•many•of•the•methods•that•change•`array`•contents•actually•*do*•modify•in-place.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (268 > 79)

types & grammar/ch2.md
| 161| Also,•many•of•the•`array`•methods•that•could•be•helpful•when•dealing•with•`string`s•are•not•actually•available•for•them,•but•we•can•"borrow"•non-mutation•`array`•methods•against•our•`string`:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (191 > 79)

types & grammar/ch2.md
| 176| Let's•take•another•example:•reversing•a•`string`•(incidentally,•a•common•JavaScript•interview•trivia•question!).•`array`s•have•a•`reverse()`•in-place•mutator•method,•but•`string`s•do•not:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (187 > 79)

types & grammar/ch2.md
| 185| Unfortunately,•this•"borrowing"•doesn't•work•with•`array`•mutators,•because•`string`s•are•immutable•and•thus•can't•be•modified•in•place:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (136 > 79)

types & grammar/ch2.md
| 193| Another•workaround•(aka•hack)•is•to•convert•the•`string`•into•an•`array`,•perform•the•desired•operation,•then•convert•it•back•to•a•`string`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (140 > 79)

types & grammar/ch2.md
| 207| If•that•feels•ugly,•it•is.•Nevertheless,•*it•works*•for•simple•`string`s,•so•if•you•need•something•quick-n-dirty,•often•such•an•approach•gets•the•job•done.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (155 > 79)

types & grammar/ch2.md
| 209| **Warning:**•Be•careful!•This•approach•**doesn't•work**•for•`string`s•with•complex•(unicode)•characters•in•them•(astral•symbols,•multibyte•characters,•etc.).•You•need•more•sophisticated•library•utilities•that•are•unicode-aware•for•such•operations•to•be•handled•accurately.•Consult•Mathias•Bynens'•work•on•the•subject:•*Esrever*•(https://github.com/mathiasbynens/esrever).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (371 > 79)

types & grammar/ch2.md
| 211| The•other•way•to•look•at•this•is:•if•you•are•more•commonly•doing•tasks•on•your•"strings"•that•treat•them•as•basically•*arrays•of•characters*,•perhaps•it's•better•to•just•actually•store•them•as•`array`s•rather•than•as•`string`s.•You'll•probably•save•yourself•a•lot•of•hassle•of•converting•from•`string`•to•`array`•each•time.•You•can•always•call•`join("")`•on•the•`array`•*of•characters*•whenever•you•actually•need•the•`string`•representation.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (441 > 79)

types & grammar/ch2.md
| 215| JavaScript•has•just•one•numeric•type:•`number`.•This•type•includes•both•"integer"•values•and•fractional•decimal•numbers.•I•say•"integer"•in•quotes•because•it's•long•been•a•criticism•of•JS•that•there•are•not•true•integers,•as•there•are•in•other•languages.•That•may•change•at•some•point•in•the•future,•but•for•now,•we•just•have•`number`s•for•everything.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (351 > 79)

types & grammar/ch2.md
| 217| So,•in•JS,•an•"integer"•is•just•a•value•that•has•no•fractional•decimal•value.•That•is,•`42.0`•is•as•much•an•"integer"•as•`42`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (126 > 79)

types & grammar/ch2.md
| 219| Like•most•modern•languages,•including•practically•all•scripting•languages,•the•implementation•of•JavaScript's•`number`s•is•based•on•the•"IEEE•754"•standard,•often•called•"floating-point."•JavaScript•specifically•uses•the•"double•precision"•format•(aka•"64-bit•binary")•of•the•standard.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (285 > 79)

types & grammar/ch2.md
| 221| There•are•many•great•write-ups•on•the•Web•about•the•nitty-gritty•details•of•how•binary•floating-point•numbers•are•stored•in•memory,•and•the•implications•of•those•choices.•Because•understanding•bit•patterns•in•memory•is•not•strictly•necessary•to•understand•how•to•correctly•use•`number`s•in•JS,•we'll•leave•it•as•an•exercise•for•the•interested•reader•if•you'd•like•to•dig•further•into•IEEE•754•details.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (401 > 79)

types & grammar/ch2.md
| 225| Number•literals•are•expressed•in•JavaScript•generally•as•base-10•decimal•literals.•For•example:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (95 > 79)

types & grammar/ch2.md
| 239| Similarly,•the•trailing•portion•(the•fractional)•of•a•decimal•value•after•the•`.`,•if•`0`,•is•optional:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (103 > 79)

types & grammar/ch2.md
| 246| **Warning:**•`42.`•is•pretty•uncommon,•and•probably•not•a•great•idea•if•you're•trying•to•avoid•confusion•when•other•people•read•your•code.•But•it•is,•nevertheless,•valid.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (170 > 79)

types & grammar/ch2.md
| 248| By•default,•most•`number`s•will•be•outputted•as•base-10•decimals,•with•trailing•fractional•`0`s•removed.•So:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (108 > 79)

types & grammar/ch2.md
| 258| Very•large•or•very•small•`number`s•will•by•default•be•outputted•in•exponent•form,•the•same•as•the•output•of•the•`toExponential()`•method,•like:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (143 > 79)

types & grammar/ch2.md
| 272| Because•`number`•values•can•be•boxed•with•the•`Number`•object•wrapper•(see•Chapter•3),•`number`•values•can•access•methods•that•are•built•into•the•`Number.prototype`•(see•Chapter•3).•For•example,•the•`toFixed(..)`•method•allows•you•to•specify•how•many•fractional•decimal•places•you'd•like•the•value•to•be•represented•with:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (321 > 79)

types & grammar/ch2.md
| 284| Notice•that•the•output•is•actually•a•`string`•representation•of•the•`number`,•and•that•the•value•is•`0`-padded•on•the•right-hand•side•if•you•ask•for•more•decimals•than•the•value•holds.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (184 > 79)

types & grammar/ch2.md
| 286| `toPrecision(..)`•is•similar,•but•specifies•how•many•*significant•digits*•should•be•used•to•represent•the•value:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (112 > 79)

types & grammar/ch2.md
| 299| You•don't•have•to•use•a•variable•with•the•value•in•it•to•access•these•methods;•you•can•access•these•methods•directly•on•`number`•literals.•But•you•have•to•be•careful•with•the•`.`•operator.•Since•`.`•is•a•valid•numeric•character,•it•will•first•be•interpreted•as•part•of•the•`number`•literal,•if•possible,•instead•of•being•interpreted•as•a•property•accessor.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (356 > 79)

types & grammar/ch2.md
| 311| `42.toFixed(3)`•is•invalid•syntax,•because•the•`.`•is•swallowed•up•as•part•of•the•`42.`•literal•(which•is•valid•--•see•above!),•and•so•then•there's•no•`.`•property•operator•present•to•make•the•`.toFixed`•access.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (211 > 79)

types & grammar/ch2.md
| 313| `42..toFixed(3)`•works•because•the•first•`.`•is•part•of•the•`number`•and•the•second•`.`•is•the•property•operator.•But•it•probably•looks•strange,•and•indeed•it's•very•rare•to•see•something•like•that•in•actual•JavaScript•code.•In•fact,•it's•pretty•uncommon•to•access•methods•directly•on•any•of•the•primitive•values.•Uncommon•doesn't•mean•*bad*•or•*wrong*.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (353 > 79)

types & grammar/ch2.md
| 315| **Note:**•There•are•libraries•that•extend•the•built-in•`Number.prototype`•(see•Chapter•3)•to•provide•extra•operations•on/with•`number`s,•and•so•in•those•cases,•it's•perfectly•valid•to•use•something•like•`10..makeItRain()`•to•set•off•a•10-second•money•raining•animation,•or•something•else•silly•like•that.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (304 > 79)

types & grammar/ch2.md
| 323| However,•with•the•`number`•literal•specifically,•**this•is•particularly•confusing•coding•style**•and•will•serve•no•other•purpose•but•to•confuse•other•developers•(and•your•future•self).•Avoid•it.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (194 > 79)

types & grammar/ch2.md
| 325| `number`s•can•also•be•specified•in•exponent•form,•which•is•common•when•representing•larger•`number`s,•such•as:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (110 > 79)

types & grammar/ch2.md
| 332| `number`•literals•can•also•be•expressed•in•other•bases,•like•binary,•octal,•and•hexadecimal.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (92 > 79)

types & grammar/ch2.md
| 343| **Note:**•Starting•with•ES6•+•`strict`•mode,•the•`0363`•form•of•octal•literals•is•no•longer•allowed•(see•below•for•the•new•form).•The•`0363`•form•is•still•allowed•in•non-`strict`•mode,•but•you•should•stop•using•it•anyway,•to•be•future-friendly•(and•because•you•should•be•using•`strict`•mode•by•now!).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (300 > 79)

types & grammar/ch2.md
| 355| Please•do•your•fellow•developers•a•favor:•never•use•the•`0O363`•form.•`0`•next•to•capital•`O`•is•just•asking•for•confusion.•Always•use•the•lowercase•predicates•`0x`,•`0b`,•and•`0o`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (181 > 79)

types & grammar/ch2.md
| 359| The•most•(in)famous•side•effect•of•using•binary•floating-point•numbers•(which,•remember,•is•true•of•**all**•languages•that•use•IEEE•754•--•not•*just*•JavaScript•as•many•assume/pretend)•is:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (188 > 79)

types & grammar/ch2.md
| 367| Simply•put,•the•representations•for•`0.1`•and•`0.2`•in•binary•floating-point•are•not•exact,•so•when•they•are•added,•the•result•is•not•exactly•`0.3`.•It's•**really**•close:•`0.30000000000000004`,•but•if•your•comparison•fails,•"close"•is•irrelevant.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (247 > 79)

types & grammar/ch2.md
| 369| **Note:**•Should•JavaScript•switch•to•a•different•`number`•implementation•that•has•exact•representations•for•all•values?•Some•think•so.•There•have•been•many•alternatives•presented•over•the•years.•None•of•them•have•been•accepted•yet,•and•perhaps•never•will.•As•easy•as•it•may•seem•to•just•wave•a•hand•and•say,•"fix•that•bug•already!",•it's•not•nearly•that•easy.•If•it•were,•it•most•definitely•would•have•been•changed•a•long•time•ago.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (432 > 79)

types & grammar/ch2.md
| 371| Now,•the•question•is,•if•some•`number`s•can't•be•*trusted*•to•be•exact,•does•that•mean•we•can't•use•`number`s•at•all?•**Of•course•not.**
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (136 > 79)

types & grammar/ch2.md
| 373| There•are•some•applications•where•you•need•to•be•more•careful,•especially•when•dealing•with•fractional•decimal•values.•There•are•also•plenty•of•(maybe•most?)•applications•that•only•deal•with•whole•numbers•("integers"),•and•moreover,•only•deal•with•numbers•in•the•millions•or•trillions•at•maximum.•These•applications•have•been,•and•always•will•be,•**perfectly•safe**•to•use•numeric•operations•in•JS.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (398 > 79)

types & grammar/ch2.md
| 375| What•if•we•*did*•need•to•compare•two•`number`s,•like•`0.1•+•0.2`•to•`0.3`,•knowing•that•the•simple•equality•test•fails?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (119 > 79)

types & grammar/ch2.md
| 377| The•most•commonly•accepted•practice•is•to•use•a•tiny•"rounding•error"•value•as•the•*tolerance*•for•comparison.•This•tiny•value•is•often•called•"machine•epsilon,"•which•is•commonly•`2^-52`•(`2.220446049250313e-16`)•for•the•kind•of•`number`s•in•JavaScript.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (254 > 79)

types & grammar/ch2.md
| 379| As•of•ES6,•`Number.EPSILON`•is•predefined•with•this•tolerance•value,•so•you'd•want•to•use•it,•but•you•can•safely•polyfill•the•definition•for•pre-ES6:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (149 > 79)

types & grammar/ch2.md
| 387| We•can•use•this•`Number.EPSILON`•to•compare•two•`number`s•for•"equality"•(within•the•rounding•error•tolerance):
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (111 > 79)

types & grammar/ch2.md
| 401| The•maximum•floating-point•value•that•can•be•represented•is•roughly•`1.798e+308`•(which•is•really,•really,•really•huge!),•predefined•for•you•as•`Number.MAX_VALUE`.•On•the•small•end,•`Number.MIN_VALUE`•is•roughly•`5e-324`,•which•isn't•negative•but•is•really•close•to•zero!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (271 > 79)

types & grammar/ch2.md
| 405| Because•of•how•`number`s•are•represented,•there•is•a•range•of•"safe"•values•for•the•whole•`number`•"integers",•and•it's•significantly•less•than•`Number.MAX_VALUE`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (163 > 79)

types & grammar/ch2.md
| 407| The•maximum•integer•that•can•"safely"•be•represented•(that•is,•there's•a•guarantee•that•the•requested•value•is•actually•representable•unambiguously)•is•`2^53•-•1`,•which•is•`9007199254740991`.•If•you•insert•your•commas,•you'll•see•that•this•is•just•over•9•quadrillion.•So•that's•pretty•darn•big•for•`number`s•to•range•up•to.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (324 > 79)

types & grammar/ch2.md
| 409| This•value•is•actually•automatically•predefined•in•ES6,•as•`Number.MAX_SAFE_INTEGER`.•Unsurprisingly,•there's•a•minimum•value,•`-9007199254740991`,•and•it's•defined•in•ES6•as•`Number.MIN_SAFE_INTEGER`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (201 > 79)

types & grammar/ch2.md
| 411| The•main•way•that•JS•programs•are•confronted•with•dealing•with•such•large•numbers•is•when•dealing•with•64-bit•IDs•from•databases,•etc.•64-bit•numbers•cannot•be•represented•accurately•with•the•`number`•type,•so•must•be•stored•in•(and•transmitted•to/from)•JavaScript•using•`string`•representation.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (295 > 79)

types & grammar/ch2.md
| 413| Numeric•operations•on•such•large•ID•`number`•values•(besides•comparison,•which•will•be•fine•with•`string`s)•aren't•all•that•common,•thankfully.•But•if•you•*do*•need•to•perform•math•on•these•very•large•values,•for•now•you'll•need•to•use•a•*big•number*•utility.•Big•numbers•may•get•official•support•in•a•future•version•of•JavaScript.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (331 > 79)

types & grammar/ch2.md
| 417| To•test•if•a•value•is•an•integer,•you•can•use•the•ES6-specified•`Number.isInteger(..)`:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (87 > 79)

types & grammar/ch2.md
| 435| To•test•if•a•value•is•a•*safe•integer*,•use•the•ES6-specified•`Number.isSafeInteger(..)`:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (89 > 79)

types & grammar/ch2.md
| 456| While•integers•can•range•up•to•roughly•9•quadrillion•safely•(53•bits),•there•are•some•numeric•operations•(like•the•bitwise•operators)•that•are•only•defined•for•32-bit•`number`s,•so•the•"safe•range"•for•`number`s•used•in•that•way•must•be•much•smaller.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (250 > 79)

types & grammar/ch2.md
| 458| The•range•then•is•`Math.pow(-2,31)`•(`-2147483648`,•about•-2.1•billion)•up•to•`Math.pow(2,31)-1`•(`2147483647`,•about•+2.1•billion).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (132 > 79)

types & grammar/ch2.md
| 460| To•force•a•`number`•value•in•`a`•to•a•32-bit•signed•integer•value,•use•`a•|•0`.•This•works•because•the•`|`•bitwise•operator•only•works•for•32-bit•integer•values•(meaning•it•can•only•pay•attention•to•32•bits•and•any•other•bits•will•be•lost).•Then,•"or'ing"•with•zero•is•essentially•a•no-op•bitwise•speaking.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (306 > 79)

types & grammar/ch2.md
| 462| **Note:**•Certain•special•values•(which•we•will•cover•in•the•next•section)•such•as•`NaN`•and•`Infinity`•are•not•"32-bit•safe,"•in•that•those•values•when•passed•to•a•bitwise•operator•will•pass•through•the•abstract•operation•`ToInt32`•(see•Chapter•4)•and•become•simply•the•`+0`•value•for•the•purpose•of•that•bitwise•operation.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (324 > 79)

types & grammar/ch2.md
| 466| There•are•several•special•values•spread•across•the•various•types•that•the•*alert*•JS•developer•needs•to•be•aware•of,•and•use•properly.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (134 > 79)

types & grammar/ch2.md
| 470| For•the•`undefined`•type,•there•is•one•and•only•one•value:•`undefined`.•For•the•`null`•type,•there•is•one•and•only•one•value:•`null`.•So•for•both•of•them,•the•label•is•both•its•type•and•its•value.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (196 > 79)

types & grammar/ch2.md
| 472| Both•`undefined`•and•`null`•are•often•taken•to•be•interchangeable•as•either•"empty"•values•or•"non"•values.•Other•developers•prefer•to•distinguish•between•them•with•nuance.•For•example:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (185 > 79)

types & grammar/ch2.md
| 482| Regardless•of•how•you•choose•to•"define"•and•use•these•two•values,•`null`•is•a•special•keyword,•not•an•identifier,•and•thus•you•cannot•treat•it•as•a•variable•to•assign•to•(why•would•you!?).•However,•`undefined`•*is*•(unfortunately)•an•identifier.•Uh•oh.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (253 > 79)

types & grammar/ch2.md
| 486| In•non-`strict`•mode,•it's•actually•possible•(though•incredibly•ill-advised!)•to•assign•a•value•to•the•globally•provided•`undefined`•identifier:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (144 > 79)

types & grammar/ch2.md
| 505| In•both•non-`strict`•mode•and•`strict`•mode,•however,•you•can•create•a•local•variable•of•the•name•`undefined`.•But•again,•this•is•a•terrible•idea!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (146 > 79)

types & grammar/ch2.md
| 521| While•`undefined`•is•a•built-in•identifier•that•holds•(unless•modified•--•see•above!)•the•built-in•`undefined`•value,•another•way•to•get•this•value•is•the•`void`•operator.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (171 > 79)

types & grammar/ch2.md
| 523| The•expression•`void•___`•"voids"•out•any•value,•so•that•the•result•of•the•expression•is•always•the•`undefined`•value.•It•doesn't•modify•the•existing•value;•it•just•ensures•that•no•value•comes•back•from•the•operator•expression.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (227 > 79)

types & grammar/ch2.md
| 531| By•convention•(mostly•from•C-language•programming),•to•represent•the•`undefined`•value•stand-alone•by•using•`void`,•you'd•use•`void•0`•(though•clearly•even•`void•true`•or•any•other•`void`•expression•does•the•same•thing).•There's•no•practical•difference•between•`void•0`,•`void•1`,•and•`undefined`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (297 > 79)

types & grammar/ch2.md
| 533| But•the•`void`•operator•can•be•useful•in•a•few•other•circumstances,•if•you•need•to•ensure•that•an•expression•has•no•result•value•(even•if•it•has•side•effects).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (159 > 79)

types & grammar/ch2.md
| 557| Here,•the•`setTimeout(..)`•function•returns•a•numeric•value•(the•unique•identifier•of•the•timer•interval,•if•you•wanted•to•cancel•it),•but•we•want•to•`void`•that•out•so•that•the•return•value•of•our•function•doesn't•give•a•false-positive•with•the•`if`•statement.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (261 > 79)

types & grammar/ch2.md
| 559| Many•devs•prefer•to•just•do•these•actions•separately,•which•works•the•same•but•doesn't•use•the•`void`•operator:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (111 > 79)

types & grammar/ch2.md
| 569| In•general,•if•there's•ever•a•place•where•a•value•exists•(from•some•expression)•and•you'd•find•it•useful•for•the•value•to•be•`undefined`•instead,•use•the•`void`•operator.•That•probably•won't•be•terribly•common•in•your•programs,•but•in•the•rare•cases•you•do•need•it,•it•can•be•quite•helpful.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (290 > 79)

types & grammar/ch2.md
| 573| The•`number`•type•includes•several•special•values.•We'll•take•a•look•at•each•in•detail.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (87 > 79)

types & grammar/ch2.md
| 577| Any•mathematic•operation•you•perform•without•both•operands•being•`number`s•(or•values•that•can•be•interpreted•as•regular•`number`s•in•base•10•or•base•16)•will•result•in•the•operation•failing•to•produce•a•valid•`number`,•in•which•case•you•will•get•the•`NaN`•value.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (263 > 79)

types & grammar/ch2.md
| 579| `NaN`•literally•stands•for•"not•a•`number`",•though•this•label/description•is•very•poor•and•misleading,•as•we'll•see•shortly.•It•would•be•much•more•accurate•to•think•of•`NaN`•as•being•"invalid•number,"•"failed•number,"•or•even•"bad•number,"•than•to•think•of•it•as•"not•a•number."
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (279 > 79)

types & grammar/ch2.md
| 589| In•other•words:•"the•type•of•not-a-number•is•'number'!"•Hooray•for•confusing•names•and•semantics.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (97 > 79)

types & grammar/ch2.md
| 591| `NaN`•is•a•kind•of•"sentinel•value"•(an•otherwise•normal•value•that's•assigned•a•special•meaning)•that•represents•a•special•kind•of•error•condition•within•the•`number`•set.•The•error•condition•is,•in•essence:•"I•tried•to•perform•a•mathematic•operation•but•failed,•so•here's•the•failed•`number`•result•instead."
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (310 > 79)

types & grammar/ch2.md
| 593| So,•if•you•have•a•value•in•some•variable•and•want•to•test•to•see•if•it's•this•special•failed-number•`NaN`,•you•might•think•you•could•directly•compare•to•`NaN`•itself,•as•you•can•with•any•other•value,•like•`null`•or•`undefined`.•Nope.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (233 > 79)

types & grammar/ch2.md
| 602| `NaN`•is•a•very•special•value•in•that•it's•never•equal•to•another•`NaN`•value•(i.e.,•it's•never•equal•to•itself).•It's•the•only•value,•in•fact,•that•is•not•reflexive•(without•the•Identity•characteristic•`x•===•x`).•So,•`NaN•!==•NaN`.•A•bit•strange,•huh?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (253 > 79)

types & grammar/ch2.md
| 604| So•how•*do*•we•test•for•it,•if•we•can't•compare•to•`NaN`•(since•that•comparison•would•always•fail)?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (99 > 79)

types & grammar/ch2.md
| 612| Easy•enough,•right?•We•use•the•built-in•global•utility•called•`isNaN(..)`•and•it•tells•us•if•the•value•is•`NaN`•or•not.•Problem•solved!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (135 > 79)

types & grammar/ch2.md
| 616| The•`isNaN(..)`•utility•has•a•fatal•flaw.•It•appears•it•tried•to•take•the•meaning•of•`NaN`•("Not•a•Number")•too•literally•--•that•its•job•is•basically:•"test•if•the•thing•passed•in•is•either•not•a•`number`•or•is•a•`number`."•But•that's•not•quite•accurate.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (255 > 79)

types & grammar/ch2.md
| 629| Clearly,•`"foo"`•is•literally•*not•a•`number`*,•but•it's•definitely•not•the•`NaN`•value•either!•This•bug•has•been•in•JS•since•the•very•beginning•(over•19•years•of•*ouch*).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (171 > 79)

types & grammar/ch2.md
| 631| As•of•ES6,•finally•a•replacement•utility•has•been•provided:•`Number.isNaN(..)`.•A•simple•polyfill•for•it•so•that•you•can•safely•check•`NaN`•values•*now*•even•in•pre-ES6•browsers•is:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (181 > 79)

types & grammar/ch2.md
| 650| Actually,•we•can•implement•a•`Number.isNaN(..)`•polyfill•even•easier,•by•taking•advantage•of•that•peculiar•fact•that•`NaN`•isn't•equal•to•itself.•`NaN`•is•the•*only*•value•in•the•whole•language•where•that's•true;•every•other•value•is•always•**equal•to•itself**.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (261 > 79)

types & grammar/ch2.md
| 664| `NaN`s•are•probably•a•reality•in•a•lot•of•real-world•JS•programs,•either•on•purpose•or•by•accident.•It's•a•really•good•idea•to•use•a•reliable•test,•like•`Number.isNaN(..)`•as•provided•(or•polyfilled),•to•recognize•them•properly.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (228 > 79)

types & grammar/ch2.md
| 666| If•you're•currently•using•just•`isNaN(..)`•in•a•program,•the•sad•reality•is•your•program•*has•a•bug*,•even•if•you•haven't•been•bitten•by•it•yet!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (144 > 79)

types & grammar/ch2.md
| 670| Developers•from•traditional•compiled•languages•like•C•are•probably•used•to•seeing•either•a•compiler•error•or•runtime•exception,•like•"Divide•by•zero,"•for•an•operation•like:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (173 > 79)

types & grammar/ch2.md
| 676| However,•in•JS,•this•operation•is•well-defined•and•results•in•the•value•`Infinity`•(aka•`Number.POSITIVE_INFINITY`).•Unsurprisingly:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (132 > 79)

types & grammar/ch2.md
| 683| As•you•can•see,•`-Infinity`•(aka•`Number.NEGATIVE_INFINITY`)•results•from•a•divide-by-zero•where•either•(but•not•both!)•of•the•divide•operands•is•negative.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (155 > 79)

types & grammar/ch2.md
| 685| JS•uses•finite•numeric•representations•(IEEE•754•floating-point,•which•we•covered•earlier),•so•contrary•to•pure•mathematics,•it•seems•it•*is*•possible•to•overflow•even•with•an•operation•like•addition•or•subtraction,•in•which•case•you'd•get•`Infinity`•or•`-Infinity`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (266 > 79)

types & grammar/ch2.md
| 696| According•to•the•specification,•if•an•operation•like•addition•results•in•a•value•that's•too•big•to•represent,•the•IEEE•754•"round-to-nearest"•mode•specifies•what•the•result•should•be.•So,•in•a•crude•sense,•`Number.MAX_VALUE•+•Math.pow(•2,•969•)`•is•closer•to•`Number.MAX_VALUE`•than•to•`Infinity`,•so•it•"rounds•down,"•whereas•`Number.MAX_VALUE•+•Math.pow(•2,•970•)`•is•closer•to•`Infinity`•so•it•"rounds•up".
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (409 > 79)

types & grammar/ch2.md
| 698| If•you•think•too•much•about•that,•it's•going•to•make•your•head•hurt.•So•don't.•Seriously,•stop!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (95 > 79)

types & grammar/ch2.md
| 700| Once•you•overflow•to•either•one•of•the•*infinities*,•however,•there's•no•going•back.•In•other•words,•in•an•almost•poetic•sense,•you•can•go•from•finite•to•infinite•but•not•from•infinite•back•to•finite.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (200 > 79)

types & grammar/ch2.md
| 702| It's•almost•philosophical•to•ask:•"What•is•infinity•divided•by•infinity".•Our•naive•brains•would•likely•say•"1"•or•maybe•"infinity."•Turns•out•neither•is•true.•Both•mathematically•and•in•JavaScript,•`Infinity•/•Infinity`•is•not•a•defined•operation.•In•JS,•this•results•in•`NaN`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (278 > 79)

types & grammar/ch2.md
| 704| But•what•about•any•positive•finite•`number`•divided•by•`Infinity`?•That's•easy!•`0`.•And•what•about•a•negative•finite•`number`•divided•by•`Infinity`?•Keep•reading!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (163 > 79)

types & grammar/ch2.md
| 708| While•it•may•confuse•the•mathematics-minded•reader,•JavaScript•has•both•a•normal•zero•`0`•(otherwise•known•as•a•positive•zero•`+0`)•*and*•a•negative•zero•`-0`.•Before•we•explain•why•the•`-0`•exists,•we•should•examine•how•JS•handles•it,•because•it•can•be•quite•confusing.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (270 > 79)

types & grammar/ch2.md
| 710| Besides•being•specified•literally•as•`-0`,•negative•zero•also•results•from•certain•mathematic•operations.•For•example:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (118 > 79)

types & grammar/ch2.md
| 719| A•negative•zero•when•examined•in•the•developer•console•will•usually•reveal•`-0`,•though•that•was•not•the•common•case•until•fairly•recently,•so•some•older•browsers•you•encounter•may•still•report•it•as•`0`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (204 > 79)

types & grammar/ch2.md
| 721| However,•if•you•try•to•stringify•a•negative•zero•value,•it•will•always•be•reported•as•`"0"`,•according•to•the•spec.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (115 > 79)

types & grammar/ch2.md
| 738| Interestingly,•the•reverse•operations•(going•from•`string`•to•`number`)•don't•lie:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (82 > 79)

types & grammar/ch2.md
| 746| **Warning:**•The•`JSON.stringify(•-0•)`•behavior•of•`"0"`•is•particularly•strange•when•you•observe•that•it's•inconsistent•with•the•reverse:•`JSON.parse(•"-0"•)`•reports•`-0`•as•you'd•correctly•expect.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (200 > 79)

types & grammar/ch2.md
| 748| In•addition•to•stringification•of•negative•zero•being•deceptive•to•hide•its•true•value,•the•comparison•operators•are•also•(intentionally)•configured•to•*lie*.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (158 > 79)

types & grammar/ch2.md
| 764| Clearly,•if•you•want•to•distinguish•a•`-0`•from•a•`0`•in•your•code,•you•can't•just•rely•on•what•the•developer•console•outputs,•so•you're•going•to•have•to•be•a•bit•more•clever:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (175 > 79)

types & grammar/ch2.md
| 779| There•are•certain•applications•where•developers•use•the•magnitude•of•a•value•to•represent•one•piece•of•information•(like•speed•of•movement•per•animation•frame)•and•the•sign•of•that•`number`•to•represent•another•piece•of•information•(like•the•direction•of•that•movement).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (270 > 79)

types & grammar/ch2.md
| 781| In•those•applications,•as•one•example,•if•a•variable•arrives•at•zero•and•it•loses•its•sign,•then•you•would•lose•the•information•of•what•direction•it•was•moving•in•before•it•arrived•at•zero.•Preserving•the•sign•of•the•zero•prevents•potentially•unwanted•information•loss.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (269 > 79)

types & grammar/ch2.md
| 785| As•we•saw•above,•the•`NaN`•value•and•the•`-0`•value•have•special•behavior•when•it•comes•to•equality•comparison.•`NaN`•is•never•equal•to•itself,•so•you•have•to•use•ES6's•`Number.isNaN(..)`•(or•a•polyfill).•Similarly,•`-0`•lies•and•pretends•that•it's•equal•(even•`===`•strict•equal•--•see•Chapter•4)•to•regular•positive•`0`,•so•you•have•to•use•the•somewhat•hackish•`isNegZero(..)`•utility•we•suggested•above.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (406 > 79)

types & grammar/ch2.md
| 787| As•of•ES6,•there's•a•new•utility•that•can•be•used•to•test•two•values•for•absolute•equality,•without•any•of•these•exceptions.•It's•called•`Object.is(..)`:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (153 > 79)

types & grammar/ch2.md
| 818| `Object.is(..)`•probably•shouldn't•be•used•in•cases•where•`==`•or•`===`•are•known•to•be•*safe*•(see•Chapter•4•"Coercion"),•as•the•operators•are•likely•much•more•efficient•and•certainly•are•more•idiomatic/common.•`Object.is(..)`•is•mostly•for•these•special•cases•of•equality.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (274 > 79)

types & grammar/ch2.md
| 822| In•many•other•languages,•values•can•either•be•assigned/passed•by•value-copy•or•by•reference-copy•depending•on•the•syntax•you•use.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (129 > 79)

types & grammar/ch2.md
| 824| For•example,•in•C++•if•you•want•to•pass•a•`number`•variable•into•a•function•and•have•that•variable's•value•updated,•you•can•declare•the•function•parameter•like•`int&•myNum`,•and•when•you•pass•in•a•variable•like•`x`,•`myNum`•will•be•a•**reference•to•`x`**;•references•are•like•a•special•form•of•pointers,•where•you•obtain•a•pointer•to•another•variable•(like•an•*alias*).•If•you•don't•declare•a•reference•parameter,•the•value•passed•in•will•*always*•be•copied,•even•if•it's•a•complex•object.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (489 > 79)

types & grammar/ch2.md
| 826| In•JavaScript,•there•are•no•pointers,•and•references•work•a•bit•differently.•You•cannot•have•a•reference•from•one•JS•variable•to•another•variable.•That's•just•not•possible.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (172 > 79)

types & grammar/ch2.md
| 828| A•reference•in•JS•points•at•a•(shared)•**value**,•so•if•you•have•10•different•references,•they•are•all•always•distinct•references•to•a•single•shared•value;•**none•of•them•are•references/pointers•to•each•other.**
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (211 > 79)

types & grammar/ch2.md
| 830| Moreover,•in•JavaScript,•there•are•no•syntactic•hints•that•control•value•vs.•reference•assignment/passing.•Instead,•the•*type*•of•the•value•*solely*•controls•whether•that•value•will•be•assigned•by•value-copy•or•by•reference-copy.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (229 > 79)

types & grammar/ch2.md
| 848| Simple•values•(aka•scalar•primitives)•are•*always*•assigned/passed•by•value-copy:•`null`,•`undefined`,•`string`,•`number`,•`boolean`,•and•ES6's•`symbol`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (153 > 79)

types & grammar/ch2.md
| 850| Compound•values•--•`object`s•(including•`array`s,•and•all•boxed•object•wrappers•--•see•Chapter•3)•and•`function`s•--•*always*•create•a•copy•of•the•reference•on•assignment•or•passing.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (182 > 79)

types & grammar/ch2.md
| 852| In•the•above•snippet,•because•`2`•is•a•scalar•primitive,•`a`•holds•one•initial•copy•of•that•value,•and•`b`•is•assigned•another•*copy*•of•the•value.•When•changing•`b`,•you•are•in•no•way•changing•the•value•in•`a`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (211 > 79)

types & grammar/ch2.md
| 854| But•**both•`c`•and•`d`**•are•separate•references•to•the•same•shared•value•`[1,2,3]`,•which•is•a•compound•value.•It's•important•to•note•that•neither•`c`•nor•`d`•more•"owns"•the•`[1,2,3]`•value•--•both•are•just•equal•peer•references•to•the•value.•So,•when•using•either•reference•to•modify•(`.push(4)`)•the•actual•shared•`array`•value•itself,•it's•affecting•just•the•one•shared•value,•and•both•references•will•reference•the•newly•modified•value•`[1,2,3,4]`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (454 > 79)

types & grammar/ch2.md
| 856| Since•references•point•to•the•values•themselves•and•not•to•the•variables,•you•cannot•use•one•reference•to•change•where•another•reference•is•pointed:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (148 > 79)

types & grammar/ch2.md
| 870| When•we•make•the•assignment•`b•=•[4,5,6]`,•we•are•doing•absolutely•nothing•to•affect•*where*•`a`•is•still•referencing•(`[1,2,3]`).•To•do•that,•`b`•would•have•to•be•a•pointer•to•`a`•rather•than•a•reference•to•the•`array`•--•but•no•such•capability•exists•in•JS!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (259 > 79)

types & grammar/ch2.md
| 892| When•we•pass•in•the•argument•`a`,•it•assigns•a•copy•of•the•`a`•reference•to•`x`.•`x`•and•`a`•are•separate•references•pointing•at•the•same•`[1,2,3]`•value.•Now,•inside•the•function,•we•can•use•that•reference•to•mutate•the•value•itself•(`push(4)`).•But•when•we•make•the•assignment•`x•=•[4,5,6]`,•this•is•in•no•way•affecting•where•the•initial•reference•`a`•is•pointing•--•still•points•at•the•(now•modified)•`[1,2,3,4]`•value.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (422 > 79)

types & grammar/ch2.md
| 894| There•is•no•way•to•use•the•`x`•reference•to•change•where•`a`•is•pointing.•We•could•only•modify•the•contents•of•the•shared•value•that•both•`a`•and•`x`•are•pointing•to.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (166 > 79)

types & grammar/ch2.md
| 896| To•accomplish•changing•`a`•to•have•the•`[4,5,6,7]`•value•contents,•you•can't•create•a•new•`array`•and•assign•--•you•must•modify•the•existing•`array`•value:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (155 > 79)

types & grammar/ch2.md
| 916| As•you•can•see,•`x.length•=•0`•and•`x.push(4,5,6,7)`•were•not•creating•a•new•`array`,•but•modifying•the•existing•shared•`array`.•So•of•course,•`a`•references•the•new•`[4,5,6,7]`•contents.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (187 > 79)

types & grammar/ch2.md
| 918| Remember:•you•cannot•directly•control/override•value-copy•vs.•reference•--•those•semantics•are•controlled•entirely•by•the•type•of•the•underlying•value.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (151 > 79)

types & grammar/ch2.md
| 920| To•effectively•pass•a•compound•value•(like•an•`array`)•by•value-copy,•you•need•to•manually•make•a•copy•of•it,•so•that•the•reference•passed•doesn't•still•point•to•the•original.•For•example:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (188 > 79)

types & grammar/ch2.md
| 926| `slice(..)`•with•no•parameters•by•default•makes•an•entirely•new•(shallow)•copy•of•the•`array`.•So,•we•pass•in•a•reference•only•to•the•copied•`array`,•and•thus•`foo(..)`•cannot•affect•the•contents•of•`a`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (203 > 79)

types & grammar/ch2.md
| 928| To•do•the•reverse•--•pass•a•scalar•primitive•value•in•a•way•where•its•value•updates•can•be•seen,•kinda•like•a•reference•--•you•have•to•wrap•the•value•in•another•compound•value•(`object`,•`array`,•etc)•that•*can*•be•passed•by•reference-copy:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (240 > 79)

types & grammar/ch2.md
| 944| Here,•`obj`•acts•as•a•wrapper•for•the•scalar•primitive•property•`a`.•When•passed•to•`foo(..)`,•a•copy•of•the•`obj`•reference•is•passed•in•and•set•to•the•`wrapper`•parameter.•We•now•can•use•the•`wrapper`•reference•to•access•the•shared•object,•and•update•its•property.•After•the•function•finishes,•`obj.a`•will•see•the•updated•value•`42`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (336 > 79)

types & grammar/ch2.md
| 946| It•may•occur•to•you•that•if•you•wanted•to•pass•in•a•reference•to•a•scalar•primitive•value•like•`2`,•you•could•just•box•the•value•in•its•`Number`•object•wrapper•(see•Chapter•3).
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (176 > 79)

types & grammar/ch2.md
| 948| It•*is*•true•a•copy•of•the•reference•to•this•`Number`•object•*will*•be•passed•to•the•function,•but•unfortunately,•having•a•reference•to•the•shared•object•is•not•going•to•give•you•the•ability•to•modify•the•shared•primitive•value,•like•you•may•expect:
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (249 > 79)

types & grammar/ch2.md
| 963| The•problem•is•that•the•underlying•scalar•primitive•value•is•*not•mutable*•(same•goes•for•`String`•and•`Boolean`).•If•a•`Number`•object•holds•the•scalar•primitive•value•`2`,•that•exact•`Number`•object•can•never•be•changed•to•hold•another•value;•you•can•only•create•a•whole•new•`Number`•object•with•a•different•value.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (316 > 79)

types & grammar/ch2.md
| 965| When•`x`•is•used•in•the•expression•`x•+•1`,•the•underlying•scalar•primitive•value•`2`•is•unboxed•(extracted)•from•the•`Number`•object•automatically,•so•the•line•`x•=•x•+•1`•very•subtly•changes•`x`•from•being•a•shared•reference•to•the•`Number`•object,•to•just•holding•the•scalar•primitive•value•`3`•as•a•result•of•the•addition•operation•`2•+•1`.•Therefore,•`b`•on•the•outside•still•references•the•original•unmodified/immutable•`Number`•object•holding•the•value•`2`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (464 > 79)

types & grammar/ch2.md
| 967| You•*can*•add•properties•on•top•of•the•`Number`•object•(just•not•change•its•inner•primitive•value),•so•you•could•exchange•information•indirectly•via•those•additional•properties.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (177 > 79)

types & grammar/ch2.md
| 969| This•is•not•all•that•common,•however;•it•probably•would•not•be•considered•a•good•practice•by•most•developers.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (109 > 79)

types & grammar/ch2.md
| 971| Instead•of•using•the•wrapper•object•`Number`•in•this•way,•it's•probably•much•better•to•use•the•manual•object•wrapper•(`obj`)•approach•in•the•earlier•snippet.•That's•not•to•say•that•there's•no•clever•uses•for•the•boxed•object•wrappers•like•`Number`•--•just•that•you•should•probably•prefer•the•scalar•primitive•value•form•in•most•cases.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (334 > 79)

types & grammar/ch2.md
| 973| References•are•quite•powerful,•but•sometimes•they•get•in•your•way,•and•sometimes•you•need•them•where•they•don't•exist.•The•only•control•you•have•over•reference•vs.•value-copy•behavior•is•the•type•of•the•value•itself,•so•you•must•indirectly•influence•the•assignment/passing•behavior•by•which•value•types•you•choose•to•use.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (321 > 79)

types & grammar/ch2.md
| 977| In•JavaScript,•`array`s•are•simply•numerically•indexed•collections•of•any•value-type.•`string`s•are•somewhat•"`array`-like",•but•they•have•distinct•behaviors•and•care•must•be•taken•if•you•want•to•treat•them•as•`array`s.•Numbers•in•JavaScript•include•both•"integers"•and•floating-point•values.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (292 > 79)

types & grammar/ch2.md
| 981| The•`null`•type•has•just•one•value:•`null`,•and•likewise•the•`undefined`•type•has•just•the•`undefined`•value.•`undefined`•is•basically•the•default•value•in•any•variable•or•property•if•no•other•value•is•present.•The•`void`•operator•lets•you•create•the•`undefined`•value•from•any•other•value.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (290 > 79)

types & grammar/ch2.md
| 983| `number`s•include•several•special•values,•like•`NaN`•(supposedly•"Not•a•Number",•but•really•more•appropriately•"invalid•number");•`+Infinity`•and•`-Infinity`;•and•`-0`.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (168 > 79)

types & grammar/ch2.md
| 985| Simple•scalar•primitives•(`string`s,•`number`s,•etc.)•are•assigned/passed•by•value-copy,•but•compound•values•(`object`s,•etc.)•are•assigned/passed•by•reference-copy.•References•are•not•like•references/pointers•in•other•languages•--•they're•never•pointed•at•other•variables/references,•only•at•the•underlying•values.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (315 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/up & going/foreword.md
|    |++++| /app/up & going/foreword.md
|   1|   1| # You Don't Know JS: Up & Going
|    |   2|+
|   2|   3| # Foreword
|   3|   4| 
|   4|   5| What was the last new thing you learned?

up & going/foreword.md
|   6| Perhaps•it•was•a•foreign•language,•like•Italian•or•German.•Or•maybe•it•was•a•graphics•editor,•like•Photoshop.•Or•a•cooking•technique•or•woodworking•or•an•exercise•routine.•I•want•you•to•remember•that•feeling•when•you•finally•got•it:•the•lightbulb•moment.•When•things•went•from•blurry•to•crystal•clear,•as•you•mastered•the•table•saw•or•understood•the•difference•between•masculine•and•feminine•nouns•in•French.•How•did•it•feel?•Pretty•amazing,•right?
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (448 > 79)

up & going/foreword.md
|   8| Now•I•want•you•to•travel•back•a•little•bit•further•in•your•memory•to•right•before•you•learned•your•new•skill.•How•did•*that*•feel?•Probably•slightly•intimidating•and•maybe•a•little•bit•frustrating,•right?•At•one•point,•we•all•did•not•know•the•things•that•we•know•now•and•that’s•totally•OK;•we•all•start•somewhere.•Learning•new•material•is•an•exciting•adventure,•especially•if•you•are•looking•to•learn•the•subject•efficiently.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (425 > 79)

up & going/foreword.md
|  10| I•teach•a•lot•of•beginner•coding•classes.•The•students•who•take•my•classes•have•often•tried•teaching•themselves•subjects•like•HTML•or•JavaScript•by•reading•blog•posts•or•copying•and•pasting•code,•but•they•haven’t•been•able•to•truly•master•the•material•that•will•allow•them•to•code•their•desired•outcome.•And•because•they•don’t•truly•grasp•the•ins•and•outs•of•certain•coding•topics,•they•can’t•write•powerful•code•or•debug•their•own•work,•as•they•don’t•really•understand•what•is•happening.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (488 > 79)

up & going/foreword.md
|  12| I•always•believe•in•teaching•my•classes•the•proper•way,•meaning•I•teach•web•standards,•semantic•markup,•well-commented•code,•and•other•best•practices.•I•cover•the•subject•in•a•thorough•manner•to•explain•the•hows•and•whys,•without•just•tossing•out•code•to•copy•and•paste.•When•you•strive•to•comprehend•your•code,•you•create•better•work•and•become•better•at•what•you•do.•The•code•isn’t•just•your•*job*•anymore,•it’s•your•*craft*.•This•is•why•I•love•*Up•&•Going*.•Kyle•takes•us•on•a•deep•dive•through•syntax•and•terminology•to•give•a•great•introduction•to•JavaScript•without•cutting•corners.•This•book•doesn’t•skim•over•the•surface,•but•really•allows•us•to•genuinely•understand•the•concepts•we•will•be•writing.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (707 > 79)

up & going/foreword.md
|  14| Because•it’s•not•enough•to•be•able•to•duplicate•jQuery•snippets•into•your•website,•the•same•way•it’s•not•enough•to•learn•how•to•open,•close,•and•save•a•document•in•Photoshop.•Sure,•once•I•learn•a•few•basics•about•the•program•I•could•create•and•share•a•design•I•made.•But•without•legitimately•knowing•the•tools•and•what•is•behind•them,•how•can•I•define•a•grid,•or•craft•a•legible•type•system,•or•optimize•graphics•for•web•use.•The•same•goes•for•JavaScript.•Without•knowing•how•loops•work,•or•how•to•define•variables,•or•what•scope•is,•we•won’t•be•writing•the•best•code•we•can.•We•don’t•want•to•settle•for•anything•less•--•this•is,•after•all,•our•craft.
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (651 > 79)

up & going/foreword.md
|  16| The•more•you•are•exposed•to•JavaScript,•the•clearer•it•becomes.•Words•like•closures,•objects,•and•methods•might•seem•out•of•reach•to•you•now,•but•this•book•will•help•those•terms•come•into•clarity.•I•want•you•to•keep•those•two•feelings•of•before•and•after•you•learn•something•in•mind•as•you•begin•this•book.•It•might•seem•daunting,•but•you’ve•picked•up•this•book•because•you•are•starting•an•awesome•journey•to•hone•your•knowledge.•*Up•&•Going*•is•the•start•of•our•path•to•understanding•programming.•Enjoy•the•lightbulb•moments!
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (526 > 79)

up & going/foreword.md
|  19| [jennlukas.com](http://jennlukas.com/),•[@jennlukas](https://twitter.com/jennlukas)<br>
|    | [NORMAL] LineLengthBear:
|    | Line is longer than allowed. (87 > 79)
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/scope & closures/ch1.md
|    |++++| /app/scope & closures/ch1.md
|   1|   1| # You Don't Know JS: Scope & Closures
|    |   2|+
|   2|   3| # Chapter 1: What is Scope?
|   3|   4| 
|   4|   5| One of the most fundamental paradigms of nearly all programming languages is the ability to store values in variables, and later retrieve or modify those values. In fact, the ability to store values and pull values out of variables is what gives a program *state*.
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/scope & closures/ch1.md
|    |++++| /app/scope & closures/ch1.md
|  21|  21| 
|  22|  22| 1. **Tokenizing/Lexing:** breaking up a string of characters into meaningful (to the language) chunks, called tokens. For instance, consider the program: `var a = 2;`. This program would likely be broken up into the following tokens: `var`, `a`, `=`, `2`, and `;`. Whitespace may or may not be persisted as a token, depending on whether it's meaningful or not.
|  23|  23| 
|  24|    |-    **Note:** The difference between tokenizing and lexing is subtle and academic, but it centers on whether or not these tokens are identified in a *stateless* or *stateful* way. Put simply, if the tokenizer were to invoke stateful parsing rules to figure out whether `a` should be considered a distinct token or just part of another token, *that* would be **lexing**.
|    |  24|+   **Note:** The difference between tokenizing and lexing is subtle and academic, but it centers on whether or not these tokens are identified in a *stateless* or *stateful* way. Put simply, if the tokenizer were to invoke stateful parsing rules to figure out whether `a` should be considered a distinct token or just part of another token, *that* would be **lexing**.
|  25|  25| 
|  26|  26| 2. **Parsing:** taking a stream (array) of tokens and turning it into a tree of nested elements, which collectively represent the grammatical structure of the program. This tree is called an "AST" (<b>A</b>bstract <b>S</b>yntax <b>T</b>ree).
|  27|  27| 
|    | [NORMAL] MarkdownBear:
|    | The text does not comply to the set style.
|----|    | /app/scope & closures/ch1.md
|    |++++| /app/scope & closures/ch1.md
|  25|  25| 
|  26|  26| 2. **Parsing:** taking a stream (array) of tokens and turning it into a tree of nested elements, which collectively represent the grammatical structure of the program. This tree is called an "AST" (<b>A</b>bstract <b>S</b>yntax <b>T</b>ree).
|  27|  27| 
|  28|    |-    The tree for `var a = 2;` might start with a top-level node called `VariableDeclaration`, with a child node called `Identifier` (whose value is `a`), and another child called `AssignmentExpression` which itself has a child called `NumericLiteral` (whose value is `2`).
|    |  28|+   The tree for `var a = 2;` might start with a top-level node called `VariableDeclaration`, with a child node called `Identifier` (whose value is `a`), and another child calle
